/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ESIClient.Dotcore.Client;
using ESIClient.Dotcore.Model;

namespace ESIClient.Dotcore.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMailApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a mail label
        /// </summary>
        /// <remarks>
        /// Delete a mail label  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="labelId">An EVE label id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        void DeleteCharactersCharacterIdMailLabelsLabelId (int? characterId, int? labelId, string datasource = null, string token = null);

        /// <summary>
        /// Delete a mail label
        /// </summary>
        /// <remarks>
        /// Delete a mail label  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="labelId">An EVE label id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCharactersCharacterIdMailLabelsLabelIdWithHttpInfo (int? characterId, int? labelId, string datasource = null, string token = null);
        /// <summary>
        /// Delete a mail
        /// </summary>
        /// <remarks>
        /// Delete a mail  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        void DeleteCharactersCharacterIdMailMailId (int? characterId, int? mailId, string datasource = null, string token = null);

        /// <summary>
        /// Delete a mail
        /// </summary>
        /// <remarks>
        /// Delete a mail  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCharactersCharacterIdMailMailIdWithHttpInfo (int? characterId, int? mailId, string datasource = null, string token = null);
        /// <summary>
        /// Return mail headers
        /// </summary>
        /// <remarks>
        /// Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.  - --  This route is cached for up to 30 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="labels">Fetch only mails that match one or more of the given labels (optional)</param>
        /// <param name="lastMailId">List only mail with an ID lower than the given ID, if present (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdMail200Ok&gt;</returns>
        List<GetCharactersCharacterIdMail200Ok> GetCharactersCharacterIdMail (int? characterId, string datasource = null, string ifNoneMatch = null, List<int?> labels = null, int? lastMailId = null, string token = null);

        /// <summary>
        /// Return mail headers
        /// </summary>
        /// <remarks>
        /// Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.  - --  This route is cached for up to 30 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="labels">Fetch only mails that match one or more of the given labels (optional)</param>
        /// <param name="lastMailId">List only mail with an ID lower than the given ID, if present (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdMail200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdMail200Ok>> GetCharactersCharacterIdMailWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, List<int?> labels = null, int? lastMailId = null, string token = null);
        /// <summary>
        /// Get mail labels and unread counts
        /// </summary>
        /// <remarks>
        /// Return a list of the users mail labels, unread counts for each label and a total unread count.  - --  This route is cached for up to 30 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetCharactersCharacterIdMailLabelsOk</returns>
        GetCharactersCharacterIdMailLabelsOk GetCharactersCharacterIdMailLabels (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get mail labels and unread counts
        /// </summary>
        /// <remarks>
        /// Return a list of the users mail labels, unread counts for each label and a total unread count.  - --  This route is cached for up to 30 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetCharactersCharacterIdMailLabelsOk</returns>
        ApiResponse<GetCharactersCharacterIdMailLabelsOk> GetCharactersCharacterIdMailLabelsWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Return mailing list subscriptions
        /// </summary>
        /// <remarks>
        /// Return all mailing lists that the character is subscribed to  - --  This route is cached for up to 120 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdMailLists200Ok&gt;</returns>
        List<GetCharactersCharacterIdMailLists200Ok> GetCharactersCharacterIdMailLists (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Return mailing list subscriptions
        /// </summary>
        /// <remarks>
        /// Return all mailing lists that the character is subscribed to  - --  This route is cached for up to 120 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdMailLists200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdMailLists200Ok>> GetCharactersCharacterIdMailListsWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Return a mail
        /// </summary>
        /// <remarks>
        /// Return the contents of an EVE mail  - --  This route is cached for up to 30 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetCharactersCharacterIdMailMailIdOk</returns>
        GetCharactersCharacterIdMailMailIdOk GetCharactersCharacterIdMailMailId (int? characterId, int? mailId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Return a mail
        /// </summary>
        /// <remarks>
        /// Return the contents of an EVE mail  - --  This route is cached for up to 30 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetCharactersCharacterIdMailMailIdOk</returns>
        ApiResponse<GetCharactersCharacterIdMailMailIdOk> GetCharactersCharacterIdMailMailIdWithHttpInfo (int? characterId, int? mailId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Send a new mail
        /// </summary>
        /// <remarks>
        /// Create and send a new mail  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mail">The mail to send</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>int?</returns>
        int? PostCharactersCharacterIdMail (int? characterId, PostCharactersCharacterIdMailMail mail, string datasource = null, string token = null);

        /// <summary>
        /// Send a new mail
        /// </summary>
        /// <remarks>
        /// Create and send a new mail  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mail">The mail to send</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> PostCharactersCharacterIdMailWithHttpInfo (int? characterId, PostCharactersCharacterIdMailMail mail, string datasource = null, string token = null);
        /// <summary>
        /// Create a mail label
        /// </summary>
        /// <remarks>
        /// Create a mail label  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="label">Label to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>int?</returns>
        int? PostCharactersCharacterIdMailLabels (int? characterId, PostCharactersCharacterIdMailLabelsLabel label, string datasource = null, string token = null);

        /// <summary>
        /// Create a mail label
        /// </summary>
        /// <remarks>
        /// Create a mail label  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="label">Label to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> PostCharactersCharacterIdMailLabelsWithHttpInfo (int? characterId, PostCharactersCharacterIdMailLabelsLabel label, string datasource = null, string token = null);
        /// <summary>
        /// Update metadata about a mail
        /// </summary>
        /// <remarks>
        /// Update metadata about a mail  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contents">Data used to update the mail</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        void PutCharactersCharacterIdMailMailId (int? characterId, PutCharactersCharacterIdMailMailIdContents contents, int? mailId, string datasource = null, string token = null);

        /// <summary>
        /// Update metadata about a mail
        /// </summary>
        /// <remarks>
        /// Update metadata about a mail  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contents">Data used to update the mail</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutCharactersCharacterIdMailMailIdWithHttpInfo (int? characterId, PutCharactersCharacterIdMailMailIdContents contents, int? mailId, string datasource = null, string token = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a mail label
        /// </summary>
        /// <remarks>
        /// Delete a mail label  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="labelId">An EVE label id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCharactersCharacterIdMailLabelsLabelIdAsync (int? characterId, int? labelId, string datasource = null, string token = null);

        /// <summary>
        /// Delete a mail label
        /// </summary>
        /// <remarks>
        /// Delete a mail label  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="labelId">An EVE label id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCharactersCharacterIdMailLabelsLabelIdAsyncWithHttpInfo (int? characterId, int? labelId, string datasource = null, string token = null);
        /// <summary>
        /// Delete a mail
        /// </summary>
        /// <remarks>
        /// Delete a mail  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCharactersCharacterIdMailMailIdAsync (int? characterId, int? mailId, string datasource = null, string token = null);

        /// <summary>
        /// Delete a mail
        /// </summary>
        /// <remarks>
        /// Delete a mail  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCharactersCharacterIdMailMailIdAsyncWithHttpInfo (int? characterId, int? mailId, string datasource = null, string token = null);
        /// <summary>
        /// Return mail headers
        /// </summary>
        /// <remarks>
        /// Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.  - --  This route is cached for up to 30 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="labels">Fetch only mails that match one or more of the given labels (optional)</param>
        /// <param name="lastMailId">List only mail with an ID lower than the given ID, if present (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdMail200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdMail200Ok>> GetCharactersCharacterIdMailAsync (int? characterId, string datasource = null, string ifNoneMatch = null, List<int?> labels = null, int? lastMailId = null, string token = null);

        /// <summary>
        /// Return mail headers
        /// </summary>
        /// <remarks>
        /// Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.  - --  This route is cached for up to 30 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="labels">Fetch only mails that match one or more of the given labels (optional)</param>
        /// <param name="lastMailId">List only mail with an ID lower than the given ID, if present (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdMail200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdMail200Ok>>> GetCharactersCharacterIdMailAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, List<int?> labels = null, int? lastMailId = null, string token = null);
        /// <summary>
        /// Get mail labels and unread counts
        /// </summary>
        /// <remarks>
        /// Return a list of the users mail labels, unread counts for each label and a total unread count.  - --  This route is cached for up to 30 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetCharactersCharacterIdMailLabelsOk</returns>
        System.Threading.Tasks.Task<GetCharactersCharacterIdMailLabelsOk> GetCharactersCharacterIdMailLabelsAsync (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get mail labels and unread counts
        /// </summary>
        /// <remarks>
        /// Return a list of the users mail labels, unread counts for each label and a total unread count.  - --  This route is cached for up to 30 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetCharactersCharacterIdMailLabelsOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCharactersCharacterIdMailLabelsOk>> GetCharactersCharacterIdMailLabelsAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Return mailing list subscriptions
        /// </summary>
        /// <remarks>
        /// Return all mailing lists that the character is subscribed to  - --  This route is cached for up to 120 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdMailLists200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdMailLists200Ok>> GetCharactersCharacterIdMailListsAsync (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Return mailing list subscriptions
        /// </summary>
        /// <remarks>
        /// Return all mailing lists that the character is subscribed to  - --  This route is cached for up to 120 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdMailLists200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdMailLists200Ok>>> GetCharactersCharacterIdMailListsAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Return a mail
        /// </summary>
        /// <remarks>
        /// Return the contents of an EVE mail  - --  This route is cached for up to 30 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetCharactersCharacterIdMailMailIdOk</returns>
        System.Threading.Tasks.Task<GetCharactersCharacterIdMailMailIdOk> GetCharactersCharacterIdMailMailIdAsync (int? characterId, int? mailId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Return a mail
        /// </summary>
        /// <remarks>
        /// Return the contents of an EVE mail  - --  This route is cached for up to 30 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetCharactersCharacterIdMailMailIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCharactersCharacterIdMailMailIdOk>> GetCharactersCharacterIdMailMailIdAsyncWithHttpInfo (int? characterId, int? mailId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Send a new mail
        /// </summary>
        /// <remarks>
        /// Create and send a new mail  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mail">The mail to send</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> PostCharactersCharacterIdMailAsync (int? characterId, PostCharactersCharacterIdMailMail mail, string datasource = null, string token = null);

        /// <summary>
        /// Send a new mail
        /// </summary>
        /// <remarks>
        /// Create and send a new mail  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mail">The mail to send</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> PostCharactersCharacterIdMailAsyncWithHttpInfo (int? characterId, PostCharactersCharacterIdMailMail mail, string datasource = null, string token = null);
        /// <summary>
        /// Create a mail label
        /// </summary>
        /// <remarks>
        /// Create a mail label  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="label">Label to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> PostCharactersCharacterIdMailLabelsAsync (int? characterId, PostCharactersCharacterIdMailLabelsLabel label, string datasource = null, string token = null);

        /// <summary>
        /// Create a mail label
        /// </summary>
        /// <remarks>
        /// Create a mail label  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="label">Label to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> PostCharactersCharacterIdMailLabelsAsyncWithHttpInfo (int? characterId, PostCharactersCharacterIdMailLabelsLabel label, string datasource = null, string token = null);
        /// <summary>
        /// Update metadata about a mail
        /// </summary>
        /// <remarks>
        /// Update metadata about a mail  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contents">Data used to update the mail</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutCharactersCharacterIdMailMailIdAsync (int? characterId, PutCharactersCharacterIdMailMailIdContents contents, int? mailId, string datasource = null, string token = null);

        /// <summary>
        /// Update metadata about a mail
        /// </summary>
        /// <remarks>
        /// Update metadata about a mail  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contents">Data used to update the mail</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutCharactersCharacterIdMailMailIdAsyncWithHttpInfo (int? characterId, PutCharactersCharacterIdMailMailIdContents contents, int? mailId, string datasource = null, string token = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MailApi : IMailApi
    {
        private ESIClient.Dotcore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MailApi(String basePath)
        {
            this.Configuration = new ESIClient.Dotcore.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MailApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MailApi(ESIClient.Dotcore.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ESIClient.Dotcore.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ESIClient.Dotcore.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESIClient.Dotcore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a mail label Delete a mail label  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="labelId">An EVE label id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        public void DeleteCharactersCharacterIdMailLabelsLabelId (int? characterId, int? labelId, string datasource = null, string token = null)
        {
             DeleteCharactersCharacterIdMailLabelsLabelIdWithHttpInfo(characterId, labelId, datasource, token);
        }

        /// <summary>
        /// Delete a mail label Delete a mail label  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="labelId">An EVE label id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCharactersCharacterIdMailLabelsLabelIdWithHttpInfo (int? characterId, int? labelId, string datasource = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->DeleteCharactersCharacterIdMailLabelsLabelId");
            // verify the required parameter 'labelId' is set
            if (labelId == null)
                throw new ApiException(400, "Missing required parameter 'labelId' when calling MailApi->DeleteCharactersCharacterIdMailLabelsLabelId");

            var localVarPath = "./v1/characters/{character_id}/mail/labels/{label_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (labelId != null) localVarPathParams.Add("label_id", this.Configuration.ApiClient.ParameterToString(labelId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCharactersCharacterIdMailLabelsLabelId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                null);
        }

        /// <summary>
        /// Delete a mail label Delete a mail label  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="labelId">An EVE label id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCharactersCharacterIdMailLabelsLabelIdAsync (int? characterId, int? labelId, string datasource = null, string token = null)
        {
             await DeleteCharactersCharacterIdMailLabelsLabelIdAsyncWithHttpInfo(characterId, labelId, datasource, token);

        }

        /// <summary>
        /// Delete a mail label Delete a mail label  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="labelId">An EVE label id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCharactersCharacterIdMailLabelsLabelIdAsyncWithHttpInfo (int? characterId, int? labelId, string datasource = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->DeleteCharactersCharacterIdMailLabelsLabelId");
            // verify the required parameter 'labelId' is set
            if (labelId == null)
                throw new ApiException(400, "Missing required parameter 'labelId' when calling MailApi->DeleteCharactersCharacterIdMailLabelsLabelId");

            var localVarPath = "./v1/characters/{character_id}/mail/labels/{label_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (labelId != null) localVarPathParams.Add("label_id", this.Configuration.ApiClient.ParameterToString(labelId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCharactersCharacterIdMailLabelsLabelId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                null);
        }

        /// <summary>
        /// Delete a mail Delete a mail  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        public void DeleteCharactersCharacterIdMailMailId (int? characterId, int? mailId, string datasource = null, string token = null)
        {
             DeleteCharactersCharacterIdMailMailIdWithHttpInfo(characterId, mailId, datasource, token);
        }

        /// <summary>
        /// Delete a mail Delete a mail  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCharactersCharacterIdMailMailIdWithHttpInfo (int? characterId, int? mailId, string datasource = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->DeleteCharactersCharacterIdMailMailId");
            // verify the required parameter 'mailId' is set
            if (mailId == null)
                throw new ApiException(400, "Missing required parameter 'mailId' when calling MailApi->DeleteCharactersCharacterIdMailMailId");

            var localVarPath = "./v1/characters/{character_id}/mail/{mail_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (mailId != null) localVarPathParams.Add("mail_id", this.Configuration.ApiClient.ParameterToString(mailId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCharactersCharacterIdMailMailId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                null);
        }

        /// <summary>
        /// Delete a mail Delete a mail  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCharactersCharacterIdMailMailIdAsync (int? characterId, int? mailId, string datasource = null, string token = null)
        {
             await DeleteCharactersCharacterIdMailMailIdAsyncWithHttpInfo(characterId, mailId, datasource, token);

        }

        /// <summary>
        /// Delete a mail Delete a mail  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCharactersCharacterIdMailMailIdAsyncWithHttpInfo (int? characterId, int? mailId, string datasource = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->DeleteCharactersCharacterIdMailMailId");
            // verify the required parameter 'mailId' is set
            if (mailId == null)
                throw new ApiException(400, "Missing required parameter 'mailId' when calling MailApi->DeleteCharactersCharacterIdMailMailId");

            var localVarPath = "./v1/characters/{character_id}/mail/{mail_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (mailId != null) localVarPathParams.Add("mail_id", this.Configuration.ApiClient.ParameterToString(mailId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCharactersCharacterIdMailMailId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                null);
        }

        /// <summary>
        /// Return mail headers Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.  - --  This route is cached for up to 30 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="labels">Fetch only mails that match one or more of the given labels (optional)</param>
        /// <param name="lastMailId">List only mail with an ID lower than the given ID, if present (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdMail200Ok&gt;</returns>
        public List<GetCharactersCharacterIdMail200Ok> GetCharactersCharacterIdMail (int? characterId, string datasource = null, string ifNoneMatch = null, List<int?> labels = null, int? lastMailId = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdMail200Ok>> localVarResponse = GetCharactersCharacterIdMailWithHttpInfo(characterId, datasource, ifNoneMatch, labels, lastMailId, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return mail headers Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.  - --  This route is cached for up to 30 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="labels">Fetch only mails that match one or more of the given labels (optional)</param>
        /// <param name="lastMailId">List only mail with an ID lower than the given ID, if present (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdMail200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdMail200Ok> > GetCharactersCharacterIdMailWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, List<int?> labels = null, int? lastMailId = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->GetCharactersCharacterIdMail");

            var localVarPath = "./v1/characters/{character_id}/mail/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (labels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "labels", labels)); // query parameter
            if (lastMailId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_mail_id", lastMailId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdMail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdMail200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCharactersCharacterIdMail200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdMail200Ok>)));
        }

        /// <summary>
        /// Return mail headers Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.  - --  This route is cached for up to 30 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="labels">Fetch only mails that match one or more of the given labels (optional)</param>
        /// <param name="lastMailId">List only mail with an ID lower than the given ID, if present (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdMail200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdMail200Ok>> GetCharactersCharacterIdMailAsync (int? characterId, string datasource = null, string ifNoneMatch = null, List<int?> labels = null, int? lastMailId = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdMail200Ok>> localVarResponse = await GetCharactersCharacterIdMailAsyncWithHttpInfo(characterId, datasource, ifNoneMatch, labels, lastMailId, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return mail headers Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.  - --  This route is cached for up to 30 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="labels">Fetch only mails that match one or more of the given labels (optional)</param>
        /// <param name="lastMailId">List only mail with an ID lower than the given ID, if present (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdMail200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdMail200Ok>>> GetCharactersCharacterIdMailAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, List<int?> labels = null, int? lastMailId = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->GetCharactersCharacterIdMail");

            var localVarPath = "./v1/characters/{character_id}/mail/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (labels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "labels", labels)); // query parameter
            if (lastMailId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_mail_id", lastMailId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdMail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdMail200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCharactersCharacterIdMail200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdMail200Ok>)));
        }

        /// <summary>
        /// Get mail labels and unread counts Return a list of the users mail labels, unread counts for each label and a total unread count.  - --  This route is cached for up to 30 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetCharactersCharacterIdMailLabelsOk</returns>
        public GetCharactersCharacterIdMailLabelsOk GetCharactersCharacterIdMailLabels (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetCharactersCharacterIdMailLabelsOk> localVarResponse = GetCharactersCharacterIdMailLabelsWithHttpInfo(characterId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mail labels and unread counts Return a list of the users mail labels, unread counts for each label and a total unread count.  - --  This route is cached for up to 30 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetCharactersCharacterIdMailLabelsOk</returns>
        public ApiResponse< GetCharactersCharacterIdMailLabelsOk > GetCharactersCharacterIdMailLabelsWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->GetCharactersCharacterIdMailLabels");

            var localVarPath = "./v3/characters/{character_id}/mail/labels/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdMailLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCharactersCharacterIdMailLabelsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetCharactersCharacterIdMailLabelsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCharactersCharacterIdMailLabelsOk)));
        }

        /// <summary>
        /// Get mail labels and unread counts Return a list of the users mail labels, unread counts for each label and a total unread count.  - --  This route is cached for up to 30 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetCharactersCharacterIdMailLabelsOk</returns>
        public async System.Threading.Tasks.Task<GetCharactersCharacterIdMailLabelsOk> GetCharactersCharacterIdMailLabelsAsync (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetCharactersCharacterIdMailLabelsOk> localVarResponse = await GetCharactersCharacterIdMailLabelsAsyncWithHttpInfo(characterId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mail labels and unread counts Return a list of the users mail labels, unread counts for each label and a total unread count.  - --  This route is cached for up to 30 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetCharactersCharacterIdMailLabelsOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCharactersCharacterIdMailLabelsOk>> GetCharactersCharacterIdMailLabelsAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->GetCharactersCharacterIdMailLabels");

            var localVarPath = "./v3/characters/{character_id}/mail/labels/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdMailLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCharactersCharacterIdMailLabelsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetCharactersCharacterIdMailLabelsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCharactersCharacterIdMailLabelsOk)));
        }

        /// <summary>
        /// Return mailing list subscriptions Return all mailing lists that the character is subscribed to  - --  This route is cached for up to 120 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdMailLists200Ok&gt;</returns>
        public List<GetCharactersCharacterIdMailLists200Ok> GetCharactersCharacterIdMailLists (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdMailLists200Ok>> localVarResponse = GetCharactersCharacterIdMailListsWithHttpInfo(characterId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return mailing list subscriptions Return all mailing lists that the character is subscribed to  - --  This route is cached for up to 120 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdMailLists200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdMailLists200Ok> > GetCharactersCharacterIdMailListsWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->GetCharactersCharacterIdMailLists");

            var localVarPath = "./v1/characters/{character_id}/mail/lists/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdMailLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdMailLists200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCharactersCharacterIdMailLists200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdMailLists200Ok>)));
        }

        /// <summary>
        /// Return mailing list subscriptions Return all mailing lists that the character is subscribed to  - --  This route is cached for up to 120 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdMailLists200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdMailLists200Ok>> GetCharactersCharacterIdMailListsAsync (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdMailLists200Ok>> localVarResponse = await GetCharactersCharacterIdMailListsAsyncWithHttpInfo(characterId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return mailing list subscriptions Return all mailing lists that the character is subscribed to  - --  This route is cached for up to 120 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdMailLists200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdMailLists200Ok>>> GetCharactersCharacterIdMailListsAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->GetCharactersCharacterIdMailLists");

            var localVarPath = "./v1/characters/{character_id}/mail/lists/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdMailLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdMailLists200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCharactersCharacterIdMailLists200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdMailLists200Ok>)));
        }

        /// <summary>
        /// Return a mail Return the contents of an EVE mail  - --  This route is cached for up to 30 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetCharactersCharacterIdMailMailIdOk</returns>
        public GetCharactersCharacterIdMailMailIdOk GetCharactersCharacterIdMailMailId (int? characterId, int? mailId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetCharactersCharacterIdMailMailIdOk> localVarResponse = GetCharactersCharacterIdMailMailIdWithHttpInfo(characterId, mailId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a mail Return the contents of an EVE mail  - --  This route is cached for up to 30 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetCharactersCharacterIdMailMailIdOk</returns>
        public ApiResponse< GetCharactersCharacterIdMailMailIdOk > GetCharactersCharacterIdMailMailIdWithHttpInfo (int? characterId, int? mailId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->GetCharactersCharacterIdMailMailId");
            // verify the required parameter 'mailId' is set
            if (mailId == null)
                throw new ApiException(400, "Missing required parameter 'mailId' when calling MailApi->GetCharactersCharacterIdMailMailId");

            var localVarPath = "./v1/characters/{character_id}/mail/{mail_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (mailId != null) localVarPathParams.Add("mail_id", this.Configuration.ApiClient.ParameterToString(mailId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdMailMailId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCharactersCharacterIdMailMailIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetCharactersCharacterIdMailMailIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCharactersCharacterIdMailMailIdOk)));
        }

        /// <summary>
        /// Return a mail Return the contents of an EVE mail  - --  This route is cached for up to 30 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetCharactersCharacterIdMailMailIdOk</returns>
        public async System.Threading.Tasks.Task<GetCharactersCharacterIdMailMailIdOk> GetCharactersCharacterIdMailMailIdAsync (int? characterId, int? mailId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetCharactersCharacterIdMailMailIdOk> localVarResponse = await GetCharactersCharacterIdMailMailIdAsyncWithHttpInfo(characterId, mailId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a mail Return the contents of an EVE mail  - --  This route is cached for up to 30 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetCharactersCharacterIdMailMailIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCharactersCharacterIdMailMailIdOk>> GetCharactersCharacterIdMailMailIdAsyncWithHttpInfo (int? characterId, int? mailId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->GetCharactersCharacterIdMailMailId");
            // verify the required parameter 'mailId' is set
            if (mailId == null)
                throw new ApiException(400, "Missing required parameter 'mailId' when calling MailApi->GetCharactersCharacterIdMailMailId");

            var localVarPath = "./v1/characters/{character_id}/mail/{mail_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (mailId != null) localVarPathParams.Add("mail_id", this.Configuration.ApiClient.ParameterToString(mailId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdMailMailId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCharactersCharacterIdMailMailIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetCharactersCharacterIdMailMailIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCharactersCharacterIdMailMailIdOk)));
        }

        /// <summary>
        /// Send a new mail Create and send a new mail  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mail">The mail to send</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>int?</returns>
        public int? PostCharactersCharacterIdMail (int? characterId, PostCharactersCharacterIdMailMail mail, string datasource = null, string token = null)
        {
             ApiResponse<int?> localVarResponse = PostCharactersCharacterIdMailWithHttpInfo(characterId, mail, datasource, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a new mail Create and send a new mail  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mail">The mail to send</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > PostCharactersCharacterIdMailWithHttpInfo (int? characterId, PostCharactersCharacterIdMailMail mail, string datasource = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->PostCharactersCharacterIdMail");
            // verify the required parameter 'mail' is set
            if (mail == null)
                throw new ApiException(400, "Missing required parameter 'mail' when calling MailApi->PostCharactersCharacterIdMail");

            var localVarPath = "./v1/characters/{character_id}/mail/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (mail != null && mail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mail; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCharactersCharacterIdMail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Send a new mail Create and send a new mail  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mail">The mail to send</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> PostCharactersCharacterIdMailAsync (int? characterId, PostCharactersCharacterIdMailMail mail, string datasource = null, string token = null)
        {
             ApiResponse<int?> localVarResponse = await PostCharactersCharacterIdMailAsyncWithHttpInfo(characterId, mail, datasource, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a new mail Create and send a new mail  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="mail">The mail to send</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> PostCharactersCharacterIdMailAsyncWithHttpInfo (int? characterId, PostCharactersCharacterIdMailMail mail, string datasource = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->PostCharactersCharacterIdMail");
            // verify the required parameter 'mail' is set
            if (mail == null)
                throw new ApiException(400, "Missing required parameter 'mail' when calling MailApi->PostCharactersCharacterIdMail");

            var localVarPath = "./v1/characters/{character_id}/mail/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (mail != null && mail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mail; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCharactersCharacterIdMail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Create a mail label Create a mail label  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="label">Label to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>int?</returns>
        public int? PostCharactersCharacterIdMailLabels (int? characterId, PostCharactersCharacterIdMailLabelsLabel label, string datasource = null, string token = null)
        {
             ApiResponse<int?> localVarResponse = PostCharactersCharacterIdMailLabelsWithHttpInfo(characterId, label, datasource, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a mail label Create a mail label  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="label">Label to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > PostCharactersCharacterIdMailLabelsWithHttpInfo (int? characterId, PostCharactersCharacterIdMailLabelsLabel label, string datasource = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->PostCharactersCharacterIdMailLabels");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling MailApi->PostCharactersCharacterIdMailLabels");

            var localVarPath = "./v2/characters/{character_id}/mail/labels/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (label != null && label.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(label); // http body (model) parameter
            }
            else
            {
                localVarPostBody = label; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCharactersCharacterIdMailLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Create a mail label Create a mail label  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="label">Label to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> PostCharactersCharacterIdMailLabelsAsync (int? characterId, PostCharactersCharacterIdMailLabelsLabel label, string datasource = null, string token = null)
        {
             ApiResponse<int?> localVarResponse = await PostCharactersCharacterIdMailLabelsAsyncWithHttpInfo(characterId, label, datasource, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a mail label Create a mail label  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="label">Label to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> PostCharactersCharacterIdMailLabelsAsyncWithHttpInfo (int? characterId, PostCharactersCharacterIdMailLabelsLabel label, string datasource = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->PostCharactersCharacterIdMailLabels");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling MailApi->PostCharactersCharacterIdMailLabels");

            var localVarPath = "./v2/characters/{character_id}/mail/labels/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (label != null && label.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(label); // http body (model) parameter
            }
            else
            {
                localVarPostBody = label; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCharactersCharacterIdMailLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Update metadata about a mail Update metadata about a mail  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contents">Data used to update the mail</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        public void PutCharactersCharacterIdMailMailId (int? characterId, PutCharactersCharacterIdMailMailIdContents contents, int? mailId, string datasource = null, string token = null)
        {
             PutCharactersCharacterIdMailMailIdWithHttpInfo(characterId, contents, mailId, datasource, token);
        }

        /// <summary>
        /// Update metadata about a mail Update metadata about a mail  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contents">Data used to update the mail</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutCharactersCharacterIdMailMailIdWithHttpInfo (int? characterId, PutCharactersCharacterIdMailMailIdContents contents, int? mailId, string datasource = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->PutCharactersCharacterIdMailMailId");
            // verify the required parameter 'contents' is set
            if (contents == null)
                throw new ApiException(400, "Missing required parameter 'contents' when calling MailApi->PutCharactersCharacterIdMailMailId");
            // verify the required parameter 'mailId' is set
            if (mailId == null)
                throw new ApiException(400, "Missing required parameter 'mailId' when calling MailApi->PutCharactersCharacterIdMailMailId");

            var localVarPath = "./v1/characters/{character_id}/mail/{mail_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (mailId != null) localVarPathParams.Add("mail_id", this.Configuration.ApiClient.ParameterToString(mailId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (contents != null && contents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contents; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCharactersCharacterIdMailMailId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                null);
        }

        /// <summary>
        /// Update metadata about a mail Update metadata about a mail  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contents">Data used to update the mail</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutCharactersCharacterIdMailMailIdAsync (int? characterId, PutCharactersCharacterIdMailMailIdContents contents, int? mailId, string datasource = null, string token = null)
        {
             await PutCharactersCharacterIdMailMailIdAsyncWithHttpInfo(characterId, contents, mailId, datasource, token);

        }

        /// <summary>
        /// Update metadata about a mail Update metadata about a mail  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contents">Data used to update the mail</param>
        /// <param name="mailId">An EVE mail ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutCharactersCharacterIdMailMailIdAsyncWithHttpInfo (int? characterId, PutCharactersCharacterIdMailMailIdContents contents, int? mailId, string datasource = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MailApi->PutCharactersCharacterIdMailMailId");
            // verify the required parameter 'contents' is set
            if (contents == null)
                throw new ApiException(400, "Missing required parameter 'contents' when calling MailApi->PutCharactersCharacterIdMailMailId");
            // verify the required parameter 'mailId' is set
            if (mailId == null)
                throw new ApiException(400, "Missing required parameter 'mailId' when calling MailApi->PutCharactersCharacterIdMailMailId");

            var localVarPath = "./v1/characters/{character_id}/mail/{mail_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (mailId != null) localVarPathParams.Add("mail_id", this.Configuration.ApiClient.ParameterToString(mailId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (contents != null && contents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contents; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCharactersCharacterIdMailMailId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                null);
        }

    }
}
