/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ESIClient.Dotcore.Client;
using ESIClient.Dotcore.Model;

namespace ESIClient.Dotcore.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBookmarksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List bookmarks
        /// </summary>
        /// <remarks>
        /// A list of your character&#39;s personal bookmarks  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdBookmarks200Ok&gt;</returns>
        List<GetCharactersCharacterIdBookmarks200Ok> GetCharactersCharacterIdBookmarks (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List bookmarks
        /// </summary>
        /// <remarks>
        /// A list of your character&#39;s personal bookmarks  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdBookmarks200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdBookmarks200Ok>> GetCharactersCharacterIdBookmarksWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// List bookmark folders
        /// </summary>
        /// <remarks>
        /// A list of your character&#39;s personal bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdBookmarksFolders200Ok&gt;</returns>
        List<GetCharactersCharacterIdBookmarksFolders200Ok> GetCharactersCharacterIdBookmarksFolders (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List bookmark folders
        /// </summary>
        /// <remarks>
        /// A list of your character&#39;s personal bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdBookmarksFolders200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdBookmarksFolders200Ok>> GetCharactersCharacterIdBookmarksFoldersWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// List corporation bookmarks
        /// </summary>
        /// <remarks>
        /// A list of your corporation&#39;s bookmarks  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdBookmarks200Ok&gt;</returns>
        List<GetCorporationsCorporationIdBookmarks200Ok> GetCorporationsCorporationIdBookmarks (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List corporation bookmarks
        /// </summary>
        /// <remarks>
        /// A list of your corporation&#39;s bookmarks  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdBookmarks200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdBookmarks200Ok>> GetCorporationsCorporationIdBookmarksWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// List corporation bookmark folders
        /// </summary>
        /// <remarks>
        /// A list of your corporation&#39;s bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdBookmarksFolders200Ok&gt;</returns>
        List<GetCorporationsCorporationIdBookmarksFolders200Ok> GetCorporationsCorporationIdBookmarksFolders (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List corporation bookmark folders
        /// </summary>
        /// <remarks>
        /// A list of your corporation&#39;s bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdBookmarksFolders200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdBookmarksFolders200Ok>> GetCorporationsCorporationIdBookmarksFoldersWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List bookmarks
        /// </summary>
        /// <remarks>
        /// A list of your character&#39;s personal bookmarks  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdBookmarks200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdBookmarks200Ok>> GetCharactersCharacterIdBookmarksAsync (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List bookmarks
        /// </summary>
        /// <remarks>
        /// A list of your character&#39;s personal bookmarks  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdBookmarks200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdBookmarks200Ok>>> GetCharactersCharacterIdBookmarksAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// List bookmark folders
        /// </summary>
        /// <remarks>
        /// A list of your character&#39;s personal bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdBookmarksFolders200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdBookmarksFolders200Ok>> GetCharactersCharacterIdBookmarksFoldersAsync (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List bookmark folders
        /// </summary>
        /// <remarks>
        /// A list of your character&#39;s personal bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdBookmarksFolders200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdBookmarksFolders200Ok>>> GetCharactersCharacterIdBookmarksFoldersAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// List corporation bookmarks
        /// </summary>
        /// <remarks>
        /// A list of your corporation&#39;s bookmarks  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdBookmarks200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdBookmarks200Ok>> GetCorporationsCorporationIdBookmarksAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List corporation bookmarks
        /// </summary>
        /// <remarks>
        /// A list of your corporation&#39;s bookmarks  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdBookmarks200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdBookmarks200Ok>>> GetCorporationsCorporationIdBookmarksAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// List corporation bookmark folders
        /// </summary>
        /// <remarks>
        /// A list of your corporation&#39;s bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdBookmarksFolders200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdBookmarksFolders200Ok>> GetCorporationsCorporationIdBookmarksFoldersAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List corporation bookmark folders
        /// </summary>
        /// <remarks>
        /// A list of your corporation&#39;s bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdBookmarksFolders200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdBookmarksFolders200Ok>>> GetCorporationsCorporationIdBookmarksFoldersAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BookmarksApi : IBookmarksApi
    {
        private ESIClient.Dotcore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BookmarksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BookmarksApi(String basePath)
        {
            this.Configuration = new ESIClient.Dotcore.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BookmarksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BookmarksApi(ESIClient.Dotcore.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ESIClient.Dotcore.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ESIClient.Dotcore.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESIClient.Dotcore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List bookmarks A list of your character&#39;s personal bookmarks  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdBookmarks200Ok&gt;</returns>
        public List<GetCharactersCharacterIdBookmarks200Ok> GetCharactersCharacterIdBookmarks (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdBookmarks200Ok>> localVarResponse = GetCharactersCharacterIdBookmarksWithHttpInfo(characterId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List bookmarks A list of your character&#39;s personal bookmarks  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdBookmarks200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdBookmarks200Ok> > GetCharactersCharacterIdBookmarksWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling BookmarksApi->GetCharactersCharacterIdBookmarks");

            var localVarPath = "./v2/characters/{character_id}/bookmarks/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdBookmarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdBookmarks200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCharactersCharacterIdBookmarks200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdBookmarks200Ok>)));
        }

        /// <summary>
        /// List bookmarks A list of your character&#39;s personal bookmarks  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdBookmarks200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdBookmarks200Ok>> GetCharactersCharacterIdBookmarksAsync (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdBookmarks200Ok>> localVarResponse = await GetCharactersCharacterIdBookmarksAsyncWithHttpInfo(characterId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List bookmarks A list of your character&#39;s personal bookmarks  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdBookmarks200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdBookmarks200Ok>>> GetCharactersCharacterIdBookmarksAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling BookmarksApi->GetCharactersCharacterIdBookmarks");

            var localVarPath = "./v2/characters/{character_id}/bookmarks/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdBookmarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdBookmarks200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCharactersCharacterIdBookmarks200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdBookmarks200Ok>)));
        }

        /// <summary>
        /// List bookmark folders A list of your character&#39;s personal bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdBookmarksFolders200Ok&gt;</returns>
        public List<GetCharactersCharacterIdBookmarksFolders200Ok> GetCharactersCharacterIdBookmarksFolders (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdBookmarksFolders200Ok>> localVarResponse = GetCharactersCharacterIdBookmarksFoldersWithHttpInfo(characterId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List bookmark folders A list of your character&#39;s personal bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdBookmarksFolders200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdBookmarksFolders200Ok> > GetCharactersCharacterIdBookmarksFoldersWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling BookmarksApi->GetCharactersCharacterIdBookmarksFolders");

            var localVarPath = "./v2/characters/{character_id}/bookmarks/folders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdBookmarksFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdBookmarksFolders200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCharactersCharacterIdBookmarksFolders200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdBookmarksFolders200Ok>)));
        }

        /// <summary>
        /// List bookmark folders A list of your character&#39;s personal bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdBookmarksFolders200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdBookmarksFolders200Ok>> GetCharactersCharacterIdBookmarksFoldersAsync (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdBookmarksFolders200Ok>> localVarResponse = await GetCharactersCharacterIdBookmarksFoldersAsyncWithHttpInfo(characterId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List bookmark folders A list of your character&#39;s personal bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdBookmarksFolders200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdBookmarksFolders200Ok>>> GetCharactersCharacterIdBookmarksFoldersAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling BookmarksApi->GetCharactersCharacterIdBookmarksFolders");

            var localVarPath = "./v2/characters/{character_id}/bookmarks/folders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdBookmarksFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdBookmarksFolders200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCharactersCharacterIdBookmarksFolders200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdBookmarksFolders200Ok>)));
        }

        /// <summary>
        /// List corporation bookmarks A list of your corporation&#39;s bookmarks  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdBookmarks200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdBookmarks200Ok> GetCorporationsCorporationIdBookmarks (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdBookmarks200Ok>> localVarResponse = GetCorporationsCorporationIdBookmarksWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List corporation bookmarks A list of your corporation&#39;s bookmarks  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdBookmarks200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdBookmarks200Ok> > GetCorporationsCorporationIdBookmarksWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling BookmarksApi->GetCorporationsCorporationIdBookmarks");

            var localVarPath = "./v1/corporations/{corporation_id}/bookmarks/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdBookmarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdBookmarks200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCorporationsCorporationIdBookmarks200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdBookmarks200Ok>)));
        }

        /// <summary>
        /// List corporation bookmarks A list of your corporation&#39;s bookmarks  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdBookmarks200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdBookmarks200Ok>> GetCorporationsCorporationIdBookmarksAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdBookmarks200Ok>> localVarResponse = await GetCorporationsCorporationIdBookmarksAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List corporation bookmarks A list of your corporation&#39;s bookmarks  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdBookmarks200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdBookmarks200Ok>>> GetCorporationsCorporationIdBookmarksAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling BookmarksApi->GetCorporationsCorporationIdBookmarks");

            var localVarPath = "./v1/corporations/{corporation_id}/bookmarks/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdBookmarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdBookmarks200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCorporationsCorporationIdBookmarks200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdBookmarks200Ok>)));
        }

        /// <summary>
        /// List corporation bookmark folders A list of your corporation&#39;s bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdBookmarksFolders200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdBookmarksFolders200Ok> GetCorporationsCorporationIdBookmarksFolders (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdBookmarksFolders200Ok>> localVarResponse = GetCorporationsCorporationIdBookmarksFoldersWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List corporation bookmark folders A list of your corporation&#39;s bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdBookmarksFolders200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdBookmarksFolders200Ok> > GetCorporationsCorporationIdBookmarksFoldersWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling BookmarksApi->GetCorporationsCorporationIdBookmarksFolders");

            var localVarPath = "./v1/corporations/{corporation_id}/bookmarks/folders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdBookmarksFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdBookmarksFolders200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCorporationsCorporationIdBookmarksFolders200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdBookmarksFolders200Ok>)));
        }

        /// <summary>
        /// List corporation bookmark folders A list of your corporation&#39;s bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdBookmarksFolders200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdBookmarksFolders200Ok>> GetCorporationsCorporationIdBookmarksFoldersAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdBookmarksFolders200Ok>> localVarResponse = await GetCorporationsCorporationIdBookmarksFoldersAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List corporation bookmark folders A list of your corporation&#39;s bookmark folders  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdBookmarksFolders200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdBookmarksFolders200Ok>>> GetCorporationsCorporationIdBookmarksFoldersAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling BookmarksApi->GetCorporationsCorporationIdBookmarksFolders");

            var localVarPath = "./v1/corporations/{corporation_id}/bookmarks/folders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdBookmarksFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdBookmarksFolders200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCorporationsCorporationIdBookmarksFolders200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdBookmarksFolders200Ok>)));
        }

    }
}
