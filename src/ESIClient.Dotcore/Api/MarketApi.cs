/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ESIClient.Dotcore.Client;
using ESIClient.Dotcore.Model;

namespace ESIClient.Dotcore.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List open orders from a character
        /// </summary>
        /// <remarks>
        /// List open market orders placed by a character  - --  This route is cached for up to 1200 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetCharactersCharacterIdOrders (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// List open orders from a character
        /// </summary>
        /// <remarks>
        /// List open market orders placed by a character  - --  This route is cached for up to 1200 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetCharactersCharacterIdOrdersWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// List historical orders by a character
        /// </summary>
        /// <remarks>
        /// List cancelled and expired market orders placed by a character up to 90 days in the past.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetCharactersCharacterIdOrdersHistory (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List historical orders by a character
        /// </summary>
        /// <remarks>
        /// List cancelled and expired market orders placed by a character up to 90 days in the past.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetCharactersCharacterIdOrdersHistoryWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// List open orders from a corporation
        /// </summary>
        /// <remarks>
        /// List open market orders placed on behalf of a corporation  - --  This route is cached for up to 1200 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetCorporationsCorporationIdOrders (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List open orders from a corporation
        /// </summary>
        /// <remarks>
        /// List open market orders placed on behalf of a corporation  - --  This route is cached for up to 1200 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetCorporationsCorporationIdOrdersWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// List historical orders from a corporation
        /// </summary>
        /// <remarks>
        /// List cancelled and expired market orders placed on behalf of a corporation up to 90 days in the past.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetCorporationsCorporationIdOrdersHistory (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List historical orders from a corporation
        /// </summary>
        /// <remarks>
        /// List cancelled and expired market orders placed on behalf of a corporation up to 90 days in the past.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetCorporationsCorporationIdOrdersHistoryWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get item groups
        /// </summary>
        /// <remarks>
        /// Get a list of item groups  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetMarketsGroups (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get item groups
        /// </summary>
        /// <remarks>
        /// Get a list of item groups  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetMarketsGroupsWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get item group information
        /// </summary>
        /// <remarks>
        /// Get information on an item group  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketGroupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>GetMarketsGroupsMarketGroupIdOk</returns>
        GetMarketsGroupsMarketGroupIdOk GetMarketsGroupsMarketGroupId (int? marketGroupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get item group information
        /// </summary>
        /// <remarks>
        /// Get information on an item group  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketGroupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of GetMarketsGroupsMarketGroupIdOk</returns>
        ApiResponse<GetMarketsGroupsMarketGroupIdOk> GetMarketsGroupsMarketGroupIdWithHttpInfo (int? marketGroupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// List market prices
        /// </summary>
        /// <remarks>
        /// Return a list of prices  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetMarketsPrices (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// List market prices
        /// </summary>
        /// <remarks>
        /// Return a list of prices  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetMarketsPricesWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// List historical market statistics in a region
        /// </summary>
        /// <remarks>
        /// Return a list of historical market statistics for the specified type in a region  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="typeId">Return statistics for this type</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetMarketsRegionIdHistory (int? regionId, int? typeId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// List historical market statistics in a region
        /// </summary>
        /// <remarks>
        /// Return a list of historical market statistics for the specified type in a region  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="typeId">Return statistics for this type</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetMarketsRegionIdHistoryWithHttpInfo (int? regionId, int? typeId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// List orders in a region
        /// </summary>
        /// <remarks>
        /// Return a list of orders in a region  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderType">Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders</param>
        /// <param name="regionId">Return orders in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="typeId">Return orders only for this type (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetMarketsRegionIdOrders (string orderType, int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null, int? typeId = null);

        /// <summary>
        /// List orders in a region
        /// </summary>
        /// <remarks>
        /// Return a list of orders in a region  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderType">Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders</param>
        /// <param name="regionId">Return orders in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="typeId">Return orders only for this type (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetMarketsRegionIdOrdersWithHttpInfo (string orderType, int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null, int? typeId = null);
        /// <summary>
        /// List type IDs relevant to a market
        /// </summary>
        /// <remarks>
        /// Return a list of type IDs that have active orders in the region, for efficient market indexing.  - --  This route is cached for up to 600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetMarketsRegionIdTypes (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null);

        /// <summary>
        /// List type IDs relevant to a market
        /// </summary>
        /// <remarks>
        /// Return a list of type IDs that have active orders in the region, for efficient market indexing.  - --  This route is cached for up to 600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetMarketsRegionIdTypesWithHttpInfo (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null);
        /// <summary>
        /// List orders in a structure
        /// </summary>
        /// <remarks>
        /// Return all orders in a structure  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">Return orders in this structure</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetMarketsStructuresStructureId (long? structureId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List orders in a structure
        /// </summary>
        /// <remarks>
        /// Return all orders in a structure  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">Return orders in this structure</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetMarketsStructuresStructureIdWithHttpInfo (long? structureId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List open orders from a character
        /// </summary>
        /// <remarks>
        /// List open market orders placed by a character  - --  This route is cached for up to 1200 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetCharactersCharacterIdOrdersAsync (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// List open orders from a character
        /// </summary>
        /// <remarks>
        /// List open market orders placed by a character  - --  This route is cached for up to 1200 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCharactersCharacterIdOrdersAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// List historical orders by a character
        /// </summary>
        /// <remarks>
        /// List cancelled and expired market orders placed by a character up to 90 days in the past.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetCharactersCharacterIdOrdersHistoryAsync (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List historical orders by a character
        /// </summary>
        /// <remarks>
        /// List cancelled and expired market orders placed by a character up to 90 days in the past.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCharactersCharacterIdOrdersHistoryAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// List open orders from a corporation
        /// </summary>
        /// <remarks>
        /// List open market orders placed on behalf of a corporation  - --  This route is cached for up to 1200 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetCorporationsCorporationIdOrdersAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List open orders from a corporation
        /// </summary>
        /// <remarks>
        /// List open market orders placed on behalf of a corporation  - --  This route is cached for up to 1200 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCorporationsCorporationIdOrdersAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// List historical orders from a corporation
        /// </summary>
        /// <remarks>
        /// List cancelled and expired market orders placed on behalf of a corporation up to 90 days in the past.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetCorporationsCorporationIdOrdersHistoryAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List historical orders from a corporation
        /// </summary>
        /// <remarks>
        /// List cancelled and expired market orders placed on behalf of a corporation up to 90 days in the past.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCorporationsCorporationIdOrdersHistoryAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get item groups
        /// </summary>
        /// <remarks>
        /// Get a list of item groups  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetMarketsGroupsAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get item groups
        /// </summary>
        /// <remarks>
        /// Get a list of item groups  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetMarketsGroupsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get item group information
        /// </summary>
        /// <remarks>
        /// Get information on an item group  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketGroupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of GetMarketsGroupsMarketGroupIdOk</returns>
        System.Threading.Tasks.Task<GetMarketsGroupsMarketGroupIdOk> GetMarketsGroupsMarketGroupIdAsync (int? marketGroupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get item group information
        /// </summary>
        /// <remarks>
        /// Get information on an item group  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketGroupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (GetMarketsGroupsMarketGroupIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMarketsGroupsMarketGroupIdOk>> GetMarketsGroupsMarketGroupIdAsyncWithHttpInfo (int? marketGroupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// List market prices
        /// </summary>
        /// <remarks>
        /// Return a list of prices  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetMarketsPricesAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// List market prices
        /// </summary>
        /// <remarks>
        /// Return a list of prices  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetMarketsPricesAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// List historical market statistics in a region
        /// </summary>
        /// <remarks>
        /// Return a list of historical market statistics for the specified type in a region  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="typeId">Return statistics for this type</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetMarketsRegionIdHistoryAsync (int? regionId, int? typeId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// List historical market statistics in a region
        /// </summary>
        /// <remarks>
        /// Return a list of historical market statistics for the specified type in a region  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="typeId">Return statistics for this type</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetMarketsRegionIdHistoryAsyncWithHttpInfo (int? regionId, int? typeId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// List orders in a region
        /// </summary>
        /// <remarks>
        /// Return a list of orders in a region  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderType">Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders</param>
        /// <param name="regionId">Return orders in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="typeId">Return orders only for this type (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetMarketsRegionIdOrdersAsync (string orderType, int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null, int? typeId = null);

        /// <summary>
        /// List orders in a region
        /// </summary>
        /// <remarks>
        /// Return a list of orders in a region  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderType">Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders</param>
        /// <param name="regionId">Return orders in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="typeId">Return orders only for this type (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetMarketsRegionIdOrdersAsyncWithHttpInfo (string orderType, int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null, int? typeId = null);
        /// <summary>
        /// List type IDs relevant to a market
        /// </summary>
        /// <remarks>
        /// Return a list of type IDs that have active orders in the region, for efficient market indexing.  - --  This route is cached for up to 600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetMarketsRegionIdTypesAsync (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null);

        /// <summary>
        /// List type IDs relevant to a market
        /// </summary>
        /// <remarks>
        /// Return a list of type IDs that have active orders in the region, for efficient market indexing.  - --  This route is cached for up to 600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetMarketsRegionIdTypesAsyncWithHttpInfo (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null);
        /// <summary>
        /// List orders in a structure
        /// </summary>
        /// <remarks>
        /// Return all orders in a structure  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">Return orders in this structure</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetMarketsStructuresStructureIdAsync (long? structureId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// List orders in a structure
        /// </summary>
        /// <remarks>
        /// Return all orders in a structure  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">Return orders in this structure</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetMarketsStructuresStructureIdAsyncWithHttpInfo (long? structureId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarketApi : IMarketApi
    {
        private ESIClient.Dotcore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketApi(String basePath)
        {
            this.Configuration = new ESIClient.Dotcore.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarketApi(ESIClient.Dotcore.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ESIClient.Dotcore.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ESIClient.Dotcore.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESIClient.Dotcore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List open orders from a character List open market orders placed by a character  - --  This route is cached for up to 1200 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetCharactersCharacterIdOrders (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<Object>> localVarResponse = GetCharactersCharacterIdOrdersWithHttpInfo(characterId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List open orders from a character List open market orders placed by a character  - --  This route is cached for up to 1200 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetCharactersCharacterIdOrdersWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MarketApi->GetCharactersCharacterIdOrders");

            var localVarPath = "./v2/characters/{character_id}/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List open orders from a character List open market orders placed by a character  - --  This route is cached for up to 1200 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetCharactersCharacterIdOrdersAsync (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<Object>> localVarResponse = await GetCharactersCharacterIdOrdersAsyncWithHttpInfo(characterId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List open orders from a character List open market orders placed by a character  - --  This route is cached for up to 1200 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCharactersCharacterIdOrdersAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MarketApi->GetCharactersCharacterIdOrders");

            var localVarPath = "./v2/characters/{character_id}/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List historical orders by a character List cancelled and expired market orders placed by a character up to 90 days in the past.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetCharactersCharacterIdOrdersHistory (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<Object>> localVarResponse = GetCharactersCharacterIdOrdersHistoryWithHttpInfo(characterId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List historical orders by a character List cancelled and expired market orders placed by a character up to 90 days in the past.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetCharactersCharacterIdOrdersHistoryWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MarketApi->GetCharactersCharacterIdOrdersHistory");

            var localVarPath = "./v1/characters/{character_id}/orders/history/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdOrdersHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List historical orders by a character List cancelled and expired market orders placed by a character up to 90 days in the past.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetCharactersCharacterIdOrdersHistoryAsync (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<Object>> localVarResponse = await GetCharactersCharacterIdOrdersHistoryAsyncWithHttpInfo(characterId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List historical orders by a character List cancelled and expired market orders placed by a character up to 90 days in the past.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCharactersCharacterIdOrdersHistoryAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling MarketApi->GetCharactersCharacterIdOrdersHistory");

            var localVarPath = "./v1/characters/{character_id}/orders/history/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdOrdersHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List open orders from a corporation List open market orders placed on behalf of a corporation  - --  This route is cached for up to 1200 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetCorporationsCorporationIdOrders (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<Object>> localVarResponse = GetCorporationsCorporationIdOrdersWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List open orders from a corporation List open market orders placed on behalf of a corporation  - --  This route is cached for up to 1200 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetCorporationsCorporationIdOrdersWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling MarketApi->GetCorporationsCorporationIdOrders");

            var localVarPath = "./v3/corporations/{corporation_id}/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List open orders from a corporation List open market orders placed on behalf of a corporation  - --  This route is cached for up to 1200 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetCorporationsCorporationIdOrdersAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<Object>> localVarResponse = await GetCorporationsCorporationIdOrdersAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List open orders from a corporation List open market orders placed on behalf of a corporation  - --  This route is cached for up to 1200 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCorporationsCorporationIdOrdersAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling MarketApi->GetCorporationsCorporationIdOrders");

            var localVarPath = "./v3/corporations/{corporation_id}/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List historical orders from a corporation List cancelled and expired market orders placed on behalf of a corporation up to 90 days in the past.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetCorporationsCorporationIdOrdersHistory (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<Object>> localVarResponse = GetCorporationsCorporationIdOrdersHistoryWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List historical orders from a corporation List cancelled and expired market orders placed on behalf of a corporation up to 90 days in the past.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetCorporationsCorporationIdOrdersHistoryWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling MarketApi->GetCorporationsCorporationIdOrdersHistory");

            var localVarPath = "./v2/corporations/{corporation_id}/orders/history/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdOrdersHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List historical orders from a corporation List cancelled and expired market orders placed on behalf of a corporation up to 90 days in the past.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetCorporationsCorporationIdOrdersHistoryAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<Object>> localVarResponse = await GetCorporationsCorporationIdOrdersHistoryAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List historical orders from a corporation List cancelled and expired market orders placed on behalf of a corporation up to 90 days in the past.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Trader
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCorporationsCorporationIdOrdersHistoryAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling MarketApi->GetCorporationsCorporationIdOrdersHistory");

            var localVarPath = "./v2/corporations/{corporation_id}/orders/history/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdOrdersHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Get item groups Get a list of item groups  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetMarketsGroups (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetMarketsGroupsWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get item groups Get a list of item groups  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetMarketsGroupsWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/markets/groups/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketsGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get item groups Get a list of item groups  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetMarketsGroupsAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetMarketsGroupsAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get item groups Get a list of item groups  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetMarketsGroupsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/markets/groups/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketsGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get item group information Get information on an item group  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketGroupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>GetMarketsGroupsMarketGroupIdOk</returns>
        public GetMarketsGroupsMarketGroupIdOk GetMarketsGroupsMarketGroupId (int? marketGroupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<GetMarketsGroupsMarketGroupIdOk> localVarResponse = GetMarketsGroupsMarketGroupIdWithHttpInfo(marketGroupId, acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get item group information Get information on an item group  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketGroupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of GetMarketsGroupsMarketGroupIdOk</returns>
        public ApiResponse< GetMarketsGroupsMarketGroupIdOk > GetMarketsGroupsMarketGroupIdWithHttpInfo (int? marketGroupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
            // verify the required parameter 'marketGroupId' is set
            if (marketGroupId == null)
                throw new ApiException(400, "Missing required parameter 'marketGroupId' when calling MarketApi->GetMarketsGroupsMarketGroupId");

            var localVarPath = "./v1/markets/groups/{market_group_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketGroupId != null) localVarPathParams.Add("market_group_id", this.Configuration.ApiClient.ParameterToString(marketGroupId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketsGroupsMarketGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMarketsGroupsMarketGroupIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetMarketsGroupsMarketGroupIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMarketsGroupsMarketGroupIdOk)));
        }

        /// <summary>
        /// Get item group information Get information on an item group  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketGroupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of GetMarketsGroupsMarketGroupIdOk</returns>
        public async System.Threading.Tasks.Task<GetMarketsGroupsMarketGroupIdOk> GetMarketsGroupsMarketGroupIdAsync (int? marketGroupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<GetMarketsGroupsMarketGroupIdOk> localVarResponse = await GetMarketsGroupsMarketGroupIdAsyncWithHttpInfo(marketGroupId, acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get item group information Get information on an item group  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketGroupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (GetMarketsGroupsMarketGroupIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMarketsGroupsMarketGroupIdOk>> GetMarketsGroupsMarketGroupIdAsyncWithHttpInfo (int? marketGroupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
            // verify the required parameter 'marketGroupId' is set
            if (marketGroupId == null)
                throw new ApiException(400, "Missing required parameter 'marketGroupId' when calling MarketApi->GetMarketsGroupsMarketGroupId");

            var localVarPath = "./v1/markets/groups/{market_group_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketGroupId != null) localVarPathParams.Add("market_group_id", this.Configuration.ApiClient.ParameterToString(marketGroupId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketsGroupsMarketGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMarketsGroupsMarketGroupIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetMarketsGroupsMarketGroupIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMarketsGroupsMarketGroupIdOk)));
        }

        /// <summary>
        /// List market prices Return a list of prices  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetMarketsPrices (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<Object>> localVarResponse = GetMarketsPricesWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List market prices Return a list of prices  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetMarketsPricesWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/markets/prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketsPrices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List market prices Return a list of prices  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetMarketsPricesAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<Object>> localVarResponse = await GetMarketsPricesAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List market prices Return a list of prices  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetMarketsPricesAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/markets/prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketsPrices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List historical market statistics in a region Return a list of historical market statistics for the specified type in a region  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="typeId">Return statistics for this type</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetMarketsRegionIdHistory (int? regionId, int? typeId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<Object>> localVarResponse = GetMarketsRegionIdHistoryWithHttpInfo(regionId, typeId, datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List historical market statistics in a region Return a list of historical market statistics for the specified type in a region  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="typeId">Return statistics for this type</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetMarketsRegionIdHistoryWithHttpInfo (int? regionId, int? typeId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'regionId' is set
            if (regionId == null)
                throw new ApiException(400, "Missing required parameter 'regionId' when calling MarketApi->GetMarketsRegionIdHistory");
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling MarketApi->GetMarketsRegionIdHistory");

            var localVarPath = "./v1/markets/{region_id}/history/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regionId != null) localVarPathParams.Add("region_id", this.Configuration.ApiClient.ParameterToString(regionId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_id", typeId)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketsRegionIdHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List historical market statistics in a region Return a list of historical market statistics for the specified type in a region  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="typeId">Return statistics for this type</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetMarketsRegionIdHistoryAsync (int? regionId, int? typeId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<Object>> localVarResponse = await GetMarketsRegionIdHistoryAsyncWithHttpInfo(regionId, typeId, datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List historical market statistics in a region Return a list of historical market statistics for the specified type in a region  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="typeId">Return statistics for this type</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetMarketsRegionIdHistoryAsyncWithHttpInfo (int? regionId, int? typeId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'regionId' is set
            if (regionId == null)
                throw new ApiException(400, "Missing required parameter 'regionId' when calling MarketApi->GetMarketsRegionIdHistory");
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling MarketApi->GetMarketsRegionIdHistory");

            var localVarPath = "./v1/markets/{region_id}/history/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regionId != null) localVarPathParams.Add("region_id", this.Configuration.ApiClient.ParameterToString(regionId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_id", typeId)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketsRegionIdHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List orders in a region Return a list of orders in a region  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderType">Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders</param>
        /// <param name="regionId">Return orders in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="typeId">Return orders only for this type (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetMarketsRegionIdOrders (string orderType, int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null, int? typeId = null)
        {
             ApiResponse<List<Object>> localVarResponse = GetMarketsRegionIdOrdersWithHttpInfo(orderType, regionId, datasource, ifNoneMatch, page, typeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List orders in a region Return a list of orders in a region  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderType">Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders</param>
        /// <param name="regionId">Return orders in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="typeId">Return orders only for this type (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetMarketsRegionIdOrdersWithHttpInfo (string orderType, int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null, int? typeId = null)
        {
            // verify the required parameter 'orderType' is set
            if (orderType == null)
                throw new ApiException(400, "Missing required parameter 'orderType' when calling MarketApi->GetMarketsRegionIdOrders");
            // verify the required parameter 'regionId' is set
            if (regionId == null)
                throw new ApiException(400, "Missing required parameter 'regionId' when calling MarketApi->GetMarketsRegionIdOrders");

            var localVarPath = "./v1/markets/{region_id}/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regionId != null) localVarPathParams.Add("region_id", this.Configuration.ApiClient.ParameterToString(regionId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (orderType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_type", orderType)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_id", typeId)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketsRegionIdOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List orders in a region Return a list of orders in a region  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderType">Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders</param>
        /// <param name="regionId">Return orders in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="typeId">Return orders only for this type (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetMarketsRegionIdOrdersAsync (string orderType, int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null, int? typeId = null)
        {
             ApiResponse<List<Object>> localVarResponse = await GetMarketsRegionIdOrdersAsyncWithHttpInfo(orderType, regionId, datasource, ifNoneMatch, page, typeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List orders in a region Return a list of orders in a region  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderType">Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders</param>
        /// <param name="regionId">Return orders in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="typeId">Return orders only for this type (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetMarketsRegionIdOrdersAsyncWithHttpInfo (string orderType, int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null, int? typeId = null)
        {
            // verify the required parameter 'orderType' is set
            if (orderType == null)
                throw new ApiException(400, "Missing required parameter 'orderType' when calling MarketApi->GetMarketsRegionIdOrders");
            // verify the required parameter 'regionId' is set
            if (regionId == null)
                throw new ApiException(400, "Missing required parameter 'regionId' when calling MarketApi->GetMarketsRegionIdOrders");

            var localVarPath = "./v1/markets/{region_id}/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regionId != null) localVarPathParams.Add("region_id", this.Configuration.ApiClient.ParameterToString(regionId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (orderType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_type", orderType)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_id", typeId)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketsRegionIdOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List type IDs relevant to a market Return a list of type IDs that have active orders in the region, for efficient market indexing.  - --  This route is cached for up to 600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetMarketsRegionIdTypes (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetMarketsRegionIdTypesWithHttpInfo(regionId, datasource, ifNoneMatch, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List type IDs relevant to a market Return a list of type IDs that have active orders in the region, for efficient market indexing.  - --  This route is cached for up to 600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetMarketsRegionIdTypesWithHttpInfo (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
            // verify the required parameter 'regionId' is set
            if (regionId == null)
                throw new ApiException(400, "Missing required parameter 'regionId' when calling MarketApi->GetMarketsRegionIdTypes");

            var localVarPath = "./v1/markets/{region_id}/types/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regionId != null) localVarPathParams.Add("region_id", this.Configuration.ApiClient.ParameterToString(regionId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketsRegionIdTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// List type IDs relevant to a market Return a list of type IDs that have active orders in the region, for efficient market indexing.  - --  This route is cached for up to 600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetMarketsRegionIdTypesAsync (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetMarketsRegionIdTypesAsyncWithHttpInfo(regionId, datasource, ifNoneMatch, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List type IDs relevant to a market Return a list of type IDs that have active orders in the region, for efficient market indexing.  - --  This route is cached for up to 600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">Return statistics in this region</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetMarketsRegionIdTypesAsyncWithHttpInfo (int? regionId, string datasource = null, string ifNoneMatch = null, int? page = null)
        {
            // verify the required parameter 'regionId' is set
            if (regionId == null)
                throw new ApiException(400, "Missing required parameter 'regionId' when calling MarketApi->GetMarketsRegionIdTypes");

            var localVarPath = "./v1/markets/{region_id}/types/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regionId != null) localVarPathParams.Add("region_id", this.Configuration.ApiClient.ParameterToString(regionId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketsRegionIdTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// List orders in a structure Return all orders in a structure  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">Return orders in this structure</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetMarketsStructuresStructureId (long? structureId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<Object>> localVarResponse = GetMarketsStructuresStructureIdWithHttpInfo(structureId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List orders in a structure Return all orders in a structure  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">Return orders in this structure</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetMarketsStructuresStructureIdWithHttpInfo (long? structureId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'structureId' is set
            if (structureId == null)
                throw new ApiException(400, "Missing required parameter 'structureId' when calling MarketApi->GetMarketsStructuresStructureId");

            var localVarPath = "./v1/markets/structures/{structure_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (structureId != null) localVarPathParams.Add("structure_id", this.Configuration.ApiClient.ParameterToString(structureId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketsStructuresStructureId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List orders in a structure Return all orders in a structure  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">Return orders in this structure</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetMarketsStructuresStructureIdAsync (long? structureId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<Object>> localVarResponse = await GetMarketsStructuresStructureIdAsyncWithHttpInfo(structureId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List orders in a structure Return all orders in a structure  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">Return orders in this structure</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetMarketsStructuresStructureIdAsyncWithHttpInfo (long? structureId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'structureId' is set
            if (structureId == null)
                throw new ApiException(400, "Missing required parameter 'structureId' when calling MarketApi->GetMarketsStructuresStructureId");

            var localVarPath = "./v1/markets/structures/{structure_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (structureId != null) localVarPathParams.Add("structure_id", this.Configuration.ApiClient.ParameterToString(structureId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketsStructuresStructureId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

    }
}
