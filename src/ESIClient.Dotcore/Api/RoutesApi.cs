/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ESIClient.Dotcore.Client;
using ESIClient.Dotcore.Model;

namespace ESIClient.Dotcore.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoutesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get route
        /// </summary>
        /// <remarks>
        /// Get the systems between origin and destination  - --  This route is cached for up to 86400 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destination">destination solar system ID</param>
        /// <param name="origin">origin solar system ID</param>
        /// <param name="avoid">avoid solar system ID(s) (optional)</param>
        /// <param name="connections">connected solar system pairs (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="flag">route security preference (optional, default to shortest)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetRouteOriginDestination (int? destination, int? origin, List<int?> avoid = null, List<List<int?>> connections = null, string datasource = null, string flag = null, string ifNoneMatch = null);

        /// <summary>
        /// Get route
        /// </summary>
        /// <remarks>
        /// Get the systems between origin and destination  - --  This route is cached for up to 86400 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destination">destination solar system ID</param>
        /// <param name="origin">origin solar system ID</param>
        /// <param name="avoid">avoid solar system ID(s) (optional)</param>
        /// <param name="connections">connected solar system pairs (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="flag">route security preference (optional, default to shortest)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetRouteOriginDestinationWithHttpInfo (int? destination, int? origin, List<int?> avoid = null, List<List<int?>> connections = null, string datasource = null, string flag = null, string ifNoneMatch = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get route
        /// </summary>
        /// <remarks>
        /// Get the systems between origin and destination  - --  This route is cached for up to 86400 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destination">destination solar system ID</param>
        /// <param name="origin">origin solar system ID</param>
        /// <param name="avoid">avoid solar system ID(s) (optional)</param>
        /// <param name="connections">connected solar system pairs (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="flag">route security preference (optional, default to shortest)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetRouteOriginDestinationAsync (int? destination, int? origin, List<int?> avoid = null, List<List<int?>> connections = null, string datasource = null, string flag = null, string ifNoneMatch = null);

        /// <summary>
        /// Get route
        /// </summary>
        /// <remarks>
        /// Get the systems between origin and destination  - --  This route is cached for up to 86400 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destination">destination solar system ID</param>
        /// <param name="origin">origin solar system ID</param>
        /// <param name="avoid">avoid solar system ID(s) (optional)</param>
        /// <param name="connections">connected solar system pairs (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="flag">route security preference (optional, default to shortest)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetRouteOriginDestinationAsyncWithHttpInfo (int? destination, int? origin, List<int?> avoid = null, List<List<int?>> connections = null, string datasource = null, string flag = null, string ifNoneMatch = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RoutesApi : IRoutesApi
    {
        private ESIClient.Dotcore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RoutesApi(String basePath)
        {
            this.Configuration = new ESIClient.Dotcore.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RoutesApi(ESIClient.Dotcore.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ESIClient.Dotcore.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ESIClient.Dotcore.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESIClient.Dotcore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get route Get the systems between origin and destination  - --  This route is cached for up to 86400 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destination">destination solar system ID</param>
        /// <param name="origin">origin solar system ID</param>
        /// <param name="avoid">avoid solar system ID(s) (optional)</param>
        /// <param name="connections">connected solar system pairs (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="flag">route security preference (optional, default to shortest)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetRouteOriginDestination (int? destination, int? origin, List<int?> avoid = null, List<List<int?>> connections = null, string datasource = null, string flag = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetRouteOriginDestinationWithHttpInfo(destination, origin, avoid, connections, datasource, flag, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get route Get the systems between origin and destination  - --  This route is cached for up to 86400 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destination">destination solar system ID</param>
        /// <param name="origin">origin solar system ID</param>
        /// <param name="avoid">avoid solar system ID(s) (optional)</param>
        /// <param name="connections">connected solar system pairs (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="flag">route security preference (optional, default to shortest)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetRouteOriginDestinationWithHttpInfo (int? destination, int? origin, List<int?> avoid = null, List<List<int?>> connections = null, string datasource = null, string flag = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling RoutesApi->GetRouteOriginDestination");
            // verify the required parameter 'origin' is set
            if (origin == null)
                throw new ApiException(400, "Missing required parameter 'origin' when calling RoutesApi->GetRouteOriginDestination");

            var localVarPath = "./v1/route/{origin}/{destination}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destination != null) localVarPathParams.Add("destination", this.Configuration.ApiClient.ParameterToString(destination)); // path parameter
            if (origin != null) localVarPathParams.Add("origin", this.Configuration.ApiClient.ParameterToString(origin)); // path parameter
            if (avoid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "avoid", avoid)); // query parameter
            if (connections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "connections", connections)); // query parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (flag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flag", flag)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRouteOriginDestination", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get route Get the systems between origin and destination  - --  This route is cached for up to 86400 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destination">destination solar system ID</param>
        /// <param name="origin">origin solar system ID</param>
        /// <param name="avoid">avoid solar system ID(s) (optional)</param>
        /// <param name="connections">connected solar system pairs (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="flag">route security preference (optional, default to shortest)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetRouteOriginDestinationAsync (int? destination, int? origin, List<int?> avoid = null, List<List<int?>> connections = null, string datasource = null, string flag = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetRouteOriginDestinationAsyncWithHttpInfo(destination, origin, avoid, connections, datasource, flag, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get route Get the systems between origin and destination  - --  This route is cached for up to 86400 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destination">destination solar system ID</param>
        /// <param name="origin">origin solar system ID</param>
        /// <param name="avoid">avoid solar system ID(s) (optional)</param>
        /// <param name="connections">connected solar system pairs (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="flag">route security preference (optional, default to shortest)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetRouteOriginDestinationAsyncWithHttpInfo (int? destination, int? origin, List<int?> avoid = null, List<List<int?>> connections = null, string datasource = null, string flag = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling RoutesApi->GetRouteOriginDestination");
            // verify the required parameter 'origin' is set
            if (origin == null)
                throw new ApiException(400, "Missing required parameter 'origin' when calling RoutesApi->GetRouteOriginDestination");

            var localVarPath = "./v1/route/{origin}/{destination}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destination != null) localVarPathParams.Add("destination", this.Configuration.ApiClient.ParameterToString(destination)); // path parameter
            if (origin != null) localVarPathParams.Add("origin", this.Configuration.ApiClient.ParameterToString(origin)); // path parameter
            if (avoid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "avoid", avoid)); // query parameter
            if (connections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "connections", connections)); // query parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (flag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flag", flag)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRouteOriginDestination", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

    }
}
