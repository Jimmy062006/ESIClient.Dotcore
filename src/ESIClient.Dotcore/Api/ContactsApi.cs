/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ESIClient.Dotcore.Client;
using ESIClient.Dotcore.Model;

namespace ESIClient.Dotcore.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete contacts
        /// </summary>
        /// <remarks>
        /// Bulk delete contacts  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        void DeleteCharactersCharacterIdContacts (int? characterId, List<int?> contactIds, string datasource = null, string token = null);

        /// <summary>
        /// Delete contacts
        /// </summary>
        /// <remarks>
        /// Bulk delete contacts  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCharactersCharacterIdContactsWithHttpInfo (int? characterId, List<int?> contactIds, string datasource = null, string token = null);
        /// <summary>
        /// Get alliance contacts
        /// </summary>
        /// <remarks>
        /// Return contacts of an alliance  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/alliances/{alliance_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetAlliancesAllianceIdContacts200Ok&gt;</returns>
        List<GetAlliancesAllianceIdContacts200Ok> GetAlliancesAllianceIdContacts (int? allianceId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get alliance contacts
        /// </summary>
        /// <remarks>
        /// Return contacts of an alliance  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/alliances/{alliance_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetAlliancesAllianceIdContacts200Ok&gt;</returns>
        ApiResponse<List<GetAlliancesAllianceIdContacts200Ok>> GetAlliancesAllianceIdContactsWithHttpInfo (int? allianceId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get alliance contact labels
        /// </summary>
        /// <remarks>
        /// Return custom labels for an alliance&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetAlliancesAllianceIdContactsLabels200Ok&gt;</returns>
        List<GetAlliancesAllianceIdContactsLabels200Ok> GetAlliancesAllianceIdContactsLabels (int? allianceId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get alliance contact labels
        /// </summary>
        /// <remarks>
        /// Return custom labels for an alliance&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetAlliancesAllianceIdContactsLabels200Ok&gt;</returns>
        ApiResponse<List<GetAlliancesAllianceIdContactsLabels200Ok>> GetAlliancesAllianceIdContactsLabelsWithHttpInfo (int? allianceId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get contacts
        /// </summary>
        /// <remarks>
        /// Return contacts of a character  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdContacts200Ok&gt;</returns>
        List<GetCharactersCharacterIdContacts200Ok> GetCharactersCharacterIdContacts (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get contacts
        /// </summary>
        /// <remarks>
        /// Return contacts of a character  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdContacts200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdContacts200Ok>> GetCharactersCharacterIdContactsWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get contact labels
        /// </summary>
        /// <remarks>
        /// Return custom labels for a character&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdContactsLabels200Ok&gt;</returns>
        List<GetCharactersCharacterIdContactsLabels200Ok> GetCharactersCharacterIdContactsLabels (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get contact labels
        /// </summary>
        /// <remarks>
        /// Return custom labels for a character&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdContactsLabels200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdContactsLabels200Ok>> GetCharactersCharacterIdContactsLabelsWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation contacts
        /// </summary>
        /// <remarks>
        /// Return contacts of a corporation  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/corporations/{corporation_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdContacts200Ok&gt;</returns>
        List<GetCorporationsCorporationIdContacts200Ok> GetCorporationsCorporationIdContacts (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation contacts
        /// </summary>
        /// <remarks>
        /// Return contacts of a corporation  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/corporations/{corporation_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdContacts200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdContacts200Ok>> GetCorporationsCorporationIdContactsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation contact labels
        /// </summary>
        /// <remarks>
        /// Return custom labels for a corporation&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdContactsLabels200Ok&gt;</returns>
        List<GetCorporationsCorporationIdContactsLabels200Ok> GetCorporationsCorporationIdContactsLabels (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation contact labels
        /// </summary>
        /// <remarks>
        /// Return custom labels for a corporation&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdContactsLabels200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdContactsLabels200Ok>> GetCorporationsCorporationIdContactsLabelsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Add contacts
        /// </summary>
        /// <remarks>
        /// Bulk add contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#POST-/characters/{character_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the new contact (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> PostCharactersCharacterIdContacts (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null);

        /// <summary>
        /// Add contacts
        /// </summary>
        /// <remarks>
        /// Bulk add contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#POST-/characters/{character_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the new contact (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> PostCharactersCharacterIdContactsWithHttpInfo (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null);
        /// <summary>
        /// Edit contacts
        /// </summary>
        /// <remarks>
        /// Bulk edit contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#PUT-/characters/{character_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the contact, use 0 for clearing label (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns></returns>
        void PutCharactersCharacterIdContacts (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null);

        /// <summary>
        /// Edit contacts
        /// </summary>
        /// <remarks>
        /// Bulk edit contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#PUT-/characters/{character_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the contact, use 0 for clearing label (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutCharactersCharacterIdContactsWithHttpInfo (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete contacts
        /// </summary>
        /// <remarks>
        /// Bulk delete contacts  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCharactersCharacterIdContactsAsync (int? characterId, List<int?> contactIds, string datasource = null, string token = null);

        /// <summary>
        /// Delete contacts
        /// </summary>
        /// <remarks>
        /// Bulk delete contacts  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCharactersCharacterIdContactsAsyncWithHttpInfo (int? characterId, List<int?> contactIds, string datasource = null, string token = null);
        /// <summary>
        /// Get alliance contacts
        /// </summary>
        /// <remarks>
        /// Return contacts of an alliance  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/alliances/{alliance_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetAlliancesAllianceIdContacts200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetAlliancesAllianceIdContacts200Ok>> GetAlliancesAllianceIdContactsAsync (int? allianceId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get alliance contacts
        /// </summary>
        /// <remarks>
        /// Return contacts of an alliance  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/alliances/{alliance_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetAlliancesAllianceIdContacts200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetAlliancesAllianceIdContacts200Ok>>> GetAlliancesAllianceIdContactsAsyncWithHttpInfo (int? allianceId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get alliance contact labels
        /// </summary>
        /// <remarks>
        /// Return custom labels for an alliance&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetAlliancesAllianceIdContactsLabels200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetAlliancesAllianceIdContactsLabels200Ok>> GetAlliancesAllianceIdContactsLabelsAsync (int? allianceId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get alliance contact labels
        /// </summary>
        /// <remarks>
        /// Return custom labels for an alliance&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetAlliancesAllianceIdContactsLabels200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetAlliancesAllianceIdContactsLabels200Ok>>> GetAlliancesAllianceIdContactsLabelsAsyncWithHttpInfo (int? allianceId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get contacts
        /// </summary>
        /// <remarks>
        /// Return contacts of a character  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdContacts200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdContacts200Ok>> GetCharactersCharacterIdContactsAsync (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get contacts
        /// </summary>
        /// <remarks>
        /// Return contacts of a character  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdContacts200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdContacts200Ok>>> GetCharactersCharacterIdContactsAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get contact labels
        /// </summary>
        /// <remarks>
        /// Return custom labels for a character&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdContactsLabels200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdContactsLabels200Ok>> GetCharactersCharacterIdContactsLabelsAsync (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get contact labels
        /// </summary>
        /// <remarks>
        /// Return custom labels for a character&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdContactsLabels200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdContactsLabels200Ok>>> GetCharactersCharacterIdContactsLabelsAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation contacts
        /// </summary>
        /// <remarks>
        /// Return contacts of a corporation  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/corporations/{corporation_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdContacts200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdContacts200Ok>> GetCorporationsCorporationIdContactsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation contacts
        /// </summary>
        /// <remarks>
        /// Return contacts of a corporation  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/corporations/{corporation_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdContacts200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdContacts200Ok>>> GetCorporationsCorporationIdContactsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation contact labels
        /// </summary>
        /// <remarks>
        /// Return custom labels for a corporation&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdContactsLabels200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdContactsLabels200Ok>> GetCorporationsCorporationIdContactsLabelsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation contact labels
        /// </summary>
        /// <remarks>
        /// Return custom labels for a corporation&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdContactsLabels200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdContactsLabels200Ok>>> GetCorporationsCorporationIdContactsLabelsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Add contacts
        /// </summary>
        /// <remarks>
        /// Bulk add contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#POST-/characters/{character_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the new contact (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> PostCharactersCharacterIdContactsAsync (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null);

        /// <summary>
        /// Add contacts
        /// </summary>
        /// <remarks>
        /// Bulk add contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#POST-/characters/{character_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the new contact (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> PostCharactersCharacterIdContactsAsyncWithHttpInfo (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null);
        /// <summary>
        /// Edit contacts
        /// </summary>
        /// <remarks>
        /// Bulk edit contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#PUT-/characters/{character_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the contact, use 0 for clearing label (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutCharactersCharacterIdContactsAsync (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null);

        /// <summary>
        /// Edit contacts
        /// </summary>
        /// <remarks>
        /// Bulk edit contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#PUT-/characters/{character_id}/contacts/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the contact, use 0 for clearing label (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutCharactersCharacterIdContactsAsyncWithHttpInfo (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsApi : IContactsApi
    {
        private ESIClient.Dotcore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi(String basePath)
        {
            this.Configuration = new ESIClient.Dotcore.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsApi(ESIClient.Dotcore.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ESIClient.Dotcore.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ESIClient.Dotcore.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESIClient.Dotcore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete contacts Bulk delete contacts  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        public void DeleteCharactersCharacterIdContacts (int? characterId, List<int?> contactIds, string datasource = null, string token = null)
        {
             DeleteCharactersCharacterIdContactsWithHttpInfo(characterId, contactIds, datasource, token);
        }

        /// <summary>
        /// Delete contacts Bulk delete contacts  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCharactersCharacterIdContactsWithHttpInfo (int? characterId, List<int?> contactIds, string datasource = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContactsApi->DeleteCharactersCharacterIdContacts");
            // verify the required parameter 'contactIds' is set
            if (contactIds == null)
                throw new ApiException(400, "Missing required parameter 'contactIds' when calling ContactsApi->DeleteCharactersCharacterIdContacts");

            var localVarPath = "./v2/characters/{character_id}/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (contactIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "contact_ids", contactIds)); // query parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCharactersCharacterIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                null);
        }

        /// <summary>
        /// Delete contacts Bulk delete contacts  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCharactersCharacterIdContactsAsync (int? characterId, List<int?> contactIds, string datasource = null, string token = null)
        {
             await DeleteCharactersCharacterIdContactsAsyncWithHttpInfo(characterId, contactIds, datasource, token);

        }

        /// <summary>
        /// Delete contacts Bulk delete contacts  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCharactersCharacterIdContactsAsyncWithHttpInfo (int? characterId, List<int?> contactIds, string datasource = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContactsApi->DeleteCharactersCharacterIdContacts");
            // verify the required parameter 'contactIds' is set
            if (contactIds == null)
                throw new ApiException(400, "Missing required parameter 'contactIds' when calling ContactsApi->DeleteCharactersCharacterIdContacts");

            var localVarPath = "./v2/characters/{character_id}/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (contactIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "contact_ids", contactIds)); // query parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCharactersCharacterIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                null);
        }

        /// <summary>
        /// Get alliance contacts Return contacts of an alliance  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/alliances/{alliance_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetAlliancesAllianceIdContacts200Ok&gt;</returns>
        public List<GetAlliancesAllianceIdContacts200Ok> GetAlliancesAllianceIdContacts (int? allianceId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetAlliancesAllianceIdContacts200Ok>> localVarResponse = GetAlliancesAllianceIdContactsWithHttpInfo(allianceId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get alliance contacts Return contacts of an alliance  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/alliances/{alliance_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetAlliancesAllianceIdContacts200Ok&gt;</returns>
        public ApiResponse< List<GetAlliancesAllianceIdContacts200Ok> > GetAlliancesAllianceIdContactsWithHttpInfo (int? allianceId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'allianceId' is set
            if (allianceId == null)
                throw new ApiException(400, "Missing required parameter 'allianceId' when calling ContactsApi->GetAlliancesAllianceIdContacts");

            var localVarPath = "./v1/alliances/{alliance_id}/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allianceId != null) localVarPathParams.Add("alliance_id", this.Configuration.ApiClient.ParameterToString(allianceId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlliancesAllianceIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetAlliancesAllianceIdContacts200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetAlliancesAllianceIdContacts200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetAlliancesAllianceIdContacts200Ok>)));
        }

        /// <summary>
        /// Get alliance contacts Return contacts of an alliance  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/alliances/{alliance_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetAlliancesAllianceIdContacts200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetAlliancesAllianceIdContacts200Ok>> GetAlliancesAllianceIdContactsAsync (int? allianceId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetAlliancesAllianceIdContacts200Ok>> localVarResponse = await GetAlliancesAllianceIdContactsAsyncWithHttpInfo(allianceId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get alliance contacts Return contacts of an alliance  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/alliances/{alliance_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetAlliancesAllianceIdContacts200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetAlliancesAllianceIdContacts200Ok>>> GetAlliancesAllianceIdContactsAsyncWithHttpInfo (int? allianceId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'allianceId' is set
            if (allianceId == null)
                throw new ApiException(400, "Missing required parameter 'allianceId' when calling ContactsApi->GetAlliancesAllianceIdContacts");

            var localVarPath = "./v1/alliances/{alliance_id}/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allianceId != null) localVarPathParams.Add("alliance_id", this.Configuration.ApiClient.ParameterToString(allianceId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlliancesAllianceIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetAlliancesAllianceIdContacts200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetAlliancesAllianceIdContacts200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetAlliancesAllianceIdContacts200Ok>)));
        }

        /// <summary>
        /// Get alliance contact labels Return custom labels for an alliance&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetAlliancesAllianceIdContactsLabels200Ok&gt;</returns>
        public List<GetAlliancesAllianceIdContactsLabels200Ok> GetAlliancesAllianceIdContactsLabels (int? allianceId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetAlliancesAllianceIdContactsLabels200Ok>> localVarResponse = GetAlliancesAllianceIdContactsLabelsWithHttpInfo(allianceId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get alliance contact labels Return custom labels for an alliance&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetAlliancesAllianceIdContactsLabels200Ok&gt;</returns>
        public ApiResponse< List<GetAlliancesAllianceIdContactsLabels200Ok> > GetAlliancesAllianceIdContactsLabelsWithHttpInfo (int? allianceId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'allianceId' is set
            if (allianceId == null)
                throw new ApiException(400, "Missing required parameter 'allianceId' when calling ContactsApi->GetAlliancesAllianceIdContactsLabels");

            var localVarPath = "./v1/alliances/{alliance_id}/contacts/labels/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allianceId != null) localVarPathParams.Add("alliance_id", this.Configuration.ApiClient.ParameterToString(allianceId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlliancesAllianceIdContactsLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetAlliancesAllianceIdContactsLabels200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetAlliancesAllianceIdContactsLabels200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetAlliancesAllianceIdContactsLabels200Ok>)));
        }

        /// <summary>
        /// Get alliance contact labels Return custom labels for an alliance&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetAlliancesAllianceIdContactsLabels200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetAlliancesAllianceIdContactsLabels200Ok>> GetAlliancesAllianceIdContactsLabelsAsync (int? allianceId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetAlliancesAllianceIdContactsLabels200Ok>> localVarResponse = await GetAlliancesAllianceIdContactsLabelsAsyncWithHttpInfo(allianceId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get alliance contact labels Return custom labels for an alliance&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allianceId">An EVE alliance ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetAlliancesAllianceIdContactsLabels200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetAlliancesAllianceIdContactsLabels200Ok>>> GetAlliancesAllianceIdContactsLabelsAsyncWithHttpInfo (int? allianceId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'allianceId' is set
            if (allianceId == null)
                throw new ApiException(400, "Missing required parameter 'allianceId' when calling ContactsApi->GetAlliancesAllianceIdContactsLabels");

            var localVarPath = "./v1/alliances/{alliance_id}/contacts/labels/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allianceId != null) localVarPathParams.Add("alliance_id", this.Configuration.ApiClient.ParameterToString(allianceId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlliancesAllianceIdContactsLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetAlliancesAllianceIdContactsLabels200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetAlliancesAllianceIdContactsLabels200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetAlliancesAllianceIdContactsLabels200Ok>)));
        }

        /// <summary>
        /// Get contacts Return contacts of a character  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdContacts200Ok&gt;</returns>
        public List<GetCharactersCharacterIdContacts200Ok> GetCharactersCharacterIdContacts (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdContacts200Ok>> localVarResponse = GetCharactersCharacterIdContactsWithHttpInfo(characterId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contacts Return contacts of a character  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdContacts200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdContacts200Ok> > GetCharactersCharacterIdContactsWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContactsApi->GetCharactersCharacterIdContacts");

            var localVarPath = "./v1/characters/{character_id}/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdContacts200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCharactersCharacterIdContacts200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdContacts200Ok>)));
        }

        /// <summary>
        /// Get contacts Return contacts of a character  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdContacts200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdContacts200Ok>> GetCharactersCharacterIdContactsAsync (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdContacts200Ok>> localVarResponse = await GetCharactersCharacterIdContactsAsyncWithHttpInfo(characterId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contacts Return contacts of a character  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdContacts200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdContacts200Ok>>> GetCharactersCharacterIdContactsAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContactsApi->GetCharactersCharacterIdContacts");

            var localVarPath = "./v1/characters/{character_id}/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdContacts200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCharactersCharacterIdContacts200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdContacts200Ok>)));
        }

        /// <summary>
        /// Get contact labels Return custom labels for a character&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdContactsLabels200Ok&gt;</returns>
        public List<GetCharactersCharacterIdContactsLabels200Ok> GetCharactersCharacterIdContactsLabels (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdContactsLabels200Ok>> localVarResponse = GetCharactersCharacterIdContactsLabelsWithHttpInfo(characterId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contact labels Return custom labels for a character&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdContactsLabels200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdContactsLabels200Ok> > GetCharactersCharacterIdContactsLabelsWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContactsApi->GetCharactersCharacterIdContactsLabels");

            var localVarPath = "./v1/characters/{character_id}/contacts/labels/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdContactsLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdContactsLabels200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCharactersCharacterIdContactsLabels200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdContactsLabels200Ok>)));
        }

        /// <summary>
        /// Get contact labels Return custom labels for a character&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdContactsLabels200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdContactsLabels200Ok>> GetCharactersCharacterIdContactsLabelsAsync (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCharactersCharacterIdContactsLabels200Ok>> localVarResponse = await GetCharactersCharacterIdContactsLabelsAsyncWithHttpInfo(characterId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contact labels Return custom labels for a character&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdContactsLabels200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdContactsLabels200Ok>>> GetCharactersCharacterIdContactsLabelsAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContactsApi->GetCharactersCharacterIdContactsLabels");

            var localVarPath = "./v1/characters/{character_id}/contacts/labels/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdContactsLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdContactsLabels200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCharactersCharacterIdContactsLabels200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdContactsLabels200Ok>)));
        }

        /// <summary>
        /// Get corporation contacts Return contacts of a corporation  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/corporations/{corporation_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdContacts200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdContacts200Ok> GetCorporationsCorporationIdContacts (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdContacts200Ok>> localVarResponse = GetCorporationsCorporationIdContactsWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation contacts Return contacts of a corporation  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/corporations/{corporation_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdContacts200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdContacts200Ok> > GetCorporationsCorporationIdContactsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling ContactsApi->GetCorporationsCorporationIdContacts");

            var localVarPath = "./v1/corporations/{corporation_id}/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdContacts200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCorporationsCorporationIdContacts200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdContacts200Ok>)));
        }

        /// <summary>
        /// Get corporation contacts Return contacts of a corporation  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/corporations/{corporation_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdContacts200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdContacts200Ok>> GetCorporationsCorporationIdContactsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdContacts200Ok>> localVarResponse = await GetCorporationsCorporationIdContactsAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation contacts Return contacts of a corporation  - --  This route is cached for up to 300 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/corporations/{corporation_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdContacts200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdContacts200Ok>>> GetCorporationsCorporationIdContactsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling ContactsApi->GetCorporationsCorporationIdContacts");

            var localVarPath = "./v1/corporations/{corporation_id}/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdContacts200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCorporationsCorporationIdContacts200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdContacts200Ok>)));
        }

        /// <summary>
        /// Get corporation contact labels Return custom labels for a corporation&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdContactsLabels200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdContactsLabels200Ok> GetCorporationsCorporationIdContactsLabels (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdContactsLabels200Ok>> localVarResponse = GetCorporationsCorporationIdContactsLabelsWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation contact labels Return custom labels for a corporation&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdContactsLabels200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdContactsLabels200Ok> > GetCorporationsCorporationIdContactsLabelsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling ContactsApi->GetCorporationsCorporationIdContactsLabels");

            var localVarPath = "./v1/corporations/{corporation_id}/contacts/labels/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdContactsLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdContactsLabels200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCorporationsCorporationIdContactsLabels200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdContactsLabels200Ok>)));
        }

        /// <summary>
        /// Get corporation contact labels Return custom labels for a corporation&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdContactsLabels200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdContactsLabels200Ok>> GetCorporationsCorporationIdContactsLabelsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdContactsLabels200Ok>> localVarResponse = await GetCorporationsCorporationIdContactsLabelsAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation contact labels Return custom labels for a corporation&#39;s contacts  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdContactsLabels200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdContactsLabels200Ok>>> GetCorporationsCorporationIdContactsLabelsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling ContactsApi->GetCorporationsCorporationIdContactsLabels");

            var localVarPath = "./v1/corporations/{corporation_id}/contacts/labels/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdContactsLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdContactsLabels200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetCorporationsCorporationIdContactsLabels200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdContactsLabels200Ok>)));
        }

        /// <summary>
        /// Add contacts Bulk add contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#POST-/characters/{character_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the new contact (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> PostCharactersCharacterIdContacts (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null)
        {
             ApiResponse<List<int?>> localVarResponse = PostCharactersCharacterIdContactsWithHttpInfo(characterId, contactIds, standing, datasource, labelId, token, watched);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add contacts Bulk add contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#POST-/characters/{character_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the new contact (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > PostCharactersCharacterIdContactsWithHttpInfo (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContactsApi->PostCharactersCharacterIdContacts");
            // verify the required parameter 'contactIds' is set
            if (contactIds == null)
                throw new ApiException(400, "Missing required parameter 'contactIds' when calling ContactsApi->PostCharactersCharacterIdContacts");
            // verify the required parameter 'standing' is set
            if (standing == null)
                throw new ApiException(400, "Missing required parameter 'standing' when calling ContactsApi->PostCharactersCharacterIdContacts");

            var localVarPath = "./v1/characters/{character_id}/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (labelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label_id", labelId)); // query parameter
            if (standing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "standing", standing)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (watched != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "watched", watched)); // query parameter
            if (contactIds != null && contactIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactIds; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCharactersCharacterIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Add contacts Bulk add contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#POST-/characters/{character_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the new contact (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> PostCharactersCharacterIdContactsAsync (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null)
        {
             ApiResponse<List<int?>> localVarResponse = await PostCharactersCharacterIdContactsAsyncWithHttpInfo(characterId, contactIds, standing, datasource, labelId, token, watched);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add contacts Bulk add contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#POST-/characters/{character_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the new contact (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> PostCharactersCharacterIdContactsAsyncWithHttpInfo (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContactsApi->PostCharactersCharacterIdContacts");
            // verify the required parameter 'contactIds' is set
            if (contactIds == null)
                throw new ApiException(400, "Missing required parameter 'contactIds' when calling ContactsApi->PostCharactersCharacterIdContacts");
            // verify the required parameter 'standing' is set
            if (standing == null)
                throw new ApiException(400, "Missing required parameter 'standing' when calling ContactsApi->PostCharactersCharacterIdContacts");

            var localVarPath = "./v1/characters/{character_id}/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (labelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label_id", labelId)); // query parameter
            if (standing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "standing", standing)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (watched != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "watched", watched)); // query parameter
            if (contactIds != null && contactIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactIds; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCharactersCharacterIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Edit contacts Bulk edit contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#PUT-/characters/{character_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the contact, use 0 for clearing label (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns></returns>
        public void PutCharactersCharacterIdContacts (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null)
        {
             PutCharactersCharacterIdContactsWithHttpInfo(characterId, contactIds, standing, datasource, labelId, token, watched);
        }

        /// <summary>
        /// Edit contacts Bulk edit contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#PUT-/characters/{character_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the contact, use 0 for clearing label (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutCharactersCharacterIdContactsWithHttpInfo (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContactsApi->PutCharactersCharacterIdContacts");
            // verify the required parameter 'contactIds' is set
            if (contactIds == null)
                throw new ApiException(400, "Missing required parameter 'contactIds' when calling ContactsApi->PutCharactersCharacterIdContacts");
            // verify the required parameter 'standing' is set
            if (standing == null)
                throw new ApiException(400, "Missing required parameter 'standing' when calling ContactsApi->PutCharactersCharacterIdContacts");

            var localVarPath = "./v1/characters/{character_id}/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (labelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label_id", labelId)); // query parameter
            if (standing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "standing", standing)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (watched != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "watched", watched)); // query parameter
            if (contactIds != null && contactIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactIds; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCharactersCharacterIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                null);
        }

        /// <summary>
        /// Edit contacts Bulk edit contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#PUT-/characters/{character_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the contact, use 0 for clearing label (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutCharactersCharacterIdContactsAsync (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null)
        {
             await PutCharactersCharacterIdContactsAsyncWithHttpInfo(characterId, contactIds, standing, datasource, labelId, token, watched);

        }

        /// <summary>
        /// Edit contacts Bulk edit contacts with same settings  - --  Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#PUT-/characters/{character_id}/contacts/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="contactIds">A list of contacts</param>
        /// <param name="standing">Standing for the contact</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="labelId">Add a custom label to the contact, use 0 for clearing label (optional, default to 0)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="watched">Whether the contact should be watched, note this is only effective on characters (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutCharactersCharacterIdContactsAsyncWithHttpInfo (int? characterId, List<int?> contactIds, float? standing, string datasource = null, long? labelId = null, string token = null, bool? watched = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling ContactsApi->PutCharactersCharacterIdContacts");
            // verify the required parameter 'contactIds' is set
            if (contactIds == null)
                throw new ApiException(400, "Missing required parameter 'contactIds' when calling ContactsApi->PutCharactersCharacterIdContacts");
            // verify the required parameter 'standing' is set
            if (standing == null)
                throw new ApiException(400, "Missing required parameter 'standing' when calling ContactsApi->PutCharactersCharacterIdContacts");

            var localVarPath = "./v1/characters/{character_id}/contacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (labelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label_id", labelId)); // query parameter
            if (standing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "standing", standing)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (watched != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "watched", watched)); // query parameter
            if (contactIds != null && contactIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactIds; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCharactersCharacterIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                null);
        }

    }
}
