/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ESIClient.Dotcore.Client;
using ESIClient.Dotcore.Model;

namespace ESIClient.Dotcore.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICorporationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get corporation information
        /// </summary>
        /// <remarks>
        /// Public information about a corporation  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetCorporationsCorporationIdOk</returns>
        GetCorporationsCorporationIdOk GetCorporationsCorporationId (int? corporationId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get corporation information
        /// </summary>
        /// <remarks>
        /// Public information about a corporation  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdOk</returns>
        ApiResponse<GetCorporationsCorporationIdOk> GetCorporationsCorporationIdWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get alliance history
        /// </summary>
        /// <remarks>
        /// Get a list of all the alliances a corporation has been a member of  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;</returns>
        List<GetCorporationsCorporationIdAlliancehistory200Ok> GetCorporationsCorporationIdAlliancehistory (int? corporationId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get alliance history
        /// </summary>
        /// <remarks>
        /// Get a list of all the alliances a corporation has been a member of  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>> GetCorporationsCorporationIdAlliancehistoryWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get corporation blueprints
        /// </summary>
        /// <remarks>
        /// Returns a list of blueprints the corporation owns  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdBlueprints200Ok&gt;</returns>
        List<GetCorporationsCorporationIdBlueprints200Ok> GetCorporationsCorporationIdBlueprints (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation blueprints
        /// </summary>
        /// <remarks>
        /// Returns a list of blueprints the corporation owns  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdBlueprints200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdBlueprints200Ok>> GetCorporationsCorporationIdBlueprintsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get all corporation ALSC logs
        /// </summary>
        /// <remarks>
        /// Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  - --  This route is cached for up to 600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdContainersLogs200Ok&gt;</returns>
        List<GetCorporationsCorporationIdContainersLogs200Ok> GetCorporationsCorporationIdContainersLogs (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get all corporation ALSC logs
        /// </summary>
        /// <remarks>
        /// Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  - --  This route is cached for up to 600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdContainersLogs200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdContainersLogs200Ok>> GetCorporationsCorporationIdContainersLogsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation divisions
        /// </summary>
        /// <remarks>
        /// Return corporation hangar and wallet division names, only show if a division is not using the default name  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetCorporationsCorporationIdDivisionsOk</returns>
        GetCorporationsCorporationIdDivisionsOk GetCorporationsCorporationIdDivisions (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation divisions
        /// </summary>
        /// <remarks>
        /// Return corporation hangar and wallet division names, only show if a division is not using the default name  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdDivisionsOk</returns>
        ApiResponse<GetCorporationsCorporationIdDivisionsOk> GetCorporationsCorporationIdDivisionsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation facilities
        /// </summary>
        /// <remarks>
        /// Return a corporation&#39;s facilities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Factory_Manager
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdFacilities200Ok&gt;</returns>
        List<GetCorporationsCorporationIdFacilities200Ok> GetCorporationsCorporationIdFacilities (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation facilities
        /// </summary>
        /// <remarks>
        /// Return a corporation&#39;s facilities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Factory_Manager
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdFacilities200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdFacilities200Ok>> GetCorporationsCorporationIdFacilitiesWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation icon
        /// </summary>
        /// <remarks>
        /// Get the icon urls for a corporation  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetCorporationsCorporationIdIconsOk</returns>
        GetCorporationsCorporationIdIconsOk GetCorporationsCorporationIdIcons (int? corporationId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get corporation icon
        /// </summary>
        /// <remarks>
        /// Get the icon urls for a corporation  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdIconsOk</returns>
        ApiResponse<GetCorporationsCorporationIdIconsOk> GetCorporationsCorporationIdIconsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get corporation medals
        /// </summary>
        /// <remarks>
        /// Returns a corporation&#39;s medals  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdMedals200Ok&gt;</returns>
        List<GetCorporationsCorporationIdMedals200Ok> GetCorporationsCorporationIdMedals (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation medals
        /// </summary>
        /// <remarks>
        /// Returns a corporation&#39;s medals  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdMedals200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdMedals200Ok>> GetCorporationsCorporationIdMedalsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation issued medals
        /// </summary>
        /// <remarks>
        /// Returns medals issued by a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdMedalsIssued200Ok&gt;</returns>
        List<GetCorporationsCorporationIdMedalsIssued200Ok> GetCorporationsCorporationIdMedalsIssued (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation issued medals
        /// </summary>
        /// <remarks>
        /// Returns medals issued by a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdMedalsIssued200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdMedalsIssued200Ok>> GetCorporationsCorporationIdMedalsIssuedWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation members
        /// </summary>
        /// <remarks>
        /// Return the current member list of a corporation, the token&#39;s character need to be a member of the corporation.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetCorporationsCorporationIdMembers (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation members
        /// </summary>
        /// <remarks>
        /// Return the current member list of a corporation, the token&#39;s character need to be a member of the corporation.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetCorporationsCorporationIdMembersWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation member limit
        /// </summary>
        /// <remarks>
        /// Return a corporation&#39;s member limit, not including CEO himself  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>int?</returns>
        int? GetCorporationsCorporationIdMembersLimit (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation member limit
        /// </summary>
        /// <remarks>
        /// Return a corporation&#39;s member limit, not including CEO himself  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> GetCorporationsCorporationIdMembersLimitWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation&#39;s members&#39; titles
        /// </summary>
        /// <remarks>
        /// Returns a corporation&#39;s members&#39; titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdMembersTitles200Ok&gt;</returns>
        List<GetCorporationsCorporationIdMembersTitles200Ok> GetCorporationsCorporationIdMembersTitles (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation&#39;s members&#39; titles
        /// </summary>
        /// <remarks>
        /// Returns a corporation&#39;s members&#39; titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdMembersTitles200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdMembersTitles200Ok>> GetCorporationsCorporationIdMembersTitlesWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Track corporation members
        /// </summary>
        /// <remarks>
        /// Returns additional information about a corporation&#39;s members which helps tracking their activities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdMembertracking200Ok&gt;</returns>
        List<GetCorporationsCorporationIdMembertracking200Ok> GetCorporationsCorporationIdMembertracking (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Track corporation members
        /// </summary>
        /// <remarks>
        /// Returns additional information about a corporation&#39;s members which helps tracking their activities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdMembertracking200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdMembertracking200Ok>> GetCorporationsCorporationIdMembertrackingWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation outposts
        /// </summary>
        /// <remarks>
        /// Get a list of corporation outpost IDs Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetCorporationsCorporationIdOutposts (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation outposts
        /// </summary>
        /// <remarks>
        /// Get a list of corporation outpost IDs Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetCorporationsCorporationIdOutpostsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation outpost details
        /// </summary>
        /// <remarks>
        /// Get details about a given outpost. Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="outpostId">A station (outpost) ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetCorporationsCorporationIdOutpostsOutpostIdOk</returns>
        GetCorporationsCorporationIdOutpostsOutpostIdOk GetCorporationsCorporationIdOutpostsOutpostId (int? corporationId, int? outpostId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation outpost details
        /// </summary>
        /// <remarks>
        /// Get details about a given outpost. Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="outpostId">A station (outpost) ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdOutpostsOutpostIdOk</returns>
        ApiResponse<GetCorporationsCorporationIdOutpostsOutpostIdOk> GetCorporationsCorporationIdOutpostsOutpostIdWithHttpInfo (int? corporationId, int? outpostId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation member roles
        /// </summary>
        /// <remarks>
        /// Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdRoles200Ok&gt;</returns>
        List<GetCorporationsCorporationIdRoles200Ok> GetCorporationsCorporationIdRoles (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation member roles
        /// </summary>
        /// <remarks>
        /// Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdRoles200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>> GetCorporationsCorporationIdRolesWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation member roles history
        /// </summary>
        /// <remarks>
        /// Return how roles have changed for a coporation&#39;s members, up to a month  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdRolesHistory200Ok&gt;</returns>
        List<GetCorporationsCorporationIdRolesHistory200Ok> GetCorporationsCorporationIdRolesHistory (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation member roles history
        /// </summary>
        /// <remarks>
        /// Return how roles have changed for a coporation&#39;s members, up to a month  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdRolesHistory200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdRolesHistory200Ok>> GetCorporationsCorporationIdRolesHistoryWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation shareholders
        /// </summary>
        /// <remarks>
        /// Return the current shareholders of a corporation.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdShareholders200Ok&gt;</returns>
        List<GetCorporationsCorporationIdShareholders200Ok> GetCorporationsCorporationIdShareholders (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation shareholders
        /// </summary>
        /// <remarks>
        /// Return the current shareholders of a corporation.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdShareholders200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdShareholders200Ok>> GetCorporationsCorporationIdShareholdersWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation standings
        /// </summary>
        /// <remarks>
        /// Return corporation standings from agents, NPC corporations, and factions  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdStandings200Ok&gt;</returns>
        List<GetCorporationsCorporationIdStandings200Ok> GetCorporationsCorporationIdStandings (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation standings
        /// </summary>
        /// <remarks>
        /// Return corporation standings from agents, NPC corporations, and factions  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdStandings200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdStandings200Ok>> GetCorporationsCorporationIdStandingsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation starbases (POSes)
        /// </summary>
        /// <remarks>
        /// Returns list of corporation starbases (POSes)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdStarbases200Ok&gt;</returns>
        List<GetCorporationsCorporationIdStarbases200Ok> GetCorporationsCorporationIdStarbases (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation starbases (POSes)
        /// </summary>
        /// <remarks>
        /// Returns list of corporation starbases (POSes)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdStarbases200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdStarbases200Ok>> GetCorporationsCorporationIdStarbasesWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get starbase (POS) detail
        /// </summary>
        /// <remarks>
        /// Returns various settings and fuels of a starbase (POS)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="starbaseId">An EVE starbase (POS) ID</param>
        /// <param name="systemId">The solar system this starbase (POS) is located in,</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetCorporationsCorporationIdStarbasesStarbaseIdOk</returns>
        GetCorporationsCorporationIdStarbasesStarbaseIdOk GetCorporationsCorporationIdStarbasesStarbaseId (int? corporationId, long? starbaseId, int? systemId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get starbase (POS) detail
        /// </summary>
        /// <remarks>
        /// Returns various settings and fuels of a starbase (POS)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="starbaseId">An EVE starbase (POS) ID</param>
        /// <param name="systemId">The solar system this starbase (POS) is located in,</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdStarbasesStarbaseIdOk</returns>
        ApiResponse<GetCorporationsCorporationIdStarbasesStarbaseIdOk> GetCorporationsCorporationIdStarbasesStarbaseIdWithHttpInfo (int? corporationId, long? starbaseId, int? systemId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation structures
        /// </summary>
        /// <remarks>
        /// Get a list of corporation structures. This route&#39;s version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): StationManager
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdStructures200Ok&gt;</returns>
        List<GetCorporationsCorporationIdStructures200Ok> GetCorporationsCorporationIdStructures (int? corporationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation structures
        /// </summary>
        /// <remarks>
        /// Get a list of corporation structures. This route&#39;s version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): StationManager
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdStructures200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdStructures200Ok>> GetCorporationsCorporationIdStructuresWithHttpInfo (int? corporationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation titles
        /// </summary>
        /// <remarks>
        /// Returns a corporation&#39;s titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdTitles200Ok&gt;</returns>
        List<GetCorporationsCorporationIdTitles200Ok> GetCorporationsCorporationIdTitles (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation titles
        /// </summary>
        /// <remarks>
        /// Returns a corporation&#39;s titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdTitles200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdTitles200Ok>> GetCorporationsCorporationIdTitlesWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation names
        /// </summary>
        /// <remarks>
        /// Resolve a set of corporation IDs to corporation names  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;GetCorporationsNames200Ok&gt;</returns>
        List<GetCorporationsNames200Ok> GetCorporationsNames (List<int?> corporationIds, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get corporation names
        /// </summary>
        /// <remarks>
        /// Resolve a set of corporation IDs to corporation names  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsNames200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsNames200Ok>> GetCorporationsNamesWithHttpInfo (List<int?> corporationIds, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get npc corporations
        /// </summary>
        /// <remarks>
        /// Get a list of npc corporations  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetCorporationsNpccorps (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get npc corporations
        /// </summary>
        /// <remarks>
        /// Get a list of npc corporations  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetCorporationsNpccorpsWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get corporation information
        /// </summary>
        /// <remarks>
        /// Public information about a corporation  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetCorporationsCorporationIdOk</returns>
        System.Threading.Tasks.Task<GetCorporationsCorporationIdOk> GetCorporationsCorporationIdAsync (int? corporationId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get corporation information
        /// </summary>
        /// <remarks>
        /// Public information about a corporation  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdOk>> GetCorporationsCorporationIdAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get alliance history
        /// </summary>
        /// <remarks>
        /// Get a list of all the alliances a corporation has been a member of  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdAlliancehistory200Ok>> GetCorporationsCorporationIdAlliancehistoryAsync (int? corporationId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get alliance history
        /// </summary>
        /// <remarks>
        /// Get a list of all the alliances a corporation has been a member of  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>>> GetCorporationsCorporationIdAlliancehistoryAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get corporation blueprints
        /// </summary>
        /// <remarks>
        /// Returns a list of blueprints the corporation owns  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdBlueprints200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdBlueprints200Ok>> GetCorporationsCorporationIdBlueprintsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation blueprints
        /// </summary>
        /// <remarks>
        /// Returns a list of blueprints the corporation owns  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdBlueprints200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdBlueprints200Ok>>> GetCorporationsCorporationIdBlueprintsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get all corporation ALSC logs
        /// </summary>
        /// <remarks>
        /// Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  - --  This route is cached for up to 600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdContainersLogs200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdContainersLogs200Ok>> GetCorporationsCorporationIdContainersLogsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get all corporation ALSC logs
        /// </summary>
        /// <remarks>
        /// Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  - --  This route is cached for up to 600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdContainersLogs200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdContainersLogs200Ok>>> GetCorporationsCorporationIdContainersLogsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation divisions
        /// </summary>
        /// <remarks>
        /// Return corporation hangar and wallet division names, only show if a division is not using the default name  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetCorporationsCorporationIdDivisionsOk</returns>
        System.Threading.Tasks.Task<GetCorporationsCorporationIdDivisionsOk> GetCorporationsCorporationIdDivisionsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation divisions
        /// </summary>
        /// <remarks>
        /// Return corporation hangar and wallet division names, only show if a division is not using the default name  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdDivisionsOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdDivisionsOk>> GetCorporationsCorporationIdDivisionsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation facilities
        /// </summary>
        /// <remarks>
        /// Return a corporation&#39;s facilities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Factory_Manager
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdFacilities200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdFacilities200Ok>> GetCorporationsCorporationIdFacilitiesAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation facilities
        /// </summary>
        /// <remarks>
        /// Return a corporation&#39;s facilities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Factory_Manager
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdFacilities200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdFacilities200Ok>>> GetCorporationsCorporationIdFacilitiesAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation icon
        /// </summary>
        /// <remarks>
        /// Get the icon urls for a corporation  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetCorporationsCorporationIdIconsOk</returns>
        System.Threading.Tasks.Task<GetCorporationsCorporationIdIconsOk> GetCorporationsCorporationIdIconsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get corporation icon
        /// </summary>
        /// <remarks>
        /// Get the icon urls for a corporation  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdIconsOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdIconsOk>> GetCorporationsCorporationIdIconsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get corporation medals
        /// </summary>
        /// <remarks>
        /// Returns a corporation&#39;s medals  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdMedals200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdMedals200Ok>> GetCorporationsCorporationIdMedalsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation medals
        /// </summary>
        /// <remarks>
        /// Returns a corporation&#39;s medals  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdMedals200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdMedals200Ok>>> GetCorporationsCorporationIdMedalsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation issued medals
        /// </summary>
        /// <remarks>
        /// Returns medals issued by a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdMedalsIssued200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdMedalsIssued200Ok>> GetCorporationsCorporationIdMedalsIssuedAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation issued medals
        /// </summary>
        /// <remarks>
        /// Returns medals issued by a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdMedalsIssued200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdMedalsIssued200Ok>>> GetCorporationsCorporationIdMedalsIssuedAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation members
        /// </summary>
        /// <remarks>
        /// Return the current member list of a corporation, the token&#39;s character need to be a member of the corporation.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetCorporationsCorporationIdMembersAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation members
        /// </summary>
        /// <remarks>
        /// Return the current member list of a corporation, the token&#39;s character need to be a member of the corporation.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetCorporationsCorporationIdMembersAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation member limit
        /// </summary>
        /// <remarks>
        /// Return a corporation&#39;s member limit, not including CEO himself  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> GetCorporationsCorporationIdMembersLimitAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation member limit
        /// </summary>
        /// <remarks>
        /// Return a corporation&#39;s member limit, not including CEO himself  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> GetCorporationsCorporationIdMembersLimitAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation&#39;s members&#39; titles
        /// </summary>
        /// <remarks>
        /// Returns a corporation&#39;s members&#39; titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdMembersTitles200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdMembersTitles200Ok>> GetCorporationsCorporationIdMembersTitlesAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation&#39;s members&#39; titles
        /// </summary>
        /// <remarks>
        /// Returns a corporation&#39;s members&#39; titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdMembersTitles200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdMembersTitles200Ok>>> GetCorporationsCorporationIdMembersTitlesAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Track corporation members
        /// </summary>
        /// <remarks>
        /// Returns additional information about a corporation&#39;s members which helps tracking their activities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdMembertracking200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdMembertracking200Ok>> GetCorporationsCorporationIdMembertrackingAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Track corporation members
        /// </summary>
        /// <remarks>
        /// Returns additional information about a corporation&#39;s members which helps tracking their activities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdMembertracking200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdMembertracking200Ok>>> GetCorporationsCorporationIdMembertrackingAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation outposts
        /// </summary>
        /// <remarks>
        /// Get a list of corporation outpost IDs Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetCorporationsCorporationIdOutpostsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation outposts
        /// </summary>
        /// <remarks>
        /// Get a list of corporation outpost IDs Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetCorporationsCorporationIdOutpostsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation outpost details
        /// </summary>
        /// <remarks>
        /// Get details about a given outpost. Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="outpostId">A station (outpost) ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetCorporationsCorporationIdOutpostsOutpostIdOk</returns>
        System.Threading.Tasks.Task<GetCorporationsCorporationIdOutpostsOutpostIdOk> GetCorporationsCorporationIdOutpostsOutpostIdAsync (int? corporationId, int? outpostId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation outpost details
        /// </summary>
        /// <remarks>
        /// Get details about a given outpost. Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="outpostId">A station (outpost) ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdOutpostsOutpostIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdOutpostsOutpostIdOk>> GetCorporationsCorporationIdOutpostsOutpostIdAsyncWithHttpInfo (int? corporationId, int? outpostId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation member roles
        /// </summary>
        /// <remarks>
        /// Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdRoles200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdRoles200Ok>> GetCorporationsCorporationIdRolesAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation member roles
        /// </summary>
        /// <remarks>
        /// Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdRoles200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>>> GetCorporationsCorporationIdRolesAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation member roles history
        /// </summary>
        /// <remarks>
        /// Return how roles have changed for a coporation&#39;s members, up to a month  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdRolesHistory200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdRolesHistory200Ok>> GetCorporationsCorporationIdRolesHistoryAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation member roles history
        /// </summary>
        /// <remarks>
        /// Return how roles have changed for a coporation&#39;s members, up to a month  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdRolesHistory200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdRolesHistory200Ok>>> GetCorporationsCorporationIdRolesHistoryAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation shareholders
        /// </summary>
        /// <remarks>
        /// Return the current shareholders of a corporation.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdShareholders200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdShareholders200Ok>> GetCorporationsCorporationIdShareholdersAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation shareholders
        /// </summary>
        /// <remarks>
        /// Return the current shareholders of a corporation.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdShareholders200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdShareholders200Ok>>> GetCorporationsCorporationIdShareholdersAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation standings
        /// </summary>
        /// <remarks>
        /// Return corporation standings from agents, NPC corporations, and factions  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdStandings200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdStandings200Ok>> GetCorporationsCorporationIdStandingsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation standings
        /// </summary>
        /// <remarks>
        /// Return corporation standings from agents, NPC corporations, and factions  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdStandings200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdStandings200Ok>>> GetCorporationsCorporationIdStandingsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation starbases (POSes)
        /// </summary>
        /// <remarks>
        /// Returns list of corporation starbases (POSes)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdStarbases200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdStarbases200Ok>> GetCorporationsCorporationIdStarbasesAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation starbases (POSes)
        /// </summary>
        /// <remarks>
        /// Returns list of corporation starbases (POSes)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdStarbases200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdStarbases200Ok>>> GetCorporationsCorporationIdStarbasesAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null);
        /// <summary>
        /// Get starbase (POS) detail
        /// </summary>
        /// <remarks>
        /// Returns various settings and fuels of a starbase (POS)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="starbaseId">An EVE starbase (POS) ID</param>
        /// <param name="systemId">The solar system this starbase (POS) is located in,</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetCorporationsCorporationIdStarbasesStarbaseIdOk</returns>
        System.Threading.Tasks.Task<GetCorporationsCorporationIdStarbasesStarbaseIdOk> GetCorporationsCorporationIdStarbasesStarbaseIdAsync (int? corporationId, long? starbaseId, int? systemId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get starbase (POS) detail
        /// </summary>
        /// <remarks>
        /// Returns various settings and fuels of a starbase (POS)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="starbaseId">An EVE starbase (POS) ID</param>
        /// <param name="systemId">The solar system this starbase (POS) is located in,</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdStarbasesStarbaseIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdStarbasesStarbaseIdOk>> GetCorporationsCorporationIdStarbasesStarbaseIdAsyncWithHttpInfo (int? corporationId, long? starbaseId, int? systemId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation structures
        /// </summary>
        /// <remarks>
        /// Get a list of corporation structures. This route&#39;s version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): StationManager
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdStructures200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdStructures200Ok>> GetCorporationsCorporationIdStructuresAsync (int? corporationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null, int? page = null, string token = null);

        /// <summary>
        /// Get corporation structures
        /// </summary>
        /// <remarks>
        /// Get a list of corporation structures. This route&#39;s version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): StationManager
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdStructures200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdStructures200Ok>>> GetCorporationsCorporationIdStructuresAsyncWithHttpInfo (int? corporationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null, int? page = null, string token = null);
        /// <summary>
        /// Get corporation titles
        /// </summary>
        /// <remarks>
        /// Returns a corporation&#39;s titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdTitles200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdTitles200Ok>> GetCorporationsCorporationIdTitlesAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get corporation titles
        /// </summary>
        /// <remarks>
        /// Returns a corporation&#39;s titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdTitles200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdTitles200Ok>>> GetCorporationsCorporationIdTitlesAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get corporation names
        /// </summary>
        /// <remarks>
        /// Resolve a set of corporation IDs to corporation names  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsNames200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsNames200Ok>> GetCorporationsNamesAsync (List<int?> corporationIds, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get corporation names
        /// </summary>
        /// <remarks>
        /// Resolve a set of corporation IDs to corporation names  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsNames200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsNames200Ok>>> GetCorporationsNamesAsyncWithHttpInfo (List<int?> corporationIds, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get npc corporations
        /// </summary>
        /// <remarks>
        /// Get a list of npc corporations  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetCorporationsNpccorpsAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get npc corporations
        /// </summary>
        /// <remarks>
        /// Get a list of npc corporations  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetCorporationsNpccorpsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CorporationApi : ICorporationApi
    {
        private ESIClient.Dotcore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CorporationApi(String basePath)
        {
            this.Configuration = new ESIClient.Dotcore.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CorporationApi(ESIClient.Dotcore.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ESIClient.Dotcore.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ESIClient.Dotcore.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESIClient.Dotcore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get corporation information Public information about a corporation  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetCorporationsCorporationIdOk</returns>
        public GetCorporationsCorporationIdOk GetCorporationsCorporationId (int? corporationId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetCorporationsCorporationIdOk> localVarResponse = GetCorporationsCorporationIdWithHttpInfo(corporationId, datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation information Public information about a corporation  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdOk</returns>
        public ApiResponse< GetCorporationsCorporationIdOk > GetCorporationsCorporationIdWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationId");

            var localVarPath = "./v4/corporations/{corporation_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporationsCorporationIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdOk)));
        }

        /// <summary>
        /// Get corporation information Public information about a corporation  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetCorporationsCorporationIdOk</returns>
        public async System.Threading.Tasks.Task<GetCorporationsCorporationIdOk> GetCorporationsCorporationIdAsync (int? corporationId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetCorporationsCorporationIdOk> localVarResponse = await GetCorporationsCorporationIdAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation information Public information about a corporation  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdOk>> GetCorporationsCorporationIdAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationId");

            var localVarPath = "./v4/corporations/{corporation_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporationsCorporationIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdOk)));
        }

        /// <summary>
        /// Get alliance history Get a list of all the alliances a corporation has been a member of  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdAlliancehistory200Ok> GetCorporationsCorporationIdAlliancehistory (int? corporationId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>> localVarResponse = GetCorporationsCorporationIdAlliancehistoryWithHttpInfo(corporationId, datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get alliance history Get a list of all the alliances a corporation has been a member of  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdAlliancehistory200Ok> > GetCorporationsCorporationIdAlliancehistoryWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdAlliancehistory");

            var localVarPath = "./v2/corporations/{corporation_id}/alliancehistory/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdAlliancehistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdAlliancehistory200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdAlliancehistory200Ok>)));
        }

        /// <summary>
        /// Get alliance history Get a list of all the alliances a corporation has been a member of  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdAlliancehistory200Ok>> GetCorporationsCorporationIdAlliancehistoryAsync (int? corporationId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>> localVarResponse = await GetCorporationsCorporationIdAlliancehistoryAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get alliance history Get a list of all the alliances a corporation has been a member of  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>>> GetCorporationsCorporationIdAlliancehistoryAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdAlliancehistory");

            var localVarPath = "./v2/corporations/{corporation_id}/alliancehistory/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdAlliancehistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdAlliancehistory200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdAlliancehistory200Ok>)));
        }

        /// <summary>
        /// Get corporation blueprints Returns a list of blueprints the corporation owns  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdBlueprints200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdBlueprints200Ok> GetCorporationsCorporationIdBlueprints (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdBlueprints200Ok>> localVarResponse = GetCorporationsCorporationIdBlueprintsWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation blueprints Returns a list of blueprints the corporation owns  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdBlueprints200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdBlueprints200Ok> > GetCorporationsCorporationIdBlueprintsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdBlueprints");

            var localVarPath = "./v2/corporations/{corporation_id}/blueprints/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdBlueprints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdBlueprints200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdBlueprints200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdBlueprints200Ok>)));
        }

        /// <summary>
        /// Get corporation blueprints Returns a list of blueprints the corporation owns  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdBlueprints200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdBlueprints200Ok>> GetCorporationsCorporationIdBlueprintsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdBlueprints200Ok>> localVarResponse = await GetCorporationsCorporationIdBlueprintsAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation blueprints Returns a list of blueprints the corporation owns  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdBlueprints200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdBlueprints200Ok>>> GetCorporationsCorporationIdBlueprintsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdBlueprints");

            var localVarPath = "./v2/corporations/{corporation_id}/blueprints/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdBlueprints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdBlueprints200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdBlueprints200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdBlueprints200Ok>)));
        }

        /// <summary>
        /// Get all corporation ALSC logs Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  - --  This route is cached for up to 600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdContainersLogs200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdContainersLogs200Ok> GetCorporationsCorporationIdContainersLogs (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdContainersLogs200Ok>> localVarResponse = GetCorporationsCorporationIdContainersLogsWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all corporation ALSC logs Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  - --  This route is cached for up to 600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdContainersLogs200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdContainersLogs200Ok> > GetCorporationsCorporationIdContainersLogsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdContainersLogs");

            var localVarPath = "./v2/corporations/{corporation_id}/containers/logs/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdContainersLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdContainersLogs200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdContainersLogs200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdContainersLogs200Ok>)));
        }

        /// <summary>
        /// Get all corporation ALSC logs Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  - --  This route is cached for up to 600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdContainersLogs200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdContainersLogs200Ok>> GetCorporationsCorporationIdContainersLogsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdContainersLogs200Ok>> localVarResponse = await GetCorporationsCorporationIdContainersLogsAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all corporation ALSC logs Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  - --  This route is cached for up to 600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdContainersLogs200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdContainersLogs200Ok>>> GetCorporationsCorporationIdContainersLogsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdContainersLogs");

            var localVarPath = "./v2/corporations/{corporation_id}/containers/logs/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdContainersLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdContainersLogs200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdContainersLogs200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdContainersLogs200Ok>)));
        }

        /// <summary>
        /// Get corporation divisions Return corporation hangar and wallet division names, only show if a division is not using the default name  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetCorporationsCorporationIdDivisionsOk</returns>
        public GetCorporationsCorporationIdDivisionsOk GetCorporationsCorporationIdDivisions (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetCorporationsCorporationIdDivisionsOk> localVarResponse = GetCorporationsCorporationIdDivisionsWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation divisions Return corporation hangar and wallet division names, only show if a division is not using the default name  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdDivisionsOk</returns>
        public ApiResponse< GetCorporationsCorporationIdDivisionsOk > GetCorporationsCorporationIdDivisionsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdDivisions");

            var localVarPath = "./v1/corporations/{corporation_id}/divisions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdDivisions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdDivisionsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporationsCorporationIdDivisionsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdDivisionsOk)));
        }

        /// <summary>
        /// Get corporation divisions Return corporation hangar and wallet division names, only show if a division is not using the default name  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetCorporationsCorporationIdDivisionsOk</returns>
        public async System.Threading.Tasks.Task<GetCorporationsCorporationIdDivisionsOk> GetCorporationsCorporationIdDivisionsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetCorporationsCorporationIdDivisionsOk> localVarResponse = await GetCorporationsCorporationIdDivisionsAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation divisions Return corporation hangar and wallet division names, only show if a division is not using the default name  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdDivisionsOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdDivisionsOk>> GetCorporationsCorporationIdDivisionsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdDivisions");

            var localVarPath = "./v1/corporations/{corporation_id}/divisions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdDivisions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdDivisionsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporationsCorporationIdDivisionsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdDivisionsOk)));
        }

        /// <summary>
        /// Get corporation facilities Return a corporation&#39;s facilities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Factory_Manager
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdFacilities200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdFacilities200Ok> GetCorporationsCorporationIdFacilities (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdFacilities200Ok>> localVarResponse = GetCorporationsCorporationIdFacilitiesWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation facilities Return a corporation&#39;s facilities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Factory_Manager
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdFacilities200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdFacilities200Ok> > GetCorporationsCorporationIdFacilitiesWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdFacilities");

            var localVarPath = "./v1/corporations/{corporation_id}/facilities/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdFacilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdFacilities200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdFacilities200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdFacilities200Ok>)));
        }

        /// <summary>
        /// Get corporation facilities Return a corporation&#39;s facilities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Factory_Manager
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdFacilities200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdFacilities200Ok>> GetCorporationsCorporationIdFacilitiesAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdFacilities200Ok>> localVarResponse = await GetCorporationsCorporationIdFacilitiesAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation facilities Return a corporation&#39;s facilities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Factory_Manager
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdFacilities200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdFacilities200Ok>>> GetCorporationsCorporationIdFacilitiesAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdFacilities");

            var localVarPath = "./v1/corporations/{corporation_id}/facilities/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdFacilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdFacilities200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdFacilities200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdFacilities200Ok>)));
        }

        /// <summary>
        /// Get corporation icon Get the icon urls for a corporation  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetCorporationsCorporationIdIconsOk</returns>
        public GetCorporationsCorporationIdIconsOk GetCorporationsCorporationIdIcons (int? corporationId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetCorporationsCorporationIdIconsOk> localVarResponse = GetCorporationsCorporationIdIconsWithHttpInfo(corporationId, datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation icon Get the icon urls for a corporation  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdIconsOk</returns>
        public ApiResponse< GetCorporationsCorporationIdIconsOk > GetCorporationsCorporationIdIconsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdIcons");

            var localVarPath = "./v1/corporations/{corporation_id}/icons/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdIcons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdIconsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporationsCorporationIdIconsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdIconsOk)));
        }

        /// <summary>
        /// Get corporation icon Get the icon urls for a corporation  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetCorporationsCorporationIdIconsOk</returns>
        public async System.Threading.Tasks.Task<GetCorporationsCorporationIdIconsOk> GetCorporationsCorporationIdIconsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetCorporationsCorporationIdIconsOk> localVarResponse = await GetCorporationsCorporationIdIconsAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation icon Get the icon urls for a corporation  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdIconsOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdIconsOk>> GetCorporationsCorporationIdIconsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdIcons");

            var localVarPath = "./v1/corporations/{corporation_id}/icons/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdIcons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdIconsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporationsCorporationIdIconsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdIconsOk)));
        }

        /// <summary>
        /// Get corporation medals Returns a corporation&#39;s medals  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdMedals200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdMedals200Ok> GetCorporationsCorporationIdMedals (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdMedals200Ok>> localVarResponse = GetCorporationsCorporationIdMedalsWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation medals Returns a corporation&#39;s medals  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdMedals200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdMedals200Ok> > GetCorporationsCorporationIdMedalsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdMedals");

            var localVarPath = "./v1/corporations/{corporation_id}/medals/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdMedals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdMedals200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdMedals200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdMedals200Ok>)));
        }

        /// <summary>
        /// Get corporation medals Returns a corporation&#39;s medals  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdMedals200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdMedals200Ok>> GetCorporationsCorporationIdMedalsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdMedals200Ok>> localVarResponse = await GetCorporationsCorporationIdMedalsAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation medals Returns a corporation&#39;s medals  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdMedals200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdMedals200Ok>>> GetCorporationsCorporationIdMedalsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdMedals");

            var localVarPath = "./v1/corporations/{corporation_id}/medals/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdMedals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdMedals200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdMedals200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdMedals200Ok>)));
        }

        /// <summary>
        /// Get corporation issued medals Returns medals issued by a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdMedalsIssued200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdMedalsIssued200Ok> GetCorporationsCorporationIdMedalsIssued (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdMedalsIssued200Ok>> localVarResponse = GetCorporationsCorporationIdMedalsIssuedWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation issued medals Returns medals issued by a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdMedalsIssued200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdMedalsIssued200Ok> > GetCorporationsCorporationIdMedalsIssuedWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdMedalsIssued");

            var localVarPath = "./v1/corporations/{corporation_id}/medals/issued/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdMedalsIssued", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdMedalsIssued200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdMedalsIssued200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdMedalsIssued200Ok>)));
        }

        /// <summary>
        /// Get corporation issued medals Returns medals issued by a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdMedalsIssued200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdMedalsIssued200Ok>> GetCorporationsCorporationIdMedalsIssuedAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdMedalsIssued200Ok>> localVarResponse = await GetCorporationsCorporationIdMedalsIssuedAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation issued medals Returns medals issued by a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdMedalsIssued200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdMedalsIssued200Ok>>> GetCorporationsCorporationIdMedalsIssuedAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdMedalsIssued");

            var localVarPath = "./v1/corporations/{corporation_id}/medals/issued/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdMedalsIssued", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdMedalsIssued200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdMedalsIssued200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdMedalsIssued200Ok>)));
        }

        /// <summary>
        /// Get corporation members Return the current member list of a corporation, the token&#39;s character need to be a member of the corporation.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetCorporationsCorporationIdMembers (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetCorporationsCorporationIdMembersWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation members Return the current member list of a corporation, the token&#39;s character need to be a member of the corporation.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetCorporationsCorporationIdMembersWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdMembers");

            var localVarPath = "./v3/corporations/{corporation_id}/members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get corporation members Return the current member list of a corporation, the token&#39;s character need to be a member of the corporation.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetCorporationsCorporationIdMembersAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetCorporationsCorporationIdMembersAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation members Return the current member list of a corporation, the token&#39;s character need to be a member of the corporation.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetCorporationsCorporationIdMembersAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdMembers");

            var localVarPath = "./v3/corporations/{corporation_id}/members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get corporation member limit Return a corporation&#39;s member limit, not including CEO himself  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>int?</returns>
        public int? GetCorporationsCorporationIdMembersLimit (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<int?> localVarResponse = GetCorporationsCorporationIdMembersLimitWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation member limit Return a corporation&#39;s member limit, not including CEO himself  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > GetCorporationsCorporationIdMembersLimitWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdMembersLimit");

            var localVarPath = "./v1/corporations/{corporation_id}/members/limit/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdMembersLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Get corporation member limit Return a corporation&#39;s member limit, not including CEO himself  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> GetCorporationsCorporationIdMembersLimitAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<int?> localVarResponse = await GetCorporationsCorporationIdMembersLimitAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation member limit Return a corporation&#39;s member limit, not including CEO himself  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> GetCorporationsCorporationIdMembersLimitAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdMembersLimit");

            var localVarPath = "./v1/corporations/{corporation_id}/members/limit/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdMembersLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Get corporation&#39;s members&#39; titles Returns a corporation&#39;s members&#39; titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdMembersTitles200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdMembersTitles200Ok> GetCorporationsCorporationIdMembersTitles (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdMembersTitles200Ok>> localVarResponse = GetCorporationsCorporationIdMembersTitlesWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation&#39;s members&#39; titles Returns a corporation&#39;s members&#39; titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdMembersTitles200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdMembersTitles200Ok> > GetCorporationsCorporationIdMembersTitlesWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdMembersTitles");

            var localVarPath = "./v1/corporations/{corporation_id}/members/titles/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdMembersTitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdMembersTitles200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdMembersTitles200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdMembersTitles200Ok>)));
        }

        /// <summary>
        /// Get corporation&#39;s members&#39; titles Returns a corporation&#39;s members&#39; titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdMembersTitles200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdMembersTitles200Ok>> GetCorporationsCorporationIdMembersTitlesAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdMembersTitles200Ok>> localVarResponse = await GetCorporationsCorporationIdMembersTitlesAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation&#39;s members&#39; titles Returns a corporation&#39;s members&#39; titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdMembersTitles200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdMembersTitles200Ok>>> GetCorporationsCorporationIdMembersTitlesAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdMembersTitles");

            var localVarPath = "./v1/corporations/{corporation_id}/members/titles/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdMembersTitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdMembersTitles200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdMembersTitles200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdMembersTitles200Ok>)));
        }

        /// <summary>
        /// Track corporation members Returns additional information about a corporation&#39;s members which helps tracking their activities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdMembertracking200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdMembertracking200Ok> GetCorporationsCorporationIdMembertracking (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdMembertracking200Ok>> localVarResponse = GetCorporationsCorporationIdMembertrackingWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Track corporation members Returns additional information about a corporation&#39;s members which helps tracking their activities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdMembertracking200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdMembertracking200Ok> > GetCorporationsCorporationIdMembertrackingWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdMembertracking");

            var localVarPath = "./v1/corporations/{corporation_id}/membertracking/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdMembertracking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdMembertracking200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdMembertracking200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdMembertracking200Ok>)));
        }

        /// <summary>
        /// Track corporation members Returns additional information about a corporation&#39;s members which helps tracking their activities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdMembertracking200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdMembertracking200Ok>> GetCorporationsCorporationIdMembertrackingAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdMembertracking200Ok>> localVarResponse = await GetCorporationsCorporationIdMembertrackingAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Track corporation members Returns additional information about a corporation&#39;s members which helps tracking their activities  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdMembertracking200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdMembertracking200Ok>>> GetCorporationsCorporationIdMembertrackingAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdMembertracking");

            var localVarPath = "./v1/corporations/{corporation_id}/membertracking/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdMembertracking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdMembertracking200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdMembertracking200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdMembertracking200Ok>)));
        }

        /// <summary>
        /// Get corporation outposts Get a list of corporation outpost IDs Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetCorporationsCorporationIdOutposts (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetCorporationsCorporationIdOutpostsWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation outposts Get a list of corporation outpost IDs Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetCorporationsCorporationIdOutpostsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdOutposts");

            var localVarPath = "./v1/corporations/{corporation_id}/outposts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdOutposts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get corporation outposts Get a list of corporation outpost IDs Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetCorporationsCorporationIdOutpostsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetCorporationsCorporationIdOutpostsAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation outposts Get a list of corporation outpost IDs Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetCorporationsCorporationIdOutpostsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdOutposts");

            var localVarPath = "./v1/corporations/{corporation_id}/outposts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdOutposts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get corporation outpost details Get details about a given outpost. Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="outpostId">A station (outpost) ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetCorporationsCorporationIdOutpostsOutpostIdOk</returns>
        public GetCorporationsCorporationIdOutpostsOutpostIdOk GetCorporationsCorporationIdOutpostsOutpostId (int? corporationId, int? outpostId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetCorporationsCorporationIdOutpostsOutpostIdOk> localVarResponse = GetCorporationsCorporationIdOutpostsOutpostIdWithHttpInfo(corporationId, outpostId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation outpost details Get details about a given outpost. Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="outpostId">A station (outpost) ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdOutpostsOutpostIdOk</returns>
        public ApiResponse< GetCorporationsCorporationIdOutpostsOutpostIdOk > GetCorporationsCorporationIdOutpostsOutpostIdWithHttpInfo (int? corporationId, int? outpostId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdOutpostsOutpostId");
            // verify the required parameter 'outpostId' is set
            if (outpostId == null)
                throw new ApiException(400, "Missing required parameter 'outpostId' when calling CorporationApi->GetCorporationsCorporationIdOutpostsOutpostId");

            var localVarPath = "./v1/corporations/{corporation_id}/outposts/{outpost_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (outpostId != null) localVarPathParams.Add("outpost_id", this.Configuration.ApiClient.ParameterToString(outpostId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdOutpostsOutpostId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdOutpostsOutpostIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporationsCorporationIdOutpostsOutpostIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdOutpostsOutpostIdOk)));
        }

        /// <summary>
        /// Get corporation outpost details Get details about a given outpost. Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="outpostId">A station (outpost) ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetCorporationsCorporationIdOutpostsOutpostIdOk</returns>
        public async System.Threading.Tasks.Task<GetCorporationsCorporationIdOutpostsOutpostIdOk> GetCorporationsCorporationIdOutpostsOutpostIdAsync (int? corporationId, int? outpostId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetCorporationsCorporationIdOutpostsOutpostIdOk> localVarResponse = await GetCorporationsCorporationIdOutpostsOutpostIdAsyncWithHttpInfo(corporationId, outpostId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation outpost details Get details about a given outpost. Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="outpostId">A station (outpost) ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdOutpostsOutpostIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdOutpostsOutpostIdOk>> GetCorporationsCorporationIdOutpostsOutpostIdAsyncWithHttpInfo (int? corporationId, int? outpostId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdOutpostsOutpostId");
            // verify the required parameter 'outpostId' is set
            if (outpostId == null)
                throw new ApiException(400, "Missing required parameter 'outpostId' when calling CorporationApi->GetCorporationsCorporationIdOutpostsOutpostId");

            var localVarPath = "./v1/corporations/{corporation_id}/outposts/{outpost_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (outpostId != null) localVarPathParams.Add("outpost_id", this.Configuration.ApiClient.ParameterToString(outpostId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdOutpostsOutpostId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdOutpostsOutpostIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporationsCorporationIdOutpostsOutpostIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdOutpostsOutpostIdOk)));
        }

        /// <summary>
        /// Get corporation member roles Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdRoles200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdRoles200Ok> GetCorporationsCorporationIdRoles (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>> localVarResponse = GetCorporationsCorporationIdRolesWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation member roles Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdRoles200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdRoles200Ok> > GetCorporationsCorporationIdRolesWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdRoles");

            var localVarPath = "./v1/corporations/{corporation_id}/roles/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdRoles200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdRoles200Ok>)));
        }

        /// <summary>
        /// Get corporation member roles Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdRoles200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdRoles200Ok>> GetCorporationsCorporationIdRolesAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>> localVarResponse = await GetCorporationsCorporationIdRolesAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation member roles Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdRoles200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>>> GetCorporationsCorporationIdRolesAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdRoles");

            var localVarPath = "./v1/corporations/{corporation_id}/roles/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdRoles200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdRoles200Ok>)));
        }

        /// <summary>
        /// Get corporation member roles history Return how roles have changed for a coporation&#39;s members, up to a month  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdRolesHistory200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdRolesHistory200Ok> GetCorporationsCorporationIdRolesHistory (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdRolesHistory200Ok>> localVarResponse = GetCorporationsCorporationIdRolesHistoryWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation member roles history Return how roles have changed for a coporation&#39;s members, up to a month  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdRolesHistory200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdRolesHistory200Ok> > GetCorporationsCorporationIdRolesHistoryWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdRolesHistory");

            var localVarPath = "./v1/corporations/{corporation_id}/roles/history/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdRolesHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdRolesHistory200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdRolesHistory200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdRolesHistory200Ok>)));
        }

        /// <summary>
        /// Get corporation member roles history Return how roles have changed for a coporation&#39;s members, up to a month  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdRolesHistory200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdRolesHistory200Ok>> GetCorporationsCorporationIdRolesHistoryAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdRolesHistory200Ok>> localVarResponse = await GetCorporationsCorporationIdRolesHistoryAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation member roles history Return how roles have changed for a coporation&#39;s members, up to a month  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdRolesHistory200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdRolesHistory200Ok>>> GetCorporationsCorporationIdRolesHistoryAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdRolesHistory");

            var localVarPath = "./v1/corporations/{corporation_id}/roles/history/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdRolesHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdRolesHistory200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdRolesHistory200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdRolesHistory200Ok>)));
        }

        /// <summary>
        /// Get corporation shareholders Return the current shareholders of a corporation.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdShareholders200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdShareholders200Ok> GetCorporationsCorporationIdShareholders (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdShareholders200Ok>> localVarResponse = GetCorporationsCorporationIdShareholdersWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation shareholders Return the current shareholders of a corporation.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdShareholders200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdShareholders200Ok> > GetCorporationsCorporationIdShareholdersWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdShareholders");

            var localVarPath = "./v1/corporations/{corporation_id}/shareholders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdShareholders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdShareholders200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdShareholders200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdShareholders200Ok>)));
        }

        /// <summary>
        /// Get corporation shareholders Return the current shareholders of a corporation.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdShareholders200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdShareholders200Ok>> GetCorporationsCorporationIdShareholdersAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdShareholders200Ok>> localVarResponse = await GetCorporationsCorporationIdShareholdersAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation shareholders Return the current shareholders of a corporation.  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdShareholders200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdShareholders200Ok>>> GetCorporationsCorporationIdShareholdersAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdShareholders");

            var localVarPath = "./v1/corporations/{corporation_id}/shareholders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdShareholders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdShareholders200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdShareholders200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdShareholders200Ok>)));
        }

        /// <summary>
        /// Get corporation standings Return corporation standings from agents, NPC corporations, and factions  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdStandings200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdStandings200Ok> GetCorporationsCorporationIdStandings (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdStandings200Ok>> localVarResponse = GetCorporationsCorporationIdStandingsWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation standings Return corporation standings from agents, NPC corporations, and factions  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdStandings200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdStandings200Ok> > GetCorporationsCorporationIdStandingsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdStandings");

            var localVarPath = "./v1/corporations/{corporation_id}/standings/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdStandings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdStandings200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdStandings200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdStandings200Ok>)));
        }

        /// <summary>
        /// Get corporation standings Return corporation standings from agents, NPC corporations, and factions  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdStandings200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdStandings200Ok>> GetCorporationsCorporationIdStandingsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdStandings200Ok>> localVarResponse = await GetCorporationsCorporationIdStandingsAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation standings Return corporation standings from agents, NPC corporations, and factions  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdStandings200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdStandings200Ok>>> GetCorporationsCorporationIdStandingsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdStandings");

            var localVarPath = "./v1/corporations/{corporation_id}/standings/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdStandings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdStandings200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdStandings200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdStandings200Ok>)));
        }

        /// <summary>
        /// Get corporation starbases (POSes) Returns list of corporation starbases (POSes)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdStarbases200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdStarbases200Ok> GetCorporationsCorporationIdStarbases (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdStarbases200Ok>> localVarResponse = GetCorporationsCorporationIdStarbasesWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation starbases (POSes) Returns list of corporation starbases (POSes)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdStarbases200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdStarbases200Ok> > GetCorporationsCorporationIdStarbasesWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdStarbases");

            var localVarPath = "./v1/corporations/{corporation_id}/starbases/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdStarbases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdStarbases200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdStarbases200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdStarbases200Ok>)));
        }

        /// <summary>
        /// Get corporation starbases (POSes) Returns list of corporation starbases (POSes)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdStarbases200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdStarbases200Ok>> GetCorporationsCorporationIdStarbasesAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdStarbases200Ok>> localVarResponse = await GetCorporationsCorporationIdStarbasesAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation starbases (POSes) Returns list of corporation starbases (POSes)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdStarbases200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdStarbases200Ok>>> GetCorporationsCorporationIdStarbasesAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdStarbases");

            var localVarPath = "./v1/corporations/{corporation_id}/starbases/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdStarbases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdStarbases200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdStarbases200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdStarbases200Ok>)));
        }

        /// <summary>
        /// Get starbase (POS) detail Returns various settings and fuels of a starbase (POS)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="starbaseId">An EVE starbase (POS) ID</param>
        /// <param name="systemId">The solar system this starbase (POS) is located in,</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetCorporationsCorporationIdStarbasesStarbaseIdOk</returns>
        public GetCorporationsCorporationIdStarbasesStarbaseIdOk GetCorporationsCorporationIdStarbasesStarbaseId (int? corporationId, long? starbaseId, int? systemId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetCorporationsCorporationIdStarbasesStarbaseIdOk> localVarResponse = GetCorporationsCorporationIdStarbasesStarbaseIdWithHttpInfo(corporationId, starbaseId, systemId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get starbase (POS) detail Returns various settings and fuels of a starbase (POS)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="starbaseId">An EVE starbase (POS) ID</param>
        /// <param name="systemId">The solar system this starbase (POS) is located in,</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdStarbasesStarbaseIdOk</returns>
        public ApiResponse< GetCorporationsCorporationIdStarbasesStarbaseIdOk > GetCorporationsCorporationIdStarbasesStarbaseIdWithHttpInfo (int? corporationId, long? starbaseId, int? systemId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdStarbasesStarbaseId");
            // verify the required parameter 'starbaseId' is set
            if (starbaseId == null)
                throw new ApiException(400, "Missing required parameter 'starbaseId' when calling CorporationApi->GetCorporationsCorporationIdStarbasesStarbaseId");
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling CorporationApi->GetCorporationsCorporationIdStarbasesStarbaseId");

            var localVarPath = "./v1/corporations/{corporation_id}/starbases/{starbase_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (starbaseId != null) localVarPathParams.Add("starbase_id", this.Configuration.ApiClient.ParameterToString(starbaseId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (systemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "system_id", systemId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdStarbasesStarbaseId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdStarbasesStarbaseIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporationsCorporationIdStarbasesStarbaseIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdStarbasesStarbaseIdOk)));
        }

        /// <summary>
        /// Get starbase (POS) detail Returns various settings and fuels of a starbase (POS)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="starbaseId">An EVE starbase (POS) ID</param>
        /// <param name="systemId">The solar system this starbase (POS) is located in,</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetCorporationsCorporationIdStarbasesStarbaseIdOk</returns>
        public async System.Threading.Tasks.Task<GetCorporationsCorporationIdStarbasesStarbaseIdOk> GetCorporationsCorporationIdStarbasesStarbaseIdAsync (int? corporationId, long? starbaseId, int? systemId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetCorporationsCorporationIdStarbasesStarbaseIdOk> localVarResponse = await GetCorporationsCorporationIdStarbasesStarbaseIdAsyncWithHttpInfo(corporationId, starbaseId, systemId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get starbase (POS) detail Returns various settings and fuels of a starbase (POS)  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="starbaseId">An EVE starbase (POS) ID</param>
        /// <param name="systemId">The solar system this starbase (POS) is located in,</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdStarbasesStarbaseIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdStarbasesStarbaseIdOk>> GetCorporationsCorporationIdStarbasesStarbaseIdAsyncWithHttpInfo (int? corporationId, long? starbaseId, int? systemId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdStarbasesStarbaseId");
            // verify the required parameter 'starbaseId' is set
            if (starbaseId == null)
                throw new ApiException(400, "Missing required parameter 'starbaseId' when calling CorporationApi->GetCorporationsCorporationIdStarbasesStarbaseId");
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling CorporationApi->GetCorporationsCorporationIdStarbasesStarbaseId");

            var localVarPath = "./v1/corporations/{corporation_id}/starbases/{starbase_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (starbaseId != null) localVarPathParams.Add("starbase_id", this.Configuration.ApiClient.ParameterToString(starbaseId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (systemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "system_id", systemId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdStarbasesStarbaseId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdStarbasesStarbaseIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporationsCorporationIdStarbasesStarbaseIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdStarbasesStarbaseIdOk)));
        }

        /// <summary>
        /// Get corporation structures Get a list of corporation structures. This route&#39;s version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): StationManager
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdStructures200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdStructures200Ok> GetCorporationsCorporationIdStructures (int? corporationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdStructures200Ok>> localVarResponse = GetCorporationsCorporationIdStructuresWithHttpInfo(corporationId, acceptLanguage, datasource, ifNoneMatch, language, page, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation structures Get a list of corporation structures. This route&#39;s version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): StationManager
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdStructures200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdStructures200Ok> > GetCorporationsCorporationIdStructuresWithHttpInfo (int? corporationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdStructures");

            var localVarPath = "./v2/corporations/{corporation_id}/structures/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdStructures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdStructures200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdStructures200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdStructures200Ok>)));
        }

        /// <summary>
        /// Get corporation structures Get a list of corporation structures. This route&#39;s version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): StationManager
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdStructures200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdStructures200Ok>> GetCorporationsCorporationIdStructuresAsync (int? corporationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null, int? page = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdStructures200Ok>> localVarResponse = await GetCorporationsCorporationIdStructuresAsyncWithHttpInfo(corporationId, acceptLanguage, datasource, ifNoneMatch, language, page, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation structures Get a list of corporation structures. This route&#39;s version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): StationManager
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdStructures200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdStructures200Ok>>> GetCorporationsCorporationIdStructuresAsyncWithHttpInfo (int? corporationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null, int? page = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdStructures");

            var localVarPath = "./v2/corporations/{corporation_id}/structures/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdStructures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdStructures200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdStructures200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdStructures200Ok>)));
        }

        /// <summary>
        /// Get corporation titles Returns a corporation&#39;s titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdTitles200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdTitles200Ok> GetCorporationsCorporationIdTitles (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdTitles200Ok>> localVarResponse = GetCorporationsCorporationIdTitlesWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation titles Returns a corporation&#39;s titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdTitles200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdTitles200Ok> > GetCorporationsCorporationIdTitlesWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdTitles");

            var localVarPath = "./v1/corporations/{corporation_id}/titles/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdTitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdTitles200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdTitles200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdTitles200Ok>)));
        }

        /// <summary>
        /// Get corporation titles Returns a corporation&#39;s titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdTitles200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdTitles200Ok>> GetCorporationsCorporationIdTitlesAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdTitles200Ok>> localVarResponse = await GetCorporationsCorporationIdTitlesAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation titles Returns a corporation&#39;s titles  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdTitles200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdTitles200Ok>>> GetCorporationsCorporationIdTitlesAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdTitles");

            var localVarPath = "./v1/corporations/{corporation_id}/titles/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdTitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdTitles200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdTitles200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdTitles200Ok>)));
        }

        /// <summary>
        /// Get corporation names Resolve a set of corporation IDs to corporation names  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;GetCorporationsNames200Ok&gt;</returns>
        public List<GetCorporationsNames200Ok> GetCorporationsNames (List<int?> corporationIds, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<GetCorporationsNames200Ok>> localVarResponse = GetCorporationsNamesWithHttpInfo(corporationIds, datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation names Resolve a set of corporation IDs to corporation names  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsNames200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsNames200Ok> > GetCorporationsNamesWithHttpInfo (List<int?> corporationIds, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'corporationIds' is set
            if (corporationIds == null)
                throw new ApiException(400, "Missing required parameter 'corporationIds' when calling CorporationApi->GetCorporationsNames");

            var localVarPath = "./v2/corporations/names/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "corporation_ids", corporationIds)); // query parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsNames200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsNames200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsNames200Ok>)));
        }

        /// <summary>
        /// Get corporation names Resolve a set of corporation IDs to corporation names  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsNames200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsNames200Ok>> GetCorporationsNamesAsync (List<int?> corporationIds, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<GetCorporationsNames200Ok>> localVarResponse = await GetCorporationsNamesAsyncWithHttpInfo(corporationIds, datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation names Resolve a set of corporation IDs to corporation names  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsNames200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsNames200Ok>>> GetCorporationsNamesAsyncWithHttpInfo (List<int?> corporationIds, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'corporationIds' is set
            if (corporationIds == null)
                throw new ApiException(400, "Missing required parameter 'corporationIds' when calling CorporationApi->GetCorporationsNames");

            var localVarPath = "./v2/corporations/names/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "corporation_ids", corporationIds)); // query parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsNames200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<GetCorporationsNames200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsNames200Ok>)));
        }

        /// <summary>
        /// Get npc corporations Get a list of npc corporations  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetCorporationsNpccorps (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetCorporationsNpccorpsWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get npc corporations Get a list of npc corporations  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetCorporationsNpccorpsWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/corporations/npccorps/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsNpccorps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get npc corporations Get a list of npc corporations  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetCorporationsNpccorpsAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetCorporationsNpccorpsAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get npc corporations Get a list of npc corporations  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetCorporationsNpccorpsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/corporations/npccorps/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsNpccorps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

    }
}
