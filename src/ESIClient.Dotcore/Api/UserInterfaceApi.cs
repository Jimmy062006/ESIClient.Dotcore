/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ESIClient.Dotcore.Client;
using ESIClient.Dotcore.Model;

namespace ESIClient.Dotcore.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserInterfaceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Set Autopilot Waypoint
        /// </summary>
        /// <remarks>
        /// Set a solar system as autopilot waypoint  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToBeginning">Whether this solar system should be added to the beginning of all waypoints</param>
        /// <param name="clearOtherWaypoints">Whether clean other waypoints beforing adding this one</param>
        /// <param name="destinationId">The destination to travel to, can be solar system, station or structure&#39;s id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        void PostUiAutopilotWaypoint (bool? addToBeginning, bool? clearOtherWaypoints, long? destinationId, string datasource = null, string token = null);

        /// <summary>
        /// Set Autopilot Waypoint
        /// </summary>
        /// <remarks>
        /// Set a solar system as autopilot waypoint  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToBeginning">Whether this solar system should be added to the beginning of all waypoints</param>
        /// <param name="clearOtherWaypoints">Whether clean other waypoints beforing adding this one</param>
        /// <param name="destinationId">The destination to travel to, can be solar system, station or structure&#39;s id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostUiAutopilotWaypointWithHttpInfo (bool? addToBeginning, bool? clearOtherWaypoints, long? destinationId, string datasource = null, string token = null);
        /// <summary>
        /// Open Contract Window
        /// </summary>
        /// <remarks>
        /// Open the contract window inside the client  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">The contract to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        void PostUiOpenwindowContract (int? contractId, string datasource = null, string token = null);

        /// <summary>
        /// Open Contract Window
        /// </summary>
        /// <remarks>
        /// Open the contract window inside the client  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">The contract to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostUiOpenwindowContractWithHttpInfo (int? contractId, string datasource = null, string token = null);
        /// <summary>
        /// Open Information Window
        /// </summary>
        /// <remarks>
        /// Open the information window for a character, corporation or alliance inside the client  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetId">The target to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        void PostUiOpenwindowInformation (int? targetId, string datasource = null, string token = null);

        /// <summary>
        /// Open Information Window
        /// </summary>
        /// <remarks>
        /// Open the information window for a character, corporation or alliance inside the client  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetId">The target to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostUiOpenwindowInformationWithHttpInfo (int? targetId, string datasource = null, string token = null);
        /// <summary>
        /// Open Market Details
        /// </summary>
        /// <remarks>
        /// Open the market details window for a specific typeID inside the client  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">The item type to open in market window</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        void PostUiOpenwindowMarketdetails (int? typeId, string datasource = null, string token = null);

        /// <summary>
        /// Open Market Details
        /// </summary>
        /// <remarks>
        /// Open the market details window for a specific typeID inside the client  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">The item type to open in market window</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostUiOpenwindowMarketdetailsWithHttpInfo (int? typeId, string datasource = null, string token = null);
        /// <summary>
        /// Open New Mail Window
        /// </summary>
        /// <remarks>
        /// Open the New Mail window, according to settings from the request if applicable  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMail">The details of mail to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        void PostUiOpenwindowNewmail (PostUiOpenwindowNewmailNewMail newMail, string datasource = null, string token = null);

        /// <summary>
        /// Open New Mail Window
        /// </summary>
        /// <remarks>
        /// Open the New Mail window, according to settings from the request if applicable  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMail">The details of mail to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostUiOpenwindowNewmailWithHttpInfo (PostUiOpenwindowNewmailNewMail newMail, string datasource = null, string token = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Set Autopilot Waypoint
        /// </summary>
        /// <remarks>
        /// Set a solar system as autopilot waypoint  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToBeginning">Whether this solar system should be added to the beginning of all waypoints</param>
        /// <param name="clearOtherWaypoints">Whether clean other waypoints beforing adding this one</param>
        /// <param name="destinationId">The destination to travel to, can be solar system, station or structure&#39;s id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostUiAutopilotWaypointAsync (bool? addToBeginning, bool? clearOtherWaypoints, long? destinationId, string datasource = null, string token = null);

        /// <summary>
        /// Set Autopilot Waypoint
        /// </summary>
        /// <remarks>
        /// Set a solar system as autopilot waypoint  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToBeginning">Whether this solar system should be added to the beginning of all waypoints</param>
        /// <param name="clearOtherWaypoints">Whether clean other waypoints beforing adding this one</param>
        /// <param name="destinationId">The destination to travel to, can be solar system, station or structure&#39;s id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostUiAutopilotWaypointAsyncWithHttpInfo (bool? addToBeginning, bool? clearOtherWaypoints, long? destinationId, string datasource = null, string token = null);
        /// <summary>
        /// Open Contract Window
        /// </summary>
        /// <remarks>
        /// Open the contract window inside the client  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">The contract to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostUiOpenwindowContractAsync (int? contractId, string datasource = null, string token = null);

        /// <summary>
        /// Open Contract Window
        /// </summary>
        /// <remarks>
        /// Open the contract window inside the client  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">The contract to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostUiOpenwindowContractAsyncWithHttpInfo (int? contractId, string datasource = null, string token = null);
        /// <summary>
        /// Open Information Window
        /// </summary>
        /// <remarks>
        /// Open the information window for a character, corporation or alliance inside the client  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetId">The target to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostUiOpenwindowInformationAsync (int? targetId, string datasource = null, string token = null);

        /// <summary>
        /// Open Information Window
        /// </summary>
        /// <remarks>
        /// Open the information window for a character, corporation or alliance inside the client  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetId">The target to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostUiOpenwindowInformationAsyncWithHttpInfo (int? targetId, string datasource = null, string token = null);
        /// <summary>
        /// Open Market Details
        /// </summary>
        /// <remarks>
        /// Open the market details window for a specific typeID inside the client  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">The item type to open in market window</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostUiOpenwindowMarketdetailsAsync (int? typeId, string datasource = null, string token = null);

        /// <summary>
        /// Open Market Details
        /// </summary>
        /// <remarks>
        /// Open the market details window for a specific typeID inside the client  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">The item type to open in market window</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostUiOpenwindowMarketdetailsAsyncWithHttpInfo (int? typeId, string datasource = null, string token = null);
        /// <summary>
        /// Open New Mail Window
        /// </summary>
        /// <remarks>
        /// Open the New Mail window, according to settings from the request if applicable  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMail">The details of mail to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostUiOpenwindowNewmailAsync (PostUiOpenwindowNewmailNewMail newMail, string datasource = null, string token = null);

        /// <summary>
        /// Open New Mail Window
        /// </summary>
        /// <remarks>
        /// Open the New Mail window, according to settings from the request if applicable  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMail">The details of mail to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostUiOpenwindowNewmailAsyncWithHttpInfo (PostUiOpenwindowNewmailNewMail newMail, string datasource = null, string token = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserInterfaceApi : IUserInterfaceApi
    {
        private ESIClient.Dotcore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserInterfaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserInterfaceApi(String basePath)
        {
            this.Configuration = new ESIClient.Dotcore.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserInterfaceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserInterfaceApi(ESIClient.Dotcore.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ESIClient.Dotcore.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ESIClient.Dotcore.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESIClient.Dotcore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Set Autopilot Waypoint Set a solar system as autopilot waypoint  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToBeginning">Whether this solar system should be added to the beginning of all waypoints</param>
        /// <param name="clearOtherWaypoints">Whether clean other waypoints beforing adding this one</param>
        /// <param name="destinationId">The destination to travel to, can be solar system, station or structure&#39;s id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        public void PostUiAutopilotWaypoint (bool? addToBeginning, bool? clearOtherWaypoints, long? destinationId, string datasource = null, string token = null)
        {
             PostUiAutopilotWaypointWithHttpInfo(addToBeginning, clearOtherWaypoints, destinationId, datasource, token);
        }

        /// <summary>
        /// Set Autopilot Waypoint Set a solar system as autopilot waypoint  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToBeginning">Whether this solar system should be added to the beginning of all waypoints</param>
        /// <param name="clearOtherWaypoints">Whether clean other waypoints beforing adding this one</param>
        /// <param name="destinationId">The destination to travel to, can be solar system, station or structure&#39;s id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostUiAutopilotWaypointWithHttpInfo (bool? addToBeginning, bool? clearOtherWaypoints, long? destinationId, string datasource = null, string token = null)
        {
            // verify the required parameter 'addToBeginning' is set
            if (addToBeginning == null)
                throw new ApiException(400, "Missing required parameter 'addToBeginning' when calling UserInterfaceApi->PostUiAutopilotWaypoint");
            // verify the required parameter 'clearOtherWaypoints' is set
            if (clearOtherWaypoints == null)
                throw new ApiException(400, "Missing required parameter 'clearOtherWaypoints' when calling UserInterfaceApi->PostUiAutopilotWaypoint");
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling UserInterfaceApi->PostUiAutopilotWaypoint");

            var localVarPath = "./v2/ui/autopilot/waypoint/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addToBeginning != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "add_to_beginning", addToBeginning)); // query parameter
            if (clearOtherWaypoints != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clear_other_waypoints", clearOtherWaypoints)); // query parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (destinationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destination_id", destinationId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUiAutopilotWaypoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set Autopilot Waypoint Set a solar system as autopilot waypoint  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToBeginning">Whether this solar system should be added to the beginning of all waypoints</param>
        /// <param name="clearOtherWaypoints">Whether clean other waypoints beforing adding this one</param>
        /// <param name="destinationId">The destination to travel to, can be solar system, station or structure&#39;s id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostUiAutopilotWaypointAsync (bool? addToBeginning, bool? clearOtherWaypoints, long? destinationId, string datasource = null, string token = null)
        {
             await PostUiAutopilotWaypointAsyncWithHttpInfo(addToBeginning, clearOtherWaypoints, destinationId, datasource, token);

        }

        /// <summary>
        /// Set Autopilot Waypoint Set a solar system as autopilot waypoint  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addToBeginning">Whether this solar system should be added to the beginning of all waypoints</param>
        /// <param name="clearOtherWaypoints">Whether clean other waypoints beforing adding this one</param>
        /// <param name="destinationId">The destination to travel to, can be solar system, station or structure&#39;s id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostUiAutopilotWaypointAsyncWithHttpInfo (bool? addToBeginning, bool? clearOtherWaypoints, long? destinationId, string datasource = null, string token = null)
        {
            // verify the required parameter 'addToBeginning' is set
            if (addToBeginning == null)
                throw new ApiException(400, "Missing required parameter 'addToBeginning' when calling UserInterfaceApi->PostUiAutopilotWaypoint");
            // verify the required parameter 'clearOtherWaypoints' is set
            if (clearOtherWaypoints == null)
                throw new ApiException(400, "Missing required parameter 'clearOtherWaypoints' when calling UserInterfaceApi->PostUiAutopilotWaypoint");
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling UserInterfaceApi->PostUiAutopilotWaypoint");

            var localVarPath = "./v2/ui/autopilot/waypoint/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addToBeginning != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "add_to_beginning", addToBeginning)); // query parameter
            if (clearOtherWaypoints != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clear_other_waypoints", clearOtherWaypoints)); // query parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (destinationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destination_id", destinationId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUiAutopilotWaypoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Open Contract Window Open the contract window inside the client  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">The contract to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        public void PostUiOpenwindowContract (int? contractId, string datasource = null, string token = null)
        {
             PostUiOpenwindowContractWithHttpInfo(contractId, datasource, token);
        }

        /// <summary>
        /// Open Contract Window Open the contract window inside the client  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">The contract to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostUiOpenwindowContractWithHttpInfo (int? contractId, string datasource = null, string token = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling UserInterfaceApi->PostUiOpenwindowContract");

            var localVarPath = "./v1/ui/openwindow/contract/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contract_id", contractId)); // query parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUiOpenwindowContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Open Contract Window Open the contract window inside the client  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">The contract to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostUiOpenwindowContractAsync (int? contractId, string datasource = null, string token = null)
        {
             await PostUiOpenwindowContractAsyncWithHttpInfo(contractId, datasource, token);

        }

        /// <summary>
        /// Open Contract Window Open the contract window inside the client  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">The contract to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostUiOpenwindowContractAsyncWithHttpInfo (int? contractId, string datasource = null, string token = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling UserInterfaceApi->PostUiOpenwindowContract");

            var localVarPath = "./v1/ui/openwindow/contract/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contract_id", contractId)); // query parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUiOpenwindowContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Open Information Window Open the information window for a character, corporation or alliance inside the client  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetId">The target to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        public void PostUiOpenwindowInformation (int? targetId, string datasource = null, string token = null)
        {
             PostUiOpenwindowInformationWithHttpInfo(targetId, datasource, token);
        }

        /// <summary>
        /// Open Information Window Open the information window for a character, corporation or alliance inside the client  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetId">The target to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostUiOpenwindowInformationWithHttpInfo (int? targetId, string datasource = null, string token = null)
        {
            // verify the required parameter 'targetId' is set
            if (targetId == null)
                throw new ApiException(400, "Missing required parameter 'targetId' when calling UserInterfaceApi->PostUiOpenwindowInformation");

            var localVarPath = "./v1/ui/openwindow/information/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (targetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_id", targetId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUiOpenwindowInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Open Information Window Open the information window for a character, corporation or alliance inside the client  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetId">The target to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostUiOpenwindowInformationAsync (int? targetId, string datasource = null, string token = null)
        {
             await PostUiOpenwindowInformationAsyncWithHttpInfo(targetId, datasource, token);

        }

        /// <summary>
        /// Open Information Window Open the information window for a character, corporation or alliance inside the client  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetId">The target to open</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostUiOpenwindowInformationAsyncWithHttpInfo (int? targetId, string datasource = null, string token = null)
        {
            // verify the required parameter 'targetId' is set
            if (targetId == null)
                throw new ApiException(400, "Missing required parameter 'targetId' when calling UserInterfaceApi->PostUiOpenwindowInformation");

            var localVarPath = "./v1/ui/openwindow/information/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (targetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_id", targetId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUiOpenwindowInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Open Market Details Open the market details window for a specific typeID inside the client  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">The item type to open in market window</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        public void PostUiOpenwindowMarketdetails (int? typeId, string datasource = null, string token = null)
        {
             PostUiOpenwindowMarketdetailsWithHttpInfo(typeId, datasource, token);
        }

        /// <summary>
        /// Open Market Details Open the market details window for a specific typeID inside the client  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">The item type to open in market window</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostUiOpenwindowMarketdetailsWithHttpInfo (int? typeId, string datasource = null, string token = null)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling UserInterfaceApi->PostUiOpenwindowMarketdetails");

            var localVarPath = "./v1/ui/openwindow/marketdetails/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_id", typeId)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUiOpenwindowMarketdetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Open Market Details Open the market details window for a specific typeID inside the client  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">The item type to open in market window</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostUiOpenwindowMarketdetailsAsync (int? typeId, string datasource = null, string token = null)
        {
             await PostUiOpenwindowMarketdetailsAsyncWithHttpInfo(typeId, datasource, token);

        }

        /// <summary>
        /// Open Market Details Open the market details window for a specific typeID inside the client  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">The item type to open in market window</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostUiOpenwindowMarketdetailsAsyncWithHttpInfo (int? typeId, string datasource = null, string token = null)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling UserInterfaceApi->PostUiOpenwindowMarketdetails");

            var localVarPath = "./v1/ui/openwindow/marketdetails/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_id", typeId)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUiOpenwindowMarketdetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Open New Mail Window Open the New Mail window, according to settings from the request if applicable  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMail">The details of mail to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns></returns>
        public void PostUiOpenwindowNewmail (PostUiOpenwindowNewmailNewMail newMail, string datasource = null, string token = null)
        {
             PostUiOpenwindowNewmailWithHttpInfo(newMail, datasource, token);
        }

        /// <summary>
        /// Open New Mail Window Open the New Mail window, according to settings from the request if applicable  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMail">The details of mail to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostUiOpenwindowNewmailWithHttpInfo (PostUiOpenwindowNewmailNewMail newMail, string datasource = null, string token = null)
        {
            // verify the required parameter 'newMail' is set
            if (newMail == null)
                throw new ApiException(400, "Missing required parameter 'newMail' when calling UserInterfaceApi->PostUiOpenwindowNewmail");

            var localVarPath = "./v1/ui/openwindow/newmail/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (newMail != null && newMail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newMail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newMail; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUiOpenwindowNewmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Open New Mail Window Open the New Mail window, according to settings from the request if applicable  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMail">The details of mail to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostUiOpenwindowNewmailAsync (PostUiOpenwindowNewmailNewMail newMail, string datasource = null, string token = null)
        {
             await PostUiOpenwindowNewmailAsyncWithHttpInfo(newMail, datasource, token);

        }

        /// <summary>
        /// Open New Mail Window Open the New Mail window, according to settings from the request if applicable  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMail">The details of mail to create</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostUiOpenwindowNewmailAsyncWithHttpInfo (PostUiOpenwindowNewmailNewMail newMail, string datasource = null, string token = null)
        {
            // verify the required parameter 'newMail' is set
            if (newMail == null)
                throw new ApiException(400, "Missing required parameter 'newMail' when calling UserInterfaceApi->PostUiOpenwindowNewmail");

            var localVarPath = "./v1/ui/openwindow/newmail/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (newMail != null && newMail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newMail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newMail; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUiOpenwindowNewmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
