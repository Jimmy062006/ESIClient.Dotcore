/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ESIClient.Dotcore.Client;
using ESIClient.Dotcore.Model;

namespace ESIClient.Dotcore.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFactionWarfareApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Overview of a character involved in faction warfare
        /// </summary>
        /// <remarks>
        /// Statistical overview of a character involved in faction warfare  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetCharactersCharacterIdFwStatsOk</returns>
        GetCharactersCharacterIdFwStatsOk GetCharactersCharacterIdFwStats (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Overview of a character involved in faction warfare
        /// </summary>
        /// <remarks>
        /// Statistical overview of a character involved in faction warfare  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetCharactersCharacterIdFwStatsOk</returns>
        ApiResponse<GetCharactersCharacterIdFwStatsOk> GetCharactersCharacterIdFwStatsWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Overview of a corporation involved in faction warfare
        /// </summary>
        /// <remarks>
        /// Statistics about a corporation involved in faction warfare  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetCorporationsCorporationIdFwStatsOk</returns>
        GetCorporationsCorporationIdFwStatsOk GetCorporationsCorporationIdFwStats (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Overview of a corporation involved in faction warfare
        /// </summary>
        /// <remarks>
        /// Statistics about a corporation involved in faction warfare  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdFwStatsOk</returns>
        ApiResponse<GetCorporationsCorporationIdFwStatsOk> GetCorporationsCorporationIdFwStatsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// List of the top factions in faction warfare
        /// </summary>
        /// <remarks>
        /// Top 4 leaderboard of factions for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetFwLeaderboardsOk</returns>
        GetFwLeaderboardsOk GetFwLeaderboards (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// List of the top factions in faction warfare
        /// </summary>
        /// <remarks>
        /// Top 4 leaderboard of factions for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetFwLeaderboardsOk</returns>
        ApiResponse<GetFwLeaderboardsOk> GetFwLeaderboardsWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// List of the top pilots in faction warfare
        /// </summary>
        /// <remarks>
        /// Top 100 leaderboard of pilots for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetFwLeaderboardsCharactersOk</returns>
        GetFwLeaderboardsCharactersOk GetFwLeaderboardsCharacters (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// List of the top pilots in faction warfare
        /// </summary>
        /// <remarks>
        /// Top 100 leaderboard of pilots for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetFwLeaderboardsCharactersOk</returns>
        ApiResponse<GetFwLeaderboardsCharactersOk> GetFwLeaderboardsCharactersWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// List of the top corporations in faction warfare
        /// </summary>
        /// <remarks>
        /// Top 10 leaderboard of corporations for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetFwLeaderboardsCorporationsOk</returns>
        GetFwLeaderboardsCorporationsOk GetFwLeaderboardsCorporations (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// List of the top corporations in faction warfare
        /// </summary>
        /// <remarks>
        /// Top 10 leaderboard of corporations for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetFwLeaderboardsCorporationsOk</returns>
        ApiResponse<GetFwLeaderboardsCorporationsOk> GetFwLeaderboardsCorporationsWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// An overview of statistics about factions involved in faction warfare
        /// </summary>
        /// <remarks>
        /// Statistical overviews of factions involved in faction warfare  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;GetFwStats200Ok&gt;</returns>
        List<GetFwStats200Ok> GetFwStats (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// An overview of statistics about factions involved in faction warfare
        /// </summary>
        /// <remarks>
        /// Statistical overviews of factions involved in faction warfare  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;GetFwStats200Ok&gt;</returns>
        ApiResponse<List<GetFwStats200Ok>> GetFwStatsWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Ownership of faction warfare systems
        /// </summary>
        /// <remarks>
        /// An overview of the current ownership of faction warfare solar systems  - --  This route is cached for up to 1800 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/fw/systems/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;GetFwSystems200Ok&gt;</returns>
        List<GetFwSystems200Ok> GetFwSystems (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Ownership of faction warfare systems
        /// </summary>
        /// <remarks>
        /// An overview of the current ownership of faction warfare solar systems  - --  This route is cached for up to 1800 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/fw/systems/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;GetFwSystems200Ok&gt;</returns>
        ApiResponse<List<GetFwSystems200Ok>> GetFwSystemsWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Data about which NPC factions are at war
        /// </summary>
        /// <remarks>
        /// Data about which NPC factions are at war  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;GetFwWars200Ok&gt;</returns>
        List<GetFwWars200Ok> GetFwWars (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Data about which NPC factions are at war
        /// </summary>
        /// <remarks>
        /// Data about which NPC factions are at war  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;GetFwWars200Ok&gt;</returns>
        ApiResponse<List<GetFwWars200Ok>> GetFwWarsWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Overview of a character involved in faction warfare
        /// </summary>
        /// <remarks>
        /// Statistical overview of a character involved in faction warfare  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetCharactersCharacterIdFwStatsOk</returns>
        System.Threading.Tasks.Task<GetCharactersCharacterIdFwStatsOk> GetCharactersCharacterIdFwStatsAsync (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Overview of a character involved in faction warfare
        /// </summary>
        /// <remarks>
        /// Statistical overview of a character involved in faction warfare  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetCharactersCharacterIdFwStatsOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCharactersCharacterIdFwStatsOk>> GetCharactersCharacterIdFwStatsAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Overview of a corporation involved in faction warfare
        /// </summary>
        /// <remarks>
        /// Statistics about a corporation involved in faction warfare  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetCorporationsCorporationIdFwStatsOk</returns>
        System.Threading.Tasks.Task<GetCorporationsCorporationIdFwStatsOk> GetCorporationsCorporationIdFwStatsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Overview of a corporation involved in faction warfare
        /// </summary>
        /// <remarks>
        /// Statistics about a corporation involved in faction warfare  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdFwStatsOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdFwStatsOk>> GetCorporationsCorporationIdFwStatsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// List of the top factions in faction warfare
        /// </summary>
        /// <remarks>
        /// Top 4 leaderboard of factions for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetFwLeaderboardsOk</returns>
        System.Threading.Tasks.Task<GetFwLeaderboardsOk> GetFwLeaderboardsAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// List of the top factions in faction warfare
        /// </summary>
        /// <remarks>
        /// Top 4 leaderboard of factions for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetFwLeaderboardsOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFwLeaderboardsOk>> GetFwLeaderboardsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// List of the top pilots in faction warfare
        /// </summary>
        /// <remarks>
        /// Top 100 leaderboard of pilots for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetFwLeaderboardsCharactersOk</returns>
        System.Threading.Tasks.Task<GetFwLeaderboardsCharactersOk> GetFwLeaderboardsCharactersAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// List of the top pilots in faction warfare
        /// </summary>
        /// <remarks>
        /// Top 100 leaderboard of pilots for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetFwLeaderboardsCharactersOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFwLeaderboardsCharactersOk>> GetFwLeaderboardsCharactersAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// List of the top corporations in faction warfare
        /// </summary>
        /// <remarks>
        /// Top 10 leaderboard of corporations for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetFwLeaderboardsCorporationsOk</returns>
        System.Threading.Tasks.Task<GetFwLeaderboardsCorporationsOk> GetFwLeaderboardsCorporationsAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// List of the top corporations in faction warfare
        /// </summary>
        /// <remarks>
        /// Top 10 leaderboard of corporations for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetFwLeaderboardsCorporationsOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFwLeaderboardsCorporationsOk>> GetFwLeaderboardsCorporationsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// An overview of statistics about factions involved in faction warfare
        /// </summary>
        /// <remarks>
        /// Statistical overviews of factions involved in faction warfare  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;GetFwStats200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetFwStats200Ok>> GetFwStatsAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// An overview of statistics about factions involved in faction warfare
        /// </summary>
        /// <remarks>
        /// Statistical overviews of factions involved in faction warfare  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetFwStats200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetFwStats200Ok>>> GetFwStatsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Ownership of faction warfare systems
        /// </summary>
        /// <remarks>
        /// An overview of the current ownership of faction warfare solar systems  - --  This route is cached for up to 1800 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/fw/systems/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;GetFwSystems200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetFwSystems200Ok>> GetFwSystemsAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Ownership of faction warfare systems
        /// </summary>
        /// <remarks>
        /// An overview of the current ownership of faction warfare solar systems  - --  This route is cached for up to 1800 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/fw/systems/)
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetFwSystems200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetFwSystems200Ok>>> GetFwSystemsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Data about which NPC factions are at war
        /// </summary>
        /// <remarks>
        /// Data about which NPC factions are at war  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;GetFwWars200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetFwWars200Ok>> GetFwWarsAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Data about which NPC factions are at war
        /// </summary>
        /// <remarks>
        /// Data about which NPC factions are at war  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetFwWars200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetFwWars200Ok>>> GetFwWarsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FactionWarfareApi : IFactionWarfareApi
    {
        private ESIClient.Dotcore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FactionWarfareApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FactionWarfareApi(String basePath)
        {
            this.Configuration = new ESIClient.Dotcore.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FactionWarfareApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FactionWarfareApi(ESIClient.Dotcore.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ESIClient.Dotcore.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ESIClient.Dotcore.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESIClient.Dotcore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Overview of a character involved in faction warfare Statistical overview of a character involved in faction warfare  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetCharactersCharacterIdFwStatsOk</returns>
        public GetCharactersCharacterIdFwStatsOk GetCharactersCharacterIdFwStats (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetCharactersCharacterIdFwStatsOk> localVarResponse = GetCharactersCharacterIdFwStatsWithHttpInfo(characterId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Overview of a character involved in faction warfare Statistical overview of a character involved in faction warfare  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetCharactersCharacterIdFwStatsOk</returns>
        public ApiResponse< GetCharactersCharacterIdFwStatsOk > GetCharactersCharacterIdFwStatsWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling FactionWarfareApi->GetCharactersCharacterIdFwStats");

            var localVarPath = "./v1/characters/{character_id}/fw/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdFwStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCharactersCharacterIdFwStatsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetCharactersCharacterIdFwStatsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCharactersCharacterIdFwStatsOk)));
        }

        /// <summary>
        /// Overview of a character involved in faction warfare Statistical overview of a character involved in faction warfare  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetCharactersCharacterIdFwStatsOk</returns>
        public async System.Threading.Tasks.Task<GetCharactersCharacterIdFwStatsOk> GetCharactersCharacterIdFwStatsAsync (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetCharactersCharacterIdFwStatsOk> localVarResponse = await GetCharactersCharacterIdFwStatsAsyncWithHttpInfo(characterId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Overview of a character involved in faction warfare Statistical overview of a character involved in faction warfare  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetCharactersCharacterIdFwStatsOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCharactersCharacterIdFwStatsOk>> GetCharactersCharacterIdFwStatsAsyncWithHttpInfo (int? characterId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling FactionWarfareApi->GetCharactersCharacterIdFwStats");

            var localVarPath = "./v1/characters/{character_id}/fw/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdFwStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCharactersCharacterIdFwStatsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetCharactersCharacterIdFwStatsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCharactersCharacterIdFwStatsOk)));
        }

        /// <summary>
        /// Overview of a corporation involved in faction warfare Statistics about a corporation involved in faction warfare  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetCorporationsCorporationIdFwStatsOk</returns>
        public GetCorporationsCorporationIdFwStatsOk GetCorporationsCorporationIdFwStats (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetCorporationsCorporationIdFwStatsOk> localVarResponse = GetCorporationsCorporationIdFwStatsWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Overview of a corporation involved in faction warfare Statistics about a corporation involved in faction warfare  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdFwStatsOk</returns>
        public ApiResponse< GetCorporationsCorporationIdFwStatsOk > GetCorporationsCorporationIdFwStatsWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling FactionWarfareApi->GetCorporationsCorporationIdFwStats");

            var localVarPath = "./v1/corporations/{corporation_id}/fw/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdFwStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdFwStatsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetCorporationsCorporationIdFwStatsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdFwStatsOk)));
        }

        /// <summary>
        /// Overview of a corporation involved in faction warfare Statistics about a corporation involved in faction warfare  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetCorporationsCorporationIdFwStatsOk</returns>
        public async System.Threading.Tasks.Task<GetCorporationsCorporationIdFwStatsOk> GetCorporationsCorporationIdFwStatsAsync (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetCorporationsCorporationIdFwStatsOk> localVarResponse = await GetCorporationsCorporationIdFwStatsAsyncWithHttpInfo(corporationId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Overview of a corporation involved in faction warfare Statistics about a corporation involved in faction warfare  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdFwStatsOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdFwStatsOk>> GetCorporationsCorporationIdFwStatsAsyncWithHttpInfo (int? corporationId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling FactionWarfareApi->GetCorporationsCorporationIdFwStats");

            var localVarPath = "./v1/corporations/{corporation_id}/fw/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdFwStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdFwStatsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetCorporationsCorporationIdFwStatsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdFwStatsOk)));
        }

        /// <summary>
        /// List of the top factions in faction warfare Top 4 leaderboard of factions for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetFwLeaderboardsOk</returns>
        public GetFwLeaderboardsOk GetFwLeaderboards (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetFwLeaderboardsOk> localVarResponse = GetFwLeaderboardsWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of the top factions in faction warfare Top 4 leaderboard of factions for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetFwLeaderboardsOk</returns>
        public ApiResponse< GetFwLeaderboardsOk > GetFwLeaderboardsWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/fw/leaderboards/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFwLeaderboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFwLeaderboardsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetFwLeaderboardsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFwLeaderboardsOk)));
        }

        /// <summary>
        /// List of the top factions in faction warfare Top 4 leaderboard of factions for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetFwLeaderboardsOk</returns>
        public async System.Threading.Tasks.Task<GetFwLeaderboardsOk> GetFwLeaderboardsAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetFwLeaderboardsOk> localVarResponse = await GetFwLeaderboardsAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of the top factions in faction warfare Top 4 leaderboard of factions for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetFwLeaderboardsOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFwLeaderboardsOk>> GetFwLeaderboardsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/fw/leaderboards/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFwLeaderboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFwLeaderboardsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetFwLeaderboardsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFwLeaderboardsOk)));
        }

        /// <summary>
        /// List of the top pilots in faction warfare Top 100 leaderboard of pilots for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetFwLeaderboardsCharactersOk</returns>
        public GetFwLeaderboardsCharactersOk GetFwLeaderboardsCharacters (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetFwLeaderboardsCharactersOk> localVarResponse = GetFwLeaderboardsCharactersWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of the top pilots in faction warfare Top 100 leaderboard of pilots for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetFwLeaderboardsCharactersOk</returns>
        public ApiResponse< GetFwLeaderboardsCharactersOk > GetFwLeaderboardsCharactersWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/fw/leaderboards/characters/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFwLeaderboardsCharacters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFwLeaderboardsCharactersOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetFwLeaderboardsCharactersOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFwLeaderboardsCharactersOk)));
        }

        /// <summary>
        /// List of the top pilots in faction warfare Top 100 leaderboard of pilots for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetFwLeaderboardsCharactersOk</returns>
        public async System.Threading.Tasks.Task<GetFwLeaderboardsCharactersOk> GetFwLeaderboardsCharactersAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetFwLeaderboardsCharactersOk> localVarResponse = await GetFwLeaderboardsCharactersAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of the top pilots in faction warfare Top 100 leaderboard of pilots for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetFwLeaderboardsCharactersOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFwLeaderboardsCharactersOk>> GetFwLeaderboardsCharactersAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/fw/leaderboards/characters/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFwLeaderboardsCharacters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFwLeaderboardsCharactersOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetFwLeaderboardsCharactersOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFwLeaderboardsCharactersOk)));
        }

        /// <summary>
        /// List of the top corporations in faction warfare Top 10 leaderboard of corporations for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetFwLeaderboardsCorporationsOk</returns>
        public GetFwLeaderboardsCorporationsOk GetFwLeaderboardsCorporations (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetFwLeaderboardsCorporationsOk> localVarResponse = GetFwLeaderboardsCorporationsWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of the top corporations in faction warfare Top 10 leaderboard of corporations for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetFwLeaderboardsCorporationsOk</returns>
        public ApiResponse< GetFwLeaderboardsCorporationsOk > GetFwLeaderboardsCorporationsWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/fw/leaderboards/corporations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFwLeaderboardsCorporations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFwLeaderboardsCorporationsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetFwLeaderboardsCorporationsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFwLeaderboardsCorporationsOk)));
        }

        /// <summary>
        /// List of the top corporations in faction warfare Top 10 leaderboard of corporations for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetFwLeaderboardsCorporationsOk</returns>
        public async System.Threading.Tasks.Task<GetFwLeaderboardsCorporationsOk> GetFwLeaderboardsCorporationsAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetFwLeaderboardsCorporationsOk> localVarResponse = await GetFwLeaderboardsCorporationsAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of the top corporations in faction warfare Top 10 leaderboard of corporations for kills and victory points separated by total, last week and yesterday.  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetFwLeaderboardsCorporationsOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFwLeaderboardsCorporationsOk>> GetFwLeaderboardsCorporationsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/fw/leaderboards/corporations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFwLeaderboardsCorporations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFwLeaderboardsCorporationsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetFwLeaderboardsCorporationsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFwLeaderboardsCorporationsOk)));
        }

        /// <summary>
        /// An overview of statistics about factions involved in faction warfare Statistical overviews of factions involved in faction warfare  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;GetFwStats200Ok&gt;</returns>
        public List<GetFwStats200Ok> GetFwStats (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<GetFwStats200Ok>> localVarResponse = GetFwStatsWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An overview of statistics about factions involved in faction warfare Statistical overviews of factions involved in faction warfare  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;GetFwStats200Ok&gt;</returns>
        public ApiResponse< List<GetFwStats200Ok> > GetFwStatsWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/fw/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFwStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetFwStats200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetFwStats200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetFwStats200Ok>)));
        }

        /// <summary>
        /// An overview of statistics about factions involved in faction warfare Statistical overviews of factions involved in faction warfare  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;GetFwStats200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetFwStats200Ok>> GetFwStatsAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<GetFwStats200Ok>> localVarResponse = await GetFwStatsAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An overview of statistics about factions involved in faction warfare Statistical overviews of factions involved in faction warfare  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetFwStats200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetFwStats200Ok>>> GetFwStatsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/fw/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFwStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetFwStats200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetFwStats200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetFwStats200Ok>)));
        }

        /// <summary>
        /// Ownership of faction warfare systems An overview of the current ownership of faction warfare solar systems  - --  This route is cached for up to 1800 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/fw/systems/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;GetFwSystems200Ok&gt;</returns>
        public List<GetFwSystems200Ok> GetFwSystems (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<GetFwSystems200Ok>> localVarResponse = GetFwSystemsWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ownership of faction warfare systems An overview of the current ownership of faction warfare solar systems  - --  This route is cached for up to 1800 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/fw/systems/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;GetFwSystems200Ok&gt;</returns>
        public ApiResponse< List<GetFwSystems200Ok> > GetFwSystemsWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/fw/systems/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFwSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetFwSystems200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetFwSystems200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetFwSystems200Ok>)));
        }

        /// <summary>
        /// Ownership of faction warfare systems An overview of the current ownership of faction warfare solar systems  - --  This route is cached for up to 1800 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/fw/systems/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;GetFwSystems200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetFwSystems200Ok>> GetFwSystemsAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<GetFwSystems200Ok>> localVarResponse = await GetFwSystemsAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ownership of faction warfare systems An overview of the current ownership of faction warfare solar systems  - --  This route is cached for up to 1800 seconds  - -- Warning: This route has an upgrade available.  - -- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/fw/systems/)
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetFwSystems200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetFwSystems200Ok>>> GetFwSystemsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/fw/systems/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFwSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetFwSystems200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetFwSystems200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetFwSystems200Ok>)));
        }

        /// <summary>
        /// Data about which NPC factions are at war Data about which NPC factions are at war  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;GetFwWars200Ok&gt;</returns>
        public List<GetFwWars200Ok> GetFwWars (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<GetFwWars200Ok>> localVarResponse = GetFwWarsWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Data about which NPC factions are at war Data about which NPC factions are at war  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;GetFwWars200Ok&gt;</returns>
        public ApiResponse< List<GetFwWars200Ok> > GetFwWarsWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/fw/wars/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFwWars", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetFwWars200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetFwWars200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetFwWars200Ok>)));
        }

        /// <summary>
        /// Data about which NPC factions are at war Data about which NPC factions are at war  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;GetFwWars200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetFwWars200Ok>> GetFwWarsAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<GetFwWars200Ok>> localVarResponse = await GetFwWarsAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Data about which NPC factions are at war Data about which NPC factions are at war  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetFwWars200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetFwWars200Ok>>> GetFwWarsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/fw/wars/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFwWars", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetFwWars200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetFwWars200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetFwWars200Ok>)));
        }

    }
}
