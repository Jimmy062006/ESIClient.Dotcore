/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ESIClient.Dotcore.Client;
using ESIClient.Dotcore.Model;

namespace ESIClient.Dotcore.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUniverseApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get ancestries
        /// </summary>
        /// <remarks>
        /// Get all character ancestries  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>List&lt;GetUniverseAncestries200Ok&gt;</returns>
        List<GetUniverseAncestries200Ok> GetUniverseAncestries (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get ancestries
        /// </summary>
        /// <remarks>
        /// Get all character ancestries  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of List&lt;GetUniverseAncestries200Ok&gt;</returns>
        ApiResponse<List<GetUniverseAncestries200Ok>> GetUniverseAncestriesWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get asteroid belt information
        /// </summary>
        /// <remarks>
        /// Get information on an asteroid belt  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asteroidBeltId">asteroid_belt_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetUniverseAsteroidBeltsAsteroidBeltIdOk</returns>
        GetUniverseAsteroidBeltsAsteroidBeltIdOk GetUniverseAsteroidBeltsAsteroidBeltId (int? asteroidBeltId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get asteroid belt information
        /// </summary>
        /// <remarks>
        /// Get information on an asteroid belt  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asteroidBeltId">asteroid_belt_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetUniverseAsteroidBeltsAsteroidBeltIdOk</returns>
        ApiResponse<GetUniverseAsteroidBeltsAsteroidBeltIdOk> GetUniverseAsteroidBeltsAsteroidBeltIdWithHttpInfo (int? asteroidBeltId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get bloodlines
        /// </summary>
        /// <remarks>
        /// Get a list of bloodlines  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>List&lt;GetUniverseBloodlines200Ok&gt;</returns>
        List<GetUniverseBloodlines200Ok> GetUniverseBloodlines (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get bloodlines
        /// </summary>
        /// <remarks>
        /// Get a list of bloodlines  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of List&lt;GetUniverseBloodlines200Ok&gt;</returns>
        ApiResponse<List<GetUniverseBloodlines200Ok>> GetUniverseBloodlinesWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get item categories
        /// </summary>
        /// <remarks>
        /// Get a list of item categories  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetUniverseCategories (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get item categories
        /// </summary>
        /// <remarks>
        /// Get a list of item categories  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetUniverseCategoriesWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get item category information
        /// </summary>
        /// <remarks>
        /// Get information of an item category  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>GetUniverseCategoriesCategoryIdOk</returns>
        GetUniverseCategoriesCategoryIdOk GetUniverseCategoriesCategoryId (int? categoryId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get item category information
        /// </summary>
        /// <remarks>
        /// Get information of an item category  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of GetUniverseCategoriesCategoryIdOk</returns>
        ApiResponse<GetUniverseCategoriesCategoryIdOk> GetUniverseCategoriesCategoryIdWithHttpInfo (int? categoryId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get constellations
        /// </summary>
        /// <remarks>
        /// Get a list of constellations  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetUniverseConstellations (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get constellations
        /// </summary>
        /// <remarks>
        /// Get a list of constellations  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetUniverseConstellationsWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get constellation information
        /// </summary>
        /// <remarks>
        /// Get information on a constellation  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="constellationId">constellation_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>GetUniverseConstellationsConstellationIdOk</returns>
        GetUniverseConstellationsConstellationIdOk GetUniverseConstellationsConstellationId (int? constellationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get constellation information
        /// </summary>
        /// <remarks>
        /// Get information on a constellation  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="constellationId">constellation_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of GetUniverseConstellationsConstellationIdOk</returns>
        ApiResponse<GetUniverseConstellationsConstellationIdOk> GetUniverseConstellationsConstellationIdWithHttpInfo (int? constellationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get factions
        /// </summary>
        /// <remarks>
        /// Get a list of factions  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>List&lt;GetUniverseFactions200Ok&gt;</returns>
        List<GetUniverseFactions200Ok> GetUniverseFactions (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get factions
        /// </summary>
        /// <remarks>
        /// Get a list of factions  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of List&lt;GetUniverseFactions200Ok&gt;</returns>
        ApiResponse<List<GetUniverseFactions200Ok>> GetUniverseFactionsWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get graphics
        /// </summary>
        /// <remarks>
        /// Get a list of graphics  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetUniverseGraphics (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get graphics
        /// </summary>
        /// <remarks>
        /// Get a list of graphics  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetUniverseGraphicsWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get graphic information
        /// </summary>
        /// <remarks>
        /// Get information on a graphic  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graphicId">graphic_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetUniverseGraphicsGraphicIdOk</returns>
        GetUniverseGraphicsGraphicIdOk GetUniverseGraphicsGraphicId (int? graphicId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get graphic information
        /// </summary>
        /// <remarks>
        /// Get information on a graphic  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graphicId">graphic_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetUniverseGraphicsGraphicIdOk</returns>
        ApiResponse<GetUniverseGraphicsGraphicIdOk> GetUniverseGraphicsGraphicIdWithHttpInfo (int? graphicId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get item groups
        /// </summary>
        /// <remarks>
        /// Get a list of item groups  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetUniverseGroups (string datasource = null, string ifNoneMatch = null, int? page = null);

        /// <summary>
        /// Get item groups
        /// </summary>
        /// <remarks>
        /// Get a list of item groups  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetUniverseGroupsWithHttpInfo (string datasource = null, string ifNoneMatch = null, int? page = null);
        /// <summary>
        /// Get item group information
        /// </summary>
        /// <remarks>
        /// Get information on an item group  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>GetUniverseGroupsGroupIdOk</returns>
        GetUniverseGroupsGroupIdOk GetUniverseGroupsGroupId (int? groupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get item group information
        /// </summary>
        /// <remarks>
        /// Get information on an item group  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of GetUniverseGroupsGroupIdOk</returns>
        ApiResponse<GetUniverseGroupsGroupIdOk> GetUniverseGroupsGroupIdWithHttpInfo (int? groupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get moon information
        /// </summary>
        /// <remarks>
        /// Get information on a moon  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moonId">moon_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetUniverseMoonsMoonIdOk</returns>
        GetUniverseMoonsMoonIdOk GetUniverseMoonsMoonId (int? moonId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get moon information
        /// </summary>
        /// <remarks>
        /// Get information on a moon  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moonId">moon_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetUniverseMoonsMoonIdOk</returns>
        ApiResponse<GetUniverseMoonsMoonIdOk> GetUniverseMoonsMoonIdWithHttpInfo (int? moonId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get planet information
        /// </summary>
        /// <remarks>
        /// Get information on a planet  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planetId">planet_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetUniversePlanetsPlanetIdOk</returns>
        GetUniversePlanetsPlanetIdOk GetUniversePlanetsPlanetId (int? planetId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get planet information
        /// </summary>
        /// <remarks>
        /// Get information on a planet  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planetId">planet_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetUniversePlanetsPlanetIdOk</returns>
        ApiResponse<GetUniversePlanetsPlanetIdOk> GetUniversePlanetsPlanetIdWithHttpInfo (int? planetId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get character races
        /// </summary>
        /// <remarks>
        /// Get a list of character races  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>List&lt;GetUniverseRaces200Ok&gt;</returns>
        List<GetUniverseRaces200Ok> GetUniverseRaces (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get character races
        /// </summary>
        /// <remarks>
        /// Get a list of character races  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of List&lt;GetUniverseRaces200Ok&gt;</returns>
        ApiResponse<List<GetUniverseRaces200Ok>> GetUniverseRacesWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get regions
        /// </summary>
        /// <remarks>
        /// Get a list of regions  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetUniverseRegions (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get regions
        /// </summary>
        /// <remarks>
        /// Get a list of regions  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetUniverseRegionsWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get region information
        /// </summary>
        /// <remarks>
        /// Get information on a region  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">region_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>GetUniverseRegionsRegionIdOk</returns>
        GetUniverseRegionsRegionIdOk GetUniverseRegionsRegionId (int? regionId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get region information
        /// </summary>
        /// <remarks>
        /// Get information on a region  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">region_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of GetUniverseRegionsRegionIdOk</returns>
        ApiResponse<GetUniverseRegionsRegionIdOk> GetUniverseRegionsRegionIdWithHttpInfo (int? regionId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get stargate information
        /// </summary>
        /// <remarks>
        /// Get information on a stargate  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stargateId">stargate_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetUniverseStargatesStargateIdOk</returns>
        GetUniverseStargatesStargateIdOk GetUniverseStargatesStargateId (int? stargateId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get stargate information
        /// </summary>
        /// <remarks>
        /// Get information on a stargate  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stargateId">stargate_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetUniverseStargatesStargateIdOk</returns>
        ApiResponse<GetUniverseStargatesStargateIdOk> GetUniverseStargatesStargateIdWithHttpInfo (int? stargateId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get star information
        /// </summary>
        /// <remarks>
        /// Get information on a star  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="starId">star_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetUniverseStarsStarIdOk</returns>
        GetUniverseStarsStarIdOk GetUniverseStarsStarId (int? starId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get star information
        /// </summary>
        /// <remarks>
        /// Get information on a star  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="starId">star_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetUniverseStarsStarIdOk</returns>
        ApiResponse<GetUniverseStarsStarIdOk> GetUniverseStarsStarIdWithHttpInfo (int? starId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get station information
        /// </summary>
        /// <remarks>
        /// Get information on a station  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">station_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetUniverseStationsStationIdOk</returns>
        GetUniverseStationsStationIdOk GetUniverseStationsStationId (int? stationId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get station information
        /// </summary>
        /// <remarks>
        /// Get information on a station  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">station_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetUniverseStationsStationIdOk</returns>
        ApiResponse<GetUniverseStationsStationIdOk> GetUniverseStationsStationIdWithHttpInfo (int? stationId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// List all public structures
        /// </summary>
        /// <remarks>
        /// List all public structures  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;long?&gt;</returns>
        List<long?> GetUniverseStructures (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// List all public structures
        /// </summary>
        /// <remarks>
        /// List all public structures  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;long?&gt;</returns>
        ApiResponse<List<long?>> GetUniverseStructuresWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get structure information
        /// </summary>
        /// <remarks>
        /// Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetUniverseStructuresStructureIdOk</returns>
        GetUniverseStructuresStructureIdOk GetUniverseStructuresStructureId (long? structureId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get structure information
        /// </summary>
        /// <remarks>
        /// Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetUniverseStructuresStructureIdOk</returns>
        ApiResponse<GetUniverseStructuresStructureIdOk> GetUniverseStructuresStructureIdWithHttpInfo (long? structureId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get system jumps
        /// </summary>
        /// <remarks>
        /// Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;GetUniverseSystemJumps200Ok&gt;</returns>
        List<GetUniverseSystemJumps200Ok> GetUniverseSystemJumps (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get system jumps
        /// </summary>
        /// <remarks>
        /// Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;GetUniverseSystemJumps200Ok&gt;</returns>
        ApiResponse<List<GetUniverseSystemJumps200Ok>> GetUniverseSystemJumpsWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get system kills
        /// </summary>
        /// <remarks>
        /// Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;GetUniverseSystemKills200Ok&gt;</returns>
        List<GetUniverseSystemKills200Ok> GetUniverseSystemKills (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get system kills
        /// </summary>
        /// <remarks>
        /// Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;GetUniverseSystemKills200Ok&gt;</returns>
        ApiResponse<List<GetUniverseSystemKills200Ok>> GetUniverseSystemKillsWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get solar systems
        /// </summary>
        /// <remarks>
        /// Get a list of solar systems  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetUniverseSystems (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get solar systems
        /// </summary>
        /// <remarks>
        /// Get a list of solar systems  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetUniverseSystemsWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get solar system information
        /// </summary>
        /// <remarks>
        /// Get information on a solar system  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">system_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>GetUniverseSystemsSystemIdOk</returns>
        GetUniverseSystemsSystemIdOk GetUniverseSystemsSystemId (int? systemId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get solar system information
        /// </summary>
        /// <remarks>
        /// Get information on a solar system  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">system_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of GetUniverseSystemsSystemIdOk</returns>
        ApiResponse<GetUniverseSystemsSystemIdOk> GetUniverseSystemsSystemIdWithHttpInfo (int? systemId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get types
        /// </summary>
        /// <remarks>
        /// Get a list of type ids  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetUniverseTypes (string datasource = null, string ifNoneMatch = null, int? page = null);

        /// <summary>
        /// Get types
        /// </summary>
        /// <remarks>
        /// Get a list of type ids  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetUniverseTypesWithHttpInfo (string datasource = null, string ifNoneMatch = null, int? page = null);
        /// <summary>
        /// Get type information
        /// </summary>
        /// <remarks>
        /// Get information on a type  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>GetUniverseTypesTypeIdOk</returns>
        GetUniverseTypesTypeIdOk GetUniverseTypesTypeId (int? typeId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get type information
        /// </summary>
        /// <remarks>
        /// Get information on a type  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of GetUniverseTypesTypeIdOk</returns>
        ApiResponse<GetUniverseTypesTypeIdOk> GetUniverseTypesTypeIdWithHttpInfo (int? typeId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Bulk names to IDs
        /// </summary>
        /// <remarks>
        /// Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours.  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="names">The names to resolve</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>PostUniverseIdsOk</returns>
        PostUniverseIdsOk PostUniverseIds (List<string> names, string acceptLanguage = null, string datasource = null, string language = null);

        /// <summary>
        /// Bulk names to IDs
        /// </summary>
        /// <remarks>
        /// Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours.  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="names">The names to resolve</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of PostUniverseIdsOk</returns>
        ApiResponse<PostUniverseIdsOk> PostUniverseIdsWithHttpInfo (List<string> names, string acceptLanguage = null, string datasource = null, string language = null);
        /// <summary>
        /// Get names and categories for a set of ID&#39;s
        /// </summary>
        /// <remarks>
        /// Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;PostUniverseNames200Ok&gt;</returns>
        List<PostUniverseNames200Ok> PostUniverseNames (List<int?> ids, string datasource = null);

        /// <summary>
        /// Get names and categories for a set of ID&#39;s
        /// </summary>
        /// <remarks>
        /// Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;PostUniverseNames200Ok&gt;</returns>
        ApiResponse<List<PostUniverseNames200Ok>> PostUniverseNamesWithHttpInfo (List<int?> ids, string datasource = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get ancestries
        /// </summary>
        /// <remarks>
        /// Get all character ancestries  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of List&lt;GetUniverseAncestries200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetUniverseAncestries200Ok>> GetUniverseAncestriesAsync (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get ancestries
        /// </summary>
        /// <remarks>
        /// Get all character ancestries  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (List&lt;GetUniverseAncestries200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetUniverseAncestries200Ok>>> GetUniverseAncestriesAsyncWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get asteroid belt information
        /// </summary>
        /// <remarks>
        /// Get information on an asteroid belt  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asteroidBeltId">asteroid_belt_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetUniverseAsteroidBeltsAsteroidBeltIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseAsteroidBeltsAsteroidBeltIdOk> GetUniverseAsteroidBeltsAsteroidBeltIdAsync (int? asteroidBeltId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get asteroid belt information
        /// </summary>
        /// <remarks>
        /// Get information on an asteroid belt  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asteroidBeltId">asteroid_belt_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetUniverseAsteroidBeltsAsteroidBeltIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseAsteroidBeltsAsteroidBeltIdOk>> GetUniverseAsteroidBeltsAsteroidBeltIdAsyncWithHttpInfo (int? asteroidBeltId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get bloodlines
        /// </summary>
        /// <remarks>
        /// Get a list of bloodlines  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of List&lt;GetUniverseBloodlines200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetUniverseBloodlines200Ok>> GetUniverseBloodlinesAsync (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get bloodlines
        /// </summary>
        /// <remarks>
        /// Get a list of bloodlines  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (List&lt;GetUniverseBloodlines200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetUniverseBloodlines200Ok>>> GetUniverseBloodlinesAsyncWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get item categories
        /// </summary>
        /// <remarks>
        /// Get a list of item categories  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetUniverseCategoriesAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get item categories
        /// </summary>
        /// <remarks>
        /// Get a list of item categories  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseCategoriesAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get item category information
        /// </summary>
        /// <remarks>
        /// Get information of an item category  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of GetUniverseCategoriesCategoryIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseCategoriesCategoryIdOk> GetUniverseCategoriesCategoryIdAsync (int? categoryId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get item category information
        /// </summary>
        /// <remarks>
        /// Get information of an item category  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (GetUniverseCategoriesCategoryIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseCategoriesCategoryIdOk>> GetUniverseCategoriesCategoryIdAsyncWithHttpInfo (int? categoryId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get constellations
        /// </summary>
        /// <remarks>
        /// Get a list of constellations  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetUniverseConstellationsAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get constellations
        /// </summary>
        /// <remarks>
        /// Get a list of constellations  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseConstellationsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get constellation information
        /// </summary>
        /// <remarks>
        /// Get information on a constellation  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="constellationId">constellation_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of GetUniverseConstellationsConstellationIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseConstellationsConstellationIdOk> GetUniverseConstellationsConstellationIdAsync (int? constellationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get constellation information
        /// </summary>
        /// <remarks>
        /// Get information on a constellation  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="constellationId">constellation_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (GetUniverseConstellationsConstellationIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseConstellationsConstellationIdOk>> GetUniverseConstellationsConstellationIdAsyncWithHttpInfo (int? constellationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get factions
        /// </summary>
        /// <remarks>
        /// Get a list of factions  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of List&lt;GetUniverseFactions200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetUniverseFactions200Ok>> GetUniverseFactionsAsync (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get factions
        /// </summary>
        /// <remarks>
        /// Get a list of factions  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (List&lt;GetUniverseFactions200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetUniverseFactions200Ok>>> GetUniverseFactionsAsyncWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get graphics
        /// </summary>
        /// <remarks>
        /// Get a list of graphics  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetUniverseGraphicsAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get graphics
        /// </summary>
        /// <remarks>
        /// Get a list of graphics  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseGraphicsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get graphic information
        /// </summary>
        /// <remarks>
        /// Get information on a graphic  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graphicId">graphic_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetUniverseGraphicsGraphicIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseGraphicsGraphicIdOk> GetUniverseGraphicsGraphicIdAsync (int? graphicId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get graphic information
        /// </summary>
        /// <remarks>
        /// Get information on a graphic  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graphicId">graphic_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetUniverseGraphicsGraphicIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseGraphicsGraphicIdOk>> GetUniverseGraphicsGraphicIdAsyncWithHttpInfo (int? graphicId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get item groups
        /// </summary>
        /// <remarks>
        /// Get a list of item groups  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetUniverseGroupsAsync (string datasource = null, string ifNoneMatch = null, int? page = null);

        /// <summary>
        /// Get item groups
        /// </summary>
        /// <remarks>
        /// Get a list of item groups  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseGroupsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null, int? page = null);
        /// <summary>
        /// Get item group information
        /// </summary>
        /// <remarks>
        /// Get information on an item group  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of GetUniverseGroupsGroupIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseGroupsGroupIdOk> GetUniverseGroupsGroupIdAsync (int? groupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get item group information
        /// </summary>
        /// <remarks>
        /// Get information on an item group  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (GetUniverseGroupsGroupIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseGroupsGroupIdOk>> GetUniverseGroupsGroupIdAsyncWithHttpInfo (int? groupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get moon information
        /// </summary>
        /// <remarks>
        /// Get information on a moon  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moonId">moon_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetUniverseMoonsMoonIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseMoonsMoonIdOk> GetUniverseMoonsMoonIdAsync (int? moonId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get moon information
        /// </summary>
        /// <remarks>
        /// Get information on a moon  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moonId">moon_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetUniverseMoonsMoonIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseMoonsMoonIdOk>> GetUniverseMoonsMoonIdAsyncWithHttpInfo (int? moonId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get planet information
        /// </summary>
        /// <remarks>
        /// Get information on a planet  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planetId">planet_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetUniversePlanetsPlanetIdOk</returns>
        System.Threading.Tasks.Task<GetUniversePlanetsPlanetIdOk> GetUniversePlanetsPlanetIdAsync (int? planetId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get planet information
        /// </summary>
        /// <remarks>
        /// Get information on a planet  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planetId">planet_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetUniversePlanetsPlanetIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniversePlanetsPlanetIdOk>> GetUniversePlanetsPlanetIdAsyncWithHttpInfo (int? planetId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get character races
        /// </summary>
        /// <remarks>
        /// Get a list of character races  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of List&lt;GetUniverseRaces200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetUniverseRaces200Ok>> GetUniverseRacesAsync (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get character races
        /// </summary>
        /// <remarks>
        /// Get a list of character races  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (List&lt;GetUniverseRaces200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetUniverseRaces200Ok>>> GetUniverseRacesAsyncWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get regions
        /// </summary>
        /// <remarks>
        /// Get a list of regions  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetUniverseRegionsAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get regions
        /// </summary>
        /// <remarks>
        /// Get a list of regions  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseRegionsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get region information
        /// </summary>
        /// <remarks>
        /// Get information on a region  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">region_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of GetUniverseRegionsRegionIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseRegionsRegionIdOk> GetUniverseRegionsRegionIdAsync (int? regionId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get region information
        /// </summary>
        /// <remarks>
        /// Get information on a region  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">region_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (GetUniverseRegionsRegionIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseRegionsRegionIdOk>> GetUniverseRegionsRegionIdAsyncWithHttpInfo (int? regionId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get stargate information
        /// </summary>
        /// <remarks>
        /// Get information on a stargate  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stargateId">stargate_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetUniverseStargatesStargateIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseStargatesStargateIdOk> GetUniverseStargatesStargateIdAsync (int? stargateId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get stargate information
        /// </summary>
        /// <remarks>
        /// Get information on a stargate  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stargateId">stargate_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetUniverseStargatesStargateIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseStargatesStargateIdOk>> GetUniverseStargatesStargateIdAsyncWithHttpInfo (int? stargateId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get star information
        /// </summary>
        /// <remarks>
        /// Get information on a star  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="starId">star_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetUniverseStarsStarIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseStarsStarIdOk> GetUniverseStarsStarIdAsync (int? starId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get star information
        /// </summary>
        /// <remarks>
        /// Get information on a star  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="starId">star_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetUniverseStarsStarIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseStarsStarIdOk>> GetUniverseStarsStarIdAsyncWithHttpInfo (int? starId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get station information
        /// </summary>
        /// <remarks>
        /// Get information on a station  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">station_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetUniverseStationsStationIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseStationsStationIdOk> GetUniverseStationsStationIdAsync (int? stationId, string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get station information
        /// </summary>
        /// <remarks>
        /// Get information on a station  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">station_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetUniverseStationsStationIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseStationsStationIdOk>> GetUniverseStationsStationIdAsyncWithHttpInfo (int? stationId, string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// List all public structures
        /// </summary>
        /// <remarks>
        /// List all public structures  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;long?&gt;</returns>
        System.Threading.Tasks.Task<List<long?>> GetUniverseStructuresAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// List all public structures
        /// </summary>
        /// <remarks>
        /// List all public structures  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;long?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<long?>>> GetUniverseStructuresAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get structure information
        /// </summary>
        /// <remarks>
        /// Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetUniverseStructuresStructureIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseStructuresStructureIdOk> GetUniverseStructuresStructureIdAsync (long? structureId, string datasource = null, string ifNoneMatch = null, string token = null);

        /// <summary>
        /// Get structure information
        /// </summary>
        /// <remarks>
        /// Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetUniverseStructuresStructureIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseStructuresStructureIdOk>> GetUniverseStructuresStructureIdAsyncWithHttpInfo (long? structureId, string datasource = null, string ifNoneMatch = null, string token = null);
        /// <summary>
        /// Get system jumps
        /// </summary>
        /// <remarks>
        /// Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;GetUniverseSystemJumps200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetUniverseSystemJumps200Ok>> GetUniverseSystemJumpsAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get system jumps
        /// </summary>
        /// <remarks>
        /// Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetUniverseSystemJumps200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetUniverseSystemJumps200Ok>>> GetUniverseSystemJumpsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get system kills
        /// </summary>
        /// <remarks>
        /// Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;GetUniverseSystemKills200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetUniverseSystemKills200Ok>> GetUniverseSystemKillsAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get system kills
        /// </summary>
        /// <remarks>
        /// Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetUniverseSystemKills200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetUniverseSystemKills200Ok>>> GetUniverseSystemKillsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get solar systems
        /// </summary>
        /// <remarks>
        /// Get a list of solar systems  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetUniverseSystemsAsync (string datasource = null, string ifNoneMatch = null);

        /// <summary>
        /// Get solar systems
        /// </summary>
        /// <remarks>
        /// Get a list of solar systems  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseSystemsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null);
        /// <summary>
        /// Get solar system information
        /// </summary>
        /// <remarks>
        /// Get information on a solar system  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">system_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of GetUniverseSystemsSystemIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseSystemsSystemIdOk> GetUniverseSystemsSystemIdAsync (int? systemId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get solar system information
        /// </summary>
        /// <remarks>
        /// Get information on a solar system  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">system_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (GetUniverseSystemsSystemIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseSystemsSystemIdOk>> GetUniverseSystemsSystemIdAsyncWithHttpInfo (int? systemId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Get types
        /// </summary>
        /// <remarks>
        /// Get a list of type ids  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetUniverseTypesAsync (string datasource = null, string ifNoneMatch = null, int? page = null);

        /// <summary>
        /// Get types
        /// </summary>
        /// <remarks>
        /// Get a list of type ids  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseTypesAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null, int? page = null);
        /// <summary>
        /// Get type information
        /// </summary>
        /// <remarks>
        /// Get information on a type  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of GetUniverseTypesTypeIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseTypesTypeIdOk> GetUniverseTypesTypeIdAsync (int? typeId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);

        /// <summary>
        /// Get type information
        /// </summary>
        /// <remarks>
        /// Get information on a type  - --  This route expires daily at 11:05
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (GetUniverseTypesTypeIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseTypesTypeIdOk>> GetUniverseTypesTypeIdAsyncWithHttpInfo (int? typeId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null);
        /// <summary>
        /// Bulk names to IDs
        /// </summary>
        /// <remarks>
        /// Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours.  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="names">The names to resolve</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of PostUniverseIdsOk</returns>
        System.Threading.Tasks.Task<PostUniverseIdsOk> PostUniverseIdsAsync (List<string> names, string acceptLanguage = null, string datasource = null, string language = null);

        /// <summary>
        /// Bulk names to IDs
        /// </summary>
        /// <remarks>
        /// Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours.  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="names">The names to resolve</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (PostUniverseIdsOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostUniverseIdsOk>> PostUniverseIdsAsyncWithHttpInfo (List<string> names, string acceptLanguage = null, string datasource = null, string language = null);
        /// <summary>
        /// Get names and categories for a set of ID&#39;s
        /// </summary>
        /// <remarks>
        /// Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;PostUniverseNames200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<PostUniverseNames200Ok>> PostUniverseNamesAsync (List<int?> ids, string datasource = null);

        /// <summary>
        /// Get names and categories for a set of ID&#39;s
        /// </summary>
        /// <remarks>
        /// Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - -- 
        /// </remarks>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;PostUniverseNames200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PostUniverseNames200Ok>>> PostUniverseNamesAsyncWithHttpInfo (List<int?> ids, string datasource = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UniverseApi : IUniverseApi
    {
        private ESIClient.Dotcore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UniverseApi(String basePath)
        {
            this.Configuration = new ESIClient.Dotcore.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UniverseApi(ESIClient.Dotcore.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ESIClient.Dotcore.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESIClient.Dotcore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ESIClient.Dotcore.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESIClient.Dotcore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get ancestries Get all character ancestries  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>List&lt;GetUniverseAncestries200Ok&gt;</returns>
        public List<GetUniverseAncestries200Ok> GetUniverseAncestries (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<List<GetUniverseAncestries200Ok>> localVarResponse = GetUniverseAncestriesWithHttpInfo(acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ancestries Get all character ancestries  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of List&lt;GetUniverseAncestries200Ok&gt;</returns>
        public ApiResponse< List<GetUniverseAncestries200Ok> > GetUniverseAncestriesWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {

            var localVarPath = "./v1/universe/ancestries/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseAncestries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetUniverseAncestries200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetUniverseAncestries200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetUniverseAncestries200Ok>)));
        }

        /// <summary>
        /// Get ancestries Get all character ancestries  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of List&lt;GetUniverseAncestries200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetUniverseAncestries200Ok>> GetUniverseAncestriesAsync (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<List<GetUniverseAncestries200Ok>> localVarResponse = await GetUniverseAncestriesAsyncWithHttpInfo(acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ancestries Get all character ancestries  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (List&lt;GetUniverseAncestries200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetUniverseAncestries200Ok>>> GetUniverseAncestriesAsyncWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {

            var localVarPath = "./v1/universe/ancestries/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseAncestries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetUniverseAncestries200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetUniverseAncestries200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetUniverseAncestries200Ok>)));
        }

        /// <summary>
        /// Get asteroid belt information Get information on an asteroid belt  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asteroidBeltId">asteroid_belt_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetUniverseAsteroidBeltsAsteroidBeltIdOk</returns>
        public GetUniverseAsteroidBeltsAsteroidBeltIdOk GetUniverseAsteroidBeltsAsteroidBeltId (int? asteroidBeltId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetUniverseAsteroidBeltsAsteroidBeltIdOk> localVarResponse = GetUniverseAsteroidBeltsAsteroidBeltIdWithHttpInfo(asteroidBeltId, datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get asteroid belt information Get information on an asteroid belt  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asteroidBeltId">asteroid_belt_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetUniverseAsteroidBeltsAsteroidBeltIdOk</returns>
        public ApiResponse< GetUniverseAsteroidBeltsAsteroidBeltIdOk > GetUniverseAsteroidBeltsAsteroidBeltIdWithHttpInfo (int? asteroidBeltId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'asteroidBeltId' is set
            if (asteroidBeltId == null)
                throw new ApiException(400, "Missing required parameter 'asteroidBeltId' when calling UniverseApi->GetUniverseAsteroidBeltsAsteroidBeltId");

            var localVarPath = "./v1/universe/asteroid_belts/{asteroid_belt_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asteroidBeltId != null) localVarPathParams.Add("asteroid_belt_id", this.Configuration.ApiClient.ParameterToString(asteroidBeltId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseAsteroidBeltsAsteroidBeltId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseAsteroidBeltsAsteroidBeltIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseAsteroidBeltsAsteroidBeltIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseAsteroidBeltsAsteroidBeltIdOk)));
        }

        /// <summary>
        /// Get asteroid belt information Get information on an asteroid belt  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asteroidBeltId">asteroid_belt_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetUniverseAsteroidBeltsAsteroidBeltIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseAsteroidBeltsAsteroidBeltIdOk> GetUniverseAsteroidBeltsAsteroidBeltIdAsync (int? asteroidBeltId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetUniverseAsteroidBeltsAsteroidBeltIdOk> localVarResponse = await GetUniverseAsteroidBeltsAsteroidBeltIdAsyncWithHttpInfo(asteroidBeltId, datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get asteroid belt information Get information on an asteroid belt  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asteroidBeltId">asteroid_belt_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetUniverseAsteroidBeltsAsteroidBeltIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseAsteroidBeltsAsteroidBeltIdOk>> GetUniverseAsteroidBeltsAsteroidBeltIdAsyncWithHttpInfo (int? asteroidBeltId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'asteroidBeltId' is set
            if (asteroidBeltId == null)
                throw new ApiException(400, "Missing required parameter 'asteroidBeltId' when calling UniverseApi->GetUniverseAsteroidBeltsAsteroidBeltId");

            var localVarPath = "./v1/universe/asteroid_belts/{asteroid_belt_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asteroidBeltId != null) localVarPathParams.Add("asteroid_belt_id", this.Configuration.ApiClient.ParameterToString(asteroidBeltId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseAsteroidBeltsAsteroidBeltId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseAsteroidBeltsAsteroidBeltIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseAsteroidBeltsAsteroidBeltIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseAsteroidBeltsAsteroidBeltIdOk)));
        }

        /// <summary>
        /// Get bloodlines Get a list of bloodlines  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>List&lt;GetUniverseBloodlines200Ok&gt;</returns>
        public List<GetUniverseBloodlines200Ok> GetUniverseBloodlines (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<List<GetUniverseBloodlines200Ok>> localVarResponse = GetUniverseBloodlinesWithHttpInfo(acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get bloodlines Get a list of bloodlines  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of List&lt;GetUniverseBloodlines200Ok&gt;</returns>
        public ApiResponse< List<GetUniverseBloodlines200Ok> > GetUniverseBloodlinesWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {

            var localVarPath = "./v1/universe/bloodlines/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseBloodlines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetUniverseBloodlines200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetUniverseBloodlines200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetUniverseBloodlines200Ok>)));
        }

        /// <summary>
        /// Get bloodlines Get a list of bloodlines  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of List&lt;GetUniverseBloodlines200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetUniverseBloodlines200Ok>> GetUniverseBloodlinesAsync (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<List<GetUniverseBloodlines200Ok>> localVarResponse = await GetUniverseBloodlinesAsyncWithHttpInfo(acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get bloodlines Get a list of bloodlines  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (List&lt;GetUniverseBloodlines200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetUniverseBloodlines200Ok>>> GetUniverseBloodlinesAsyncWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {

            var localVarPath = "./v1/universe/bloodlines/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseBloodlines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetUniverseBloodlines200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetUniverseBloodlines200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetUniverseBloodlines200Ok>)));
        }

        /// <summary>
        /// Get item categories Get a list of item categories  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetUniverseCategories (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetUniverseCategoriesWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get item categories Get a list of item categories  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetUniverseCategoriesWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/universe/categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get item categories Get a list of item categories  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetUniverseCategoriesAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetUniverseCategoriesAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get item categories Get a list of item categories  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseCategoriesAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/universe/categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get item category information Get information of an item category  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>GetUniverseCategoriesCategoryIdOk</returns>
        public GetUniverseCategoriesCategoryIdOk GetUniverseCategoriesCategoryId (int? categoryId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<GetUniverseCategoriesCategoryIdOk> localVarResponse = GetUniverseCategoriesCategoryIdWithHttpInfo(categoryId, acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get item category information Get information of an item category  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of GetUniverseCategoriesCategoryIdOk</returns>
        public ApiResponse< GetUniverseCategoriesCategoryIdOk > GetUniverseCategoriesCategoryIdWithHttpInfo (int? categoryId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling UniverseApi->GetUniverseCategoriesCategoryId");

            var localVarPath = "./v1/universe/categories/{category_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarPathParams.Add("category_id", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseCategoriesCategoryId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseCategoriesCategoryIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseCategoriesCategoryIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseCategoriesCategoryIdOk)));
        }

        /// <summary>
        /// Get item category information Get information of an item category  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of GetUniverseCategoriesCategoryIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseCategoriesCategoryIdOk> GetUniverseCategoriesCategoryIdAsync (int? categoryId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<GetUniverseCategoriesCategoryIdOk> localVarResponse = await GetUniverseCategoriesCategoryIdAsyncWithHttpInfo(categoryId, acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get item category information Get information of an item category  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (GetUniverseCategoriesCategoryIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseCategoriesCategoryIdOk>> GetUniverseCategoriesCategoryIdAsyncWithHttpInfo (int? categoryId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling UniverseApi->GetUniverseCategoriesCategoryId");

            var localVarPath = "./v1/universe/categories/{category_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarPathParams.Add("category_id", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseCategoriesCategoryId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseCategoriesCategoryIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseCategoriesCategoryIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseCategoriesCategoryIdOk)));
        }

        /// <summary>
        /// Get constellations Get a list of constellations  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetUniverseConstellations (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetUniverseConstellationsWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get constellations Get a list of constellations  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetUniverseConstellationsWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/universe/constellations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseConstellations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get constellations Get a list of constellations  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetUniverseConstellationsAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetUniverseConstellationsAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get constellations Get a list of constellations  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseConstellationsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/universe/constellations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseConstellations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get constellation information Get information on a constellation  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="constellationId">constellation_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>GetUniverseConstellationsConstellationIdOk</returns>
        public GetUniverseConstellationsConstellationIdOk GetUniverseConstellationsConstellationId (int? constellationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<GetUniverseConstellationsConstellationIdOk> localVarResponse = GetUniverseConstellationsConstellationIdWithHttpInfo(constellationId, acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get constellation information Get information on a constellation  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="constellationId">constellation_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of GetUniverseConstellationsConstellationIdOk</returns>
        public ApiResponse< GetUniverseConstellationsConstellationIdOk > GetUniverseConstellationsConstellationIdWithHttpInfo (int? constellationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
            // verify the required parameter 'constellationId' is set
            if (constellationId == null)
                throw new ApiException(400, "Missing required parameter 'constellationId' when calling UniverseApi->GetUniverseConstellationsConstellationId");

            var localVarPath = "./v1/universe/constellations/{constellation_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (constellationId != null) localVarPathParams.Add("constellation_id", this.Configuration.ApiClient.ParameterToString(constellationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseConstellationsConstellationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseConstellationsConstellationIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseConstellationsConstellationIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseConstellationsConstellationIdOk)));
        }

        /// <summary>
        /// Get constellation information Get information on a constellation  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="constellationId">constellation_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of GetUniverseConstellationsConstellationIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseConstellationsConstellationIdOk> GetUniverseConstellationsConstellationIdAsync (int? constellationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<GetUniverseConstellationsConstellationIdOk> localVarResponse = await GetUniverseConstellationsConstellationIdAsyncWithHttpInfo(constellationId, acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get constellation information Get information on a constellation  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="constellationId">constellation_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (GetUniverseConstellationsConstellationIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseConstellationsConstellationIdOk>> GetUniverseConstellationsConstellationIdAsyncWithHttpInfo (int? constellationId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
            // verify the required parameter 'constellationId' is set
            if (constellationId == null)
                throw new ApiException(400, "Missing required parameter 'constellationId' when calling UniverseApi->GetUniverseConstellationsConstellationId");

            var localVarPath = "./v1/universe/constellations/{constellation_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (constellationId != null) localVarPathParams.Add("constellation_id", this.Configuration.ApiClient.ParameterToString(constellationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseConstellationsConstellationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseConstellationsConstellationIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseConstellationsConstellationIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseConstellationsConstellationIdOk)));
        }

        /// <summary>
        /// Get factions Get a list of factions  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>List&lt;GetUniverseFactions200Ok&gt;</returns>
        public List<GetUniverseFactions200Ok> GetUniverseFactions (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<List<GetUniverseFactions200Ok>> localVarResponse = GetUniverseFactionsWithHttpInfo(acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get factions Get a list of factions  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of List&lt;GetUniverseFactions200Ok&gt;</returns>
        public ApiResponse< List<GetUniverseFactions200Ok> > GetUniverseFactionsWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {

            var localVarPath = "./v2/universe/factions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseFactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetUniverseFactions200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetUniverseFactions200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetUniverseFactions200Ok>)));
        }

        /// <summary>
        /// Get factions Get a list of factions  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of List&lt;GetUniverseFactions200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetUniverseFactions200Ok>> GetUniverseFactionsAsync (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<List<GetUniverseFactions200Ok>> localVarResponse = await GetUniverseFactionsAsyncWithHttpInfo(acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get factions Get a list of factions  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (List&lt;GetUniverseFactions200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetUniverseFactions200Ok>>> GetUniverseFactionsAsyncWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {

            var localVarPath = "./v2/universe/factions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseFactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetUniverseFactions200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetUniverseFactions200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetUniverseFactions200Ok>)));
        }

        /// <summary>
        /// Get graphics Get a list of graphics  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetUniverseGraphics (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetUniverseGraphicsWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get graphics Get a list of graphics  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetUniverseGraphicsWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/universe/graphics/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseGraphics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get graphics Get a list of graphics  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetUniverseGraphicsAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetUniverseGraphicsAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get graphics Get a list of graphics  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseGraphicsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/universe/graphics/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseGraphics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get graphic information Get information on a graphic  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graphicId">graphic_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetUniverseGraphicsGraphicIdOk</returns>
        public GetUniverseGraphicsGraphicIdOk GetUniverseGraphicsGraphicId (int? graphicId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetUniverseGraphicsGraphicIdOk> localVarResponse = GetUniverseGraphicsGraphicIdWithHttpInfo(graphicId, datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get graphic information Get information on a graphic  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graphicId">graphic_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetUniverseGraphicsGraphicIdOk</returns>
        public ApiResponse< GetUniverseGraphicsGraphicIdOk > GetUniverseGraphicsGraphicIdWithHttpInfo (int? graphicId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'graphicId' is set
            if (graphicId == null)
                throw new ApiException(400, "Missing required parameter 'graphicId' when calling UniverseApi->GetUniverseGraphicsGraphicId");

            var localVarPath = "./v1/universe/graphics/{graphic_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (graphicId != null) localVarPathParams.Add("graphic_id", this.Configuration.ApiClient.ParameterToString(graphicId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseGraphicsGraphicId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseGraphicsGraphicIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseGraphicsGraphicIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseGraphicsGraphicIdOk)));
        }

        /// <summary>
        /// Get graphic information Get information on a graphic  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graphicId">graphic_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetUniverseGraphicsGraphicIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseGraphicsGraphicIdOk> GetUniverseGraphicsGraphicIdAsync (int? graphicId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetUniverseGraphicsGraphicIdOk> localVarResponse = await GetUniverseGraphicsGraphicIdAsyncWithHttpInfo(graphicId, datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get graphic information Get information on a graphic  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graphicId">graphic_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetUniverseGraphicsGraphicIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseGraphicsGraphicIdOk>> GetUniverseGraphicsGraphicIdAsyncWithHttpInfo (int? graphicId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'graphicId' is set
            if (graphicId == null)
                throw new ApiException(400, "Missing required parameter 'graphicId' when calling UniverseApi->GetUniverseGraphicsGraphicId");

            var localVarPath = "./v1/universe/graphics/{graphic_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (graphicId != null) localVarPathParams.Add("graphic_id", this.Configuration.ApiClient.ParameterToString(graphicId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseGraphicsGraphicId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseGraphicsGraphicIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseGraphicsGraphicIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseGraphicsGraphicIdOk)));
        }

        /// <summary>
        /// Get item groups Get a list of item groups  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetUniverseGroups (string datasource = null, string ifNoneMatch = null, int? page = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetUniverseGroupsWithHttpInfo(datasource, ifNoneMatch, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get item groups Get a list of item groups  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetUniverseGroupsWithHttpInfo (string datasource = null, string ifNoneMatch = null, int? page = null)
        {

            var localVarPath = "./v1/universe/groups/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get item groups Get a list of item groups  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetUniverseGroupsAsync (string datasource = null, string ifNoneMatch = null, int? page = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetUniverseGroupsAsyncWithHttpInfo(datasource, ifNoneMatch, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get item groups Get a list of item groups  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseGroupsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null, int? page = null)
        {

            var localVarPath = "./v1/universe/groups/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get item group information Get information on an item group  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>GetUniverseGroupsGroupIdOk</returns>
        public GetUniverseGroupsGroupIdOk GetUniverseGroupsGroupId (int? groupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<GetUniverseGroupsGroupIdOk> localVarResponse = GetUniverseGroupsGroupIdWithHttpInfo(groupId, acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get item group information Get information on an item group  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of GetUniverseGroupsGroupIdOk</returns>
        public ApiResponse< GetUniverseGroupsGroupIdOk > GetUniverseGroupsGroupIdWithHttpInfo (int? groupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling UniverseApi->GetUniverseGroupsGroupId");

            var localVarPath = "./v1/universe/groups/{group_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseGroupsGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseGroupsGroupIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseGroupsGroupIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseGroupsGroupIdOk)));
        }

        /// <summary>
        /// Get item group information Get information on an item group  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of GetUniverseGroupsGroupIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseGroupsGroupIdOk> GetUniverseGroupsGroupIdAsync (int? groupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<GetUniverseGroupsGroupIdOk> localVarResponse = await GetUniverseGroupsGroupIdAsyncWithHttpInfo(groupId, acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get item group information Get information on an item group  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (GetUniverseGroupsGroupIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseGroupsGroupIdOk>> GetUniverseGroupsGroupIdAsyncWithHttpInfo (int? groupId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling UniverseApi->GetUniverseGroupsGroupId");

            var localVarPath = "./v1/universe/groups/{group_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseGroupsGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseGroupsGroupIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseGroupsGroupIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseGroupsGroupIdOk)));
        }

        /// <summary>
        /// Get moon information Get information on a moon  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moonId">moon_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetUniverseMoonsMoonIdOk</returns>
        public GetUniverseMoonsMoonIdOk GetUniverseMoonsMoonId (int? moonId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetUniverseMoonsMoonIdOk> localVarResponse = GetUniverseMoonsMoonIdWithHttpInfo(moonId, datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get moon information Get information on a moon  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moonId">moon_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetUniverseMoonsMoonIdOk</returns>
        public ApiResponse< GetUniverseMoonsMoonIdOk > GetUniverseMoonsMoonIdWithHttpInfo (int? moonId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'moonId' is set
            if (moonId == null)
                throw new ApiException(400, "Missing required parameter 'moonId' when calling UniverseApi->GetUniverseMoonsMoonId");

            var localVarPath = "./v1/universe/moons/{moon_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moonId != null) localVarPathParams.Add("moon_id", this.Configuration.ApiClient.ParameterToString(moonId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseMoonsMoonId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseMoonsMoonIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseMoonsMoonIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseMoonsMoonIdOk)));
        }

        /// <summary>
        /// Get moon information Get information on a moon  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moonId">moon_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetUniverseMoonsMoonIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseMoonsMoonIdOk> GetUniverseMoonsMoonIdAsync (int? moonId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetUniverseMoonsMoonIdOk> localVarResponse = await GetUniverseMoonsMoonIdAsyncWithHttpInfo(moonId, datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get moon information Get information on a moon  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moonId">moon_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetUniverseMoonsMoonIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseMoonsMoonIdOk>> GetUniverseMoonsMoonIdAsyncWithHttpInfo (int? moonId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'moonId' is set
            if (moonId == null)
                throw new ApiException(400, "Missing required parameter 'moonId' when calling UniverseApi->GetUniverseMoonsMoonId");

            var localVarPath = "./v1/universe/moons/{moon_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moonId != null) localVarPathParams.Add("moon_id", this.Configuration.ApiClient.ParameterToString(moonId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseMoonsMoonId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseMoonsMoonIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseMoonsMoonIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseMoonsMoonIdOk)));
        }

        /// <summary>
        /// Get planet information Get information on a planet  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planetId">planet_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetUniversePlanetsPlanetIdOk</returns>
        public GetUniversePlanetsPlanetIdOk GetUniversePlanetsPlanetId (int? planetId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetUniversePlanetsPlanetIdOk> localVarResponse = GetUniversePlanetsPlanetIdWithHttpInfo(planetId, datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get planet information Get information on a planet  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planetId">planet_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetUniversePlanetsPlanetIdOk</returns>
        public ApiResponse< GetUniversePlanetsPlanetIdOk > GetUniversePlanetsPlanetIdWithHttpInfo (int? planetId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'planetId' is set
            if (planetId == null)
                throw new ApiException(400, "Missing required parameter 'planetId' when calling UniverseApi->GetUniversePlanetsPlanetId");

            var localVarPath = "./v1/universe/planets/{planet_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (planetId != null) localVarPathParams.Add("planet_id", this.Configuration.ApiClient.ParameterToString(planetId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniversePlanetsPlanetId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniversePlanetsPlanetIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniversePlanetsPlanetIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniversePlanetsPlanetIdOk)));
        }

        /// <summary>
        /// Get planet information Get information on a planet  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planetId">planet_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetUniversePlanetsPlanetIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniversePlanetsPlanetIdOk> GetUniversePlanetsPlanetIdAsync (int? planetId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetUniversePlanetsPlanetIdOk> localVarResponse = await GetUniversePlanetsPlanetIdAsyncWithHttpInfo(planetId, datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get planet information Get information on a planet  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planetId">planet_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetUniversePlanetsPlanetIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniversePlanetsPlanetIdOk>> GetUniversePlanetsPlanetIdAsyncWithHttpInfo (int? planetId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'planetId' is set
            if (planetId == null)
                throw new ApiException(400, "Missing required parameter 'planetId' when calling UniverseApi->GetUniversePlanetsPlanetId");

            var localVarPath = "./v1/universe/planets/{planet_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (planetId != null) localVarPathParams.Add("planet_id", this.Configuration.ApiClient.ParameterToString(planetId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniversePlanetsPlanetId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniversePlanetsPlanetIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniversePlanetsPlanetIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniversePlanetsPlanetIdOk)));
        }

        /// <summary>
        /// Get character races Get a list of character races  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>List&lt;GetUniverseRaces200Ok&gt;</returns>
        public List<GetUniverseRaces200Ok> GetUniverseRaces (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<List<GetUniverseRaces200Ok>> localVarResponse = GetUniverseRacesWithHttpInfo(acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get character races Get a list of character races  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of List&lt;GetUniverseRaces200Ok&gt;</returns>
        public ApiResponse< List<GetUniverseRaces200Ok> > GetUniverseRacesWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {

            var localVarPath = "./v1/universe/races/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseRaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetUniverseRaces200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetUniverseRaces200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetUniverseRaces200Ok>)));
        }

        /// <summary>
        /// Get character races Get a list of character races  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of List&lt;GetUniverseRaces200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetUniverseRaces200Ok>> GetUniverseRacesAsync (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<List<GetUniverseRaces200Ok>> localVarResponse = await GetUniverseRacesAsyncWithHttpInfo(acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get character races Get a list of character races  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (List&lt;GetUniverseRaces200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetUniverseRaces200Ok>>> GetUniverseRacesAsyncWithHttpInfo (string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {

            var localVarPath = "./v1/universe/races/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseRaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetUniverseRaces200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetUniverseRaces200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetUniverseRaces200Ok>)));
        }

        /// <summary>
        /// Get regions Get a list of regions  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetUniverseRegions (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetUniverseRegionsWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get regions Get a list of regions  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetUniverseRegionsWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/universe/regions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseRegions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get regions Get a list of regions  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetUniverseRegionsAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetUniverseRegionsAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get regions Get a list of regions  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseRegionsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/universe/regions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseRegions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get region information Get information on a region  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">region_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>GetUniverseRegionsRegionIdOk</returns>
        public GetUniverseRegionsRegionIdOk GetUniverseRegionsRegionId (int? regionId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<GetUniverseRegionsRegionIdOk> localVarResponse = GetUniverseRegionsRegionIdWithHttpInfo(regionId, acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get region information Get information on a region  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">region_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of GetUniverseRegionsRegionIdOk</returns>
        public ApiResponse< GetUniverseRegionsRegionIdOk > GetUniverseRegionsRegionIdWithHttpInfo (int? regionId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
            // verify the required parameter 'regionId' is set
            if (regionId == null)
                throw new ApiException(400, "Missing required parameter 'regionId' when calling UniverseApi->GetUniverseRegionsRegionId");

            var localVarPath = "./v1/universe/regions/{region_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regionId != null) localVarPathParams.Add("region_id", this.Configuration.ApiClient.ParameterToString(regionId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseRegionsRegionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseRegionsRegionIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseRegionsRegionIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseRegionsRegionIdOk)));
        }

        /// <summary>
        /// Get region information Get information on a region  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">region_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of GetUniverseRegionsRegionIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseRegionsRegionIdOk> GetUniverseRegionsRegionIdAsync (int? regionId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<GetUniverseRegionsRegionIdOk> localVarResponse = await GetUniverseRegionsRegionIdAsyncWithHttpInfo(regionId, acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get region information Get information on a region  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">region_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (GetUniverseRegionsRegionIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseRegionsRegionIdOk>> GetUniverseRegionsRegionIdAsyncWithHttpInfo (int? regionId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
            // verify the required parameter 'regionId' is set
            if (regionId == null)
                throw new ApiException(400, "Missing required parameter 'regionId' when calling UniverseApi->GetUniverseRegionsRegionId");

            var localVarPath = "./v1/universe/regions/{region_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regionId != null) localVarPathParams.Add("region_id", this.Configuration.ApiClient.ParameterToString(regionId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseRegionsRegionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseRegionsRegionIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseRegionsRegionIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseRegionsRegionIdOk)));
        }

        /// <summary>
        /// Get stargate information Get information on a stargate  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stargateId">stargate_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetUniverseStargatesStargateIdOk</returns>
        public GetUniverseStargatesStargateIdOk GetUniverseStargatesStargateId (int? stargateId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetUniverseStargatesStargateIdOk> localVarResponse = GetUniverseStargatesStargateIdWithHttpInfo(stargateId, datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get stargate information Get information on a stargate  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stargateId">stargate_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetUniverseStargatesStargateIdOk</returns>
        public ApiResponse< GetUniverseStargatesStargateIdOk > GetUniverseStargatesStargateIdWithHttpInfo (int? stargateId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'stargateId' is set
            if (stargateId == null)
                throw new ApiException(400, "Missing required parameter 'stargateId' when calling UniverseApi->GetUniverseStargatesStargateId");

            var localVarPath = "./v1/universe/stargates/{stargate_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stargateId != null) localVarPathParams.Add("stargate_id", this.Configuration.ApiClient.ParameterToString(stargateId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStargatesStargateId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseStargatesStargateIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseStargatesStargateIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseStargatesStargateIdOk)));
        }

        /// <summary>
        /// Get stargate information Get information on a stargate  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stargateId">stargate_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetUniverseStargatesStargateIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseStargatesStargateIdOk> GetUniverseStargatesStargateIdAsync (int? stargateId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetUniverseStargatesStargateIdOk> localVarResponse = await GetUniverseStargatesStargateIdAsyncWithHttpInfo(stargateId, datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get stargate information Get information on a stargate  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stargateId">stargate_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetUniverseStargatesStargateIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseStargatesStargateIdOk>> GetUniverseStargatesStargateIdAsyncWithHttpInfo (int? stargateId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'stargateId' is set
            if (stargateId == null)
                throw new ApiException(400, "Missing required parameter 'stargateId' when calling UniverseApi->GetUniverseStargatesStargateId");

            var localVarPath = "./v1/universe/stargates/{stargate_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stargateId != null) localVarPathParams.Add("stargate_id", this.Configuration.ApiClient.ParameterToString(stargateId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStargatesStargateId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseStargatesStargateIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseStargatesStargateIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseStargatesStargateIdOk)));
        }

        /// <summary>
        /// Get star information Get information on a star  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="starId">star_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetUniverseStarsStarIdOk</returns>
        public GetUniverseStarsStarIdOk GetUniverseStarsStarId (int? starId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetUniverseStarsStarIdOk> localVarResponse = GetUniverseStarsStarIdWithHttpInfo(starId, datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get star information Get information on a star  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="starId">star_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetUniverseStarsStarIdOk</returns>
        public ApiResponse< GetUniverseStarsStarIdOk > GetUniverseStarsStarIdWithHttpInfo (int? starId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'starId' is set
            if (starId == null)
                throw new ApiException(400, "Missing required parameter 'starId' when calling UniverseApi->GetUniverseStarsStarId");

            var localVarPath = "./v1/universe/stars/{star_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (starId != null) localVarPathParams.Add("star_id", this.Configuration.ApiClient.ParameterToString(starId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStarsStarId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseStarsStarIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseStarsStarIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseStarsStarIdOk)));
        }

        /// <summary>
        /// Get star information Get information on a star  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="starId">star_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetUniverseStarsStarIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseStarsStarIdOk> GetUniverseStarsStarIdAsync (int? starId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetUniverseStarsStarIdOk> localVarResponse = await GetUniverseStarsStarIdAsyncWithHttpInfo(starId, datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get star information Get information on a star  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="starId">star_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetUniverseStarsStarIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseStarsStarIdOk>> GetUniverseStarsStarIdAsyncWithHttpInfo (int? starId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'starId' is set
            if (starId == null)
                throw new ApiException(400, "Missing required parameter 'starId' when calling UniverseApi->GetUniverseStarsStarId");

            var localVarPath = "./v1/universe/stars/{star_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (starId != null) localVarPathParams.Add("star_id", this.Configuration.ApiClient.ParameterToString(starId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStarsStarId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseStarsStarIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseStarsStarIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseStarsStarIdOk)));
        }

        /// <summary>
        /// Get station information Get information on a station  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">station_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>GetUniverseStationsStationIdOk</returns>
        public GetUniverseStationsStationIdOk GetUniverseStationsStationId (int? stationId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetUniverseStationsStationIdOk> localVarResponse = GetUniverseStationsStationIdWithHttpInfo(stationId, datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get station information Get information on a station  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">station_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of GetUniverseStationsStationIdOk</returns>
        public ApiResponse< GetUniverseStationsStationIdOk > GetUniverseStationsStationIdWithHttpInfo (int? stationId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling UniverseApi->GetUniverseStationsStationId");

            var localVarPath = "./v2/universe/stations/{station_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("station_id", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStationsStationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseStationsStationIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseStationsStationIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseStationsStationIdOk)));
        }

        /// <summary>
        /// Get station information Get information on a station  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">station_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of GetUniverseStationsStationIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseStationsStationIdOk> GetUniverseStationsStationIdAsync (int? stationId, string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<GetUniverseStationsStationIdOk> localVarResponse = await GetUniverseStationsStationIdAsyncWithHttpInfo(stationId, datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get station information Get information on a station  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">station_id integer</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (GetUniverseStationsStationIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseStationsStationIdOk>> GetUniverseStationsStationIdAsyncWithHttpInfo (int? stationId, string datasource = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling UniverseApi->GetUniverseStationsStationId");

            var localVarPath = "./v2/universe/stations/{station_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("station_id", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStationsStationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseStationsStationIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseStationsStationIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseStationsStationIdOk)));
        }

        /// <summary>
        /// List all public structures List all public structures  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;long?&gt;</returns>
        public List<long?> GetUniverseStructures (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<long?>> localVarResponse = GetUniverseStructuresWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all public structures List all public structures  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;long?&gt;</returns>
        public ApiResponse< List<long?> > GetUniverseStructuresWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/universe/structures/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStructures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<long?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<long?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<long?>)));
        }

        /// <summary>
        /// List all public structures List all public structures  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;long?&gt;</returns>
        public async System.Threading.Tasks.Task<List<long?>> GetUniverseStructuresAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<long?>> localVarResponse = await GetUniverseStructuresAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all public structures List all public structures  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;long?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<long?>>> GetUniverseStructuresAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/universe/structures/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStructures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<long?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<long?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<long?>)));
        }

        /// <summary>
        /// Get structure information Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>GetUniverseStructuresStructureIdOk</returns>
        public GetUniverseStructuresStructureIdOk GetUniverseStructuresStructureId (long? structureId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetUniverseStructuresStructureIdOk> localVarResponse = GetUniverseStructuresStructureIdWithHttpInfo(structureId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get structure information Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>ApiResponse of GetUniverseStructuresStructureIdOk</returns>
        public ApiResponse< GetUniverseStructuresStructureIdOk > GetUniverseStructuresStructureIdWithHttpInfo (long? structureId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'structureId' is set
            if (structureId == null)
                throw new ApiException(400, "Missing required parameter 'structureId' when calling UniverseApi->GetUniverseStructuresStructureId");

            var localVarPath = "./v1/universe/structures/{structure_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (structureId != null) localVarPathParams.Add("structure_id", this.Configuration.ApiClient.ParameterToString(structureId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStructuresStructureId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseStructuresStructureIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseStructuresStructureIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseStructuresStructureIdOk)));
        }

        /// <summary>
        /// Get structure information Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of GetUniverseStructuresStructureIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseStructuresStructureIdOk> GetUniverseStructuresStructureIdAsync (long? structureId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
             ApiResponse<GetUniverseStructuresStructureIdOk> localVarResponse = await GetUniverseStructuresStructureIdAsyncWithHttpInfo(structureId, datasource, ifNoneMatch, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get structure information Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <returns>Task of ApiResponse (GetUniverseStructuresStructureIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseStructuresStructureIdOk>> GetUniverseStructuresStructureIdAsyncWithHttpInfo (long? structureId, string datasource = null, string ifNoneMatch = null, string token = null)
        {
            // verify the required parameter 'structureId' is set
            if (structureId == null)
                throw new ApiException(400, "Missing required parameter 'structureId' when calling UniverseApi->GetUniverseStructuresStructureId");

            var localVarPath = "./v1/universe/structures/{structure_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (structureId != null) localVarPathParams.Add("structure_id", this.Configuration.ApiClient.ParameterToString(structureId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStructuresStructureId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseStructuresStructureIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseStructuresStructureIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseStructuresStructureIdOk)));
        }

        /// <summary>
        /// Get system jumps Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;GetUniverseSystemJumps200Ok&gt;</returns>
        public List<GetUniverseSystemJumps200Ok> GetUniverseSystemJumps (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<GetUniverseSystemJumps200Ok>> localVarResponse = GetUniverseSystemJumpsWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get system jumps Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;GetUniverseSystemJumps200Ok&gt;</returns>
        public ApiResponse< List<GetUniverseSystemJumps200Ok> > GetUniverseSystemJumpsWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/universe/system_jumps/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseSystemJumps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetUniverseSystemJumps200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetUniverseSystemJumps200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetUniverseSystemJumps200Ok>)));
        }

        /// <summary>
        /// Get system jumps Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;GetUniverseSystemJumps200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetUniverseSystemJumps200Ok>> GetUniverseSystemJumpsAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<GetUniverseSystemJumps200Ok>> localVarResponse = await GetUniverseSystemJumpsAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get system jumps Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetUniverseSystemJumps200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetUniverseSystemJumps200Ok>>> GetUniverseSystemJumpsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/universe/system_jumps/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseSystemJumps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetUniverseSystemJumps200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetUniverseSystemJumps200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetUniverseSystemJumps200Ok>)));
        }

        /// <summary>
        /// Get system kills Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;GetUniverseSystemKills200Ok&gt;</returns>
        public List<GetUniverseSystemKills200Ok> GetUniverseSystemKills (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<GetUniverseSystemKills200Ok>> localVarResponse = GetUniverseSystemKillsWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get system kills Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;GetUniverseSystemKills200Ok&gt;</returns>
        public ApiResponse< List<GetUniverseSystemKills200Ok> > GetUniverseSystemKillsWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v2/universe/system_kills/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseSystemKills", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetUniverseSystemKills200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetUniverseSystemKills200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetUniverseSystemKills200Ok>)));
        }

        /// <summary>
        /// Get system kills Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;GetUniverseSystemKills200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetUniverseSystemKills200Ok>> GetUniverseSystemKillsAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<GetUniverseSystemKills200Ok>> localVarResponse = await GetUniverseSystemKillsAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get system kills Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetUniverseSystemKills200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetUniverseSystemKills200Ok>>> GetUniverseSystemKillsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v2/universe/system_kills/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseSystemKills", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetUniverseSystemKills200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<GetUniverseSystemKills200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetUniverseSystemKills200Ok>)));
        }

        /// <summary>
        /// Get solar systems Get a list of solar systems  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetUniverseSystems (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetUniverseSystemsWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get solar systems Get a list of solar systems  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetUniverseSystemsWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/universe/systems/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get solar systems Get a list of solar systems  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetUniverseSystemsAsync (string datasource = null, string ifNoneMatch = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetUniverseSystemsAsyncWithHttpInfo(datasource, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get solar systems Get a list of solar systems  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseSystemsAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null)
        {

            var localVarPath = "./v1/universe/systems/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get solar system information Get information on a solar system  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">system_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>GetUniverseSystemsSystemIdOk</returns>
        public GetUniverseSystemsSystemIdOk GetUniverseSystemsSystemId (int? systemId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<GetUniverseSystemsSystemIdOk> localVarResponse = GetUniverseSystemsSystemIdWithHttpInfo(systemId, acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get solar system information Get information on a solar system  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">system_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of GetUniverseSystemsSystemIdOk</returns>
        public ApiResponse< GetUniverseSystemsSystemIdOk > GetUniverseSystemsSystemIdWithHttpInfo (int? systemId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling UniverseApi->GetUniverseSystemsSystemId");

            var localVarPath = "./v3/universe/systems/{system_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemId != null) localVarPathParams.Add("system_id", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseSystemsSystemId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseSystemsSystemIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseSystemsSystemIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseSystemsSystemIdOk)));
        }

        /// <summary>
        /// Get solar system information Get information on a solar system  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">system_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of GetUniverseSystemsSystemIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseSystemsSystemIdOk> GetUniverseSystemsSystemIdAsync (int? systemId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<GetUniverseSystemsSystemIdOk> localVarResponse = await GetUniverseSystemsSystemIdAsyncWithHttpInfo(systemId, acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get solar system information Get information on a solar system  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">system_id integer</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (GetUniverseSystemsSystemIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseSystemsSystemIdOk>> GetUniverseSystemsSystemIdAsyncWithHttpInfo (int? systemId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling UniverseApi->GetUniverseSystemsSystemId");

            var localVarPath = "./v3/universe/systems/{system_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemId != null) localVarPathParams.Add("system_id", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseSystemsSystemId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseSystemsSystemIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseSystemsSystemIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseSystemsSystemIdOk)));
        }

        /// <summary>
        /// Get types Get a list of type ids  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetUniverseTypes (string datasource = null, string ifNoneMatch = null, int? page = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetUniverseTypesWithHttpInfo(datasource, ifNoneMatch, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get types Get a list of type ids  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetUniverseTypesWithHttpInfo (string datasource = null, string ifNoneMatch = null, int? page = null)
        {

            var localVarPath = "./v1/universe/types/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get types Get a list of type ids  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetUniverseTypesAsync (string datasource = null, string ifNoneMatch = null, int? page = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetUniverseTypesAsyncWithHttpInfo(datasource, ifNoneMatch, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get types Get a list of type ids  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseTypesAsyncWithHttpInfo (string datasource = null, string ifNoneMatch = null, int? page = null)
        {

            var localVarPath = "./v1/universe/types/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get type information Get information on a type  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>GetUniverseTypesTypeIdOk</returns>
        public GetUniverseTypesTypeIdOk GetUniverseTypesTypeId (int? typeId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<GetUniverseTypesTypeIdOk> localVarResponse = GetUniverseTypesTypeIdWithHttpInfo(typeId, acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get type information Get information on a type  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of GetUniverseTypesTypeIdOk</returns>
        public ApiResponse< GetUniverseTypesTypeIdOk > GetUniverseTypesTypeIdWithHttpInfo (int? typeId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling UniverseApi->GetUniverseTypesTypeId");

            var localVarPath = "./v3/universe/types/{type_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (typeId != null) localVarPathParams.Add("type_id", this.Configuration.ApiClient.ParameterToString(typeId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseTypesTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseTypesTypeIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseTypesTypeIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseTypesTypeIdOk)));
        }

        /// <summary>
        /// Get type information Get information on a type  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of GetUniverseTypesTypeIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseTypesTypeIdOk> GetUniverseTypesTypeIdAsync (int? typeId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
             ApiResponse<GetUniverseTypesTypeIdOk> localVarResponse = await GetUniverseTypesTypeIdAsyncWithHttpInfo(typeId, acceptLanguage, datasource, ifNoneMatch, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get type information Get information on a type  - --  This route expires daily at 11:05
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (GetUniverseTypesTypeIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseTypesTypeIdOk>> GetUniverseTypesTypeIdAsyncWithHttpInfo (int? typeId, string acceptLanguage = null, string datasource = null, string ifNoneMatch = null, string language = null)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling UniverseApi->GetUniverseTypesTypeId");

            var localVarPath = "./v3/universe/types/{type_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (typeId != null) localVarPathParams.Add("type_id", this.Configuration.ApiClient.ParameterToString(typeId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseTypesTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseTypesTypeIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (GetUniverseTypesTypeIdOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseTypesTypeIdOk)));
        }

        /// <summary>
        /// Bulk names to IDs Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours.  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="names">The names to resolve</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>PostUniverseIdsOk</returns>
        public PostUniverseIdsOk PostUniverseIds (List<string> names, string acceptLanguage = null, string datasource = null, string language = null)
        {
             ApiResponse<PostUniverseIdsOk> localVarResponse = PostUniverseIdsWithHttpInfo(names, acceptLanguage, datasource, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk names to IDs Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours.  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="names">The names to resolve</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>ApiResponse of PostUniverseIdsOk</returns>
        public ApiResponse< PostUniverseIdsOk > PostUniverseIdsWithHttpInfo (List<string> names, string acceptLanguage = null, string datasource = null, string language = null)
        {
            // verify the required parameter 'names' is set
            if (names == null)
                throw new ApiException(400, "Missing required parameter 'names' when calling UniverseApi->PostUniverseIds");

            var localVarPath = "./v1/universe/ids/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (names != null && names.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(names); // http body (model) parameter
            }
            else
            {
                localVarPostBody = names; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUniverseIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostUniverseIdsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (PostUniverseIdsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostUniverseIdsOk)));
        }

        /// <summary>
        /// Bulk names to IDs Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours.  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="names">The names to resolve</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of PostUniverseIdsOk</returns>
        public async System.Threading.Tasks.Task<PostUniverseIdsOk> PostUniverseIdsAsync (List<string> names, string acceptLanguage = null, string datasource = null, string language = null)
        {
             ApiResponse<PostUniverseIdsOk> localVarResponse = await PostUniverseIdsAsyncWithHttpInfo(names, acceptLanguage, datasource, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk names to IDs Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours.  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="names">The names to resolve</param>
        /// <param name="acceptLanguage">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)</param>
        /// <returns>Task of ApiResponse (PostUniverseIdsOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostUniverseIdsOk>> PostUniverseIdsAsyncWithHttpInfo (List<string> names, string acceptLanguage = null, string datasource = null, string language = null)
        {
            // verify the required parameter 'names' is set
            if (names == null)
                throw new ApiException(400, "Missing required parameter 'names' when calling UniverseApi->PostUniverseIds");

            var localVarPath = "./v1/universe/ids/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (names != null && names.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(names); // http body (model) parameter
            }
            else
            {
                localVarPostBody = names; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUniverseIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostUniverseIdsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (PostUniverseIdsOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostUniverseIdsOk)));
        }

        /// <summary>
        /// Get names and categories for a set of ID&#39;s Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;PostUniverseNames200Ok&gt;</returns>
        public List<PostUniverseNames200Ok> PostUniverseNames (List<int?> ids, string datasource = null)
        {
             ApiResponse<List<PostUniverseNames200Ok>> localVarResponse = PostUniverseNamesWithHttpInfo(ids, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get names and categories for a set of ID&#39;s Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;PostUniverseNames200Ok&gt;</returns>
        public ApiResponse< List<PostUniverseNames200Ok> > PostUniverseNamesWithHttpInfo (List<int?> ids, string datasource = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UniverseApi->PostUniverseNames");

            var localVarPath = "./v2/universe/names/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ids != null && ids.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ids; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUniverseNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PostUniverseNames200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<PostUniverseNames200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PostUniverseNames200Ok>)));
        }

        /// <summary>
        /// Get names and categories for a set of ID&#39;s Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;PostUniverseNames200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<PostUniverseNames200Ok>> PostUniverseNamesAsync (List<int?> ids, string datasource = null)
        {
             ApiResponse<List<PostUniverseNames200Ok>> localVarResponse = await PostUniverseNamesAsyncWithHttpInfo(ids, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get names and categories for a set of ID&#39;s Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - -- 
        /// </summary>
        /// <exception cref="ESIClient.Dotcore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;PostUniverseNames200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PostUniverseNames200Ok>>> PostUniverseNamesAsyncWithHttpInfo (List<int?> ids, string datasource = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UniverseApi->PostUniverseNames");

            var localVarPath = "./v2/universe/names/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (ids != null && ids.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ids; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUniverseNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PostUniverseNames200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault().ToString()),
                (List<PostUniverseNames200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PostUniverseNames200Ok>)));
        }

    }
}
