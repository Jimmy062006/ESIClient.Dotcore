/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetUniverseBloodlines200Ok :  IEquatable<GetUniverseBloodlines200Ok>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseBloodlines200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetUniverseBloodlines200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseBloodlines200Ok" /> class.
        /// </summary>
        /// <param name="bloodlineId">bloodline_id integer (required).</param>
        /// <param name="charisma">charisma integer (required).</param>
        /// <param name="corporationId">corporation_id integer (required).</param>
        /// <param name="description">description string (required).</param>
        /// <param name="intelligence">intelligence integer (required).</param>
        /// <param name="memory">memory integer (required).</param>
        /// <param name="name">name string (required).</param>
        /// <param name="perception">perception integer (required).</param>
        /// <param name="raceId">race_id integer (required).</param>
        /// <param name="shipTypeId">ship_type_id integer (required).</param>
        /// <param name="willpower">willpower integer (required).</param>
        public GetUniverseBloodlines200Ok(int? bloodlineId = default(int?), int? charisma = default(int?), int? corporationId = default(int?), string description = default(string), int? intelligence = default(int?), int? memory = default(int?), string name = default(string), int? perception = default(int?), int? raceId = default(int?), int? shipTypeId = default(int?), int? willpower = default(int?))
        {
            // to ensure "bloodlineId" is required (not null)
            if (bloodlineId == null)
            {
                throw new InvalidDataException("bloodlineId is a required property for GetUniverseBloodlines200Ok and cannot be null");
            }
            else
            {
                this.BloodlineId = bloodlineId;
            }
            // to ensure "charisma" is required (not null)
            if (charisma == null)
            {
                throw new InvalidDataException("charisma is a required property for GetUniverseBloodlines200Ok and cannot be null");
            }
            else
            {
                this.Charisma = charisma;
            }
            // to ensure "corporationId" is required (not null)
            if (corporationId == null)
            {
                throw new InvalidDataException("corporationId is a required property for GetUniverseBloodlines200Ok and cannot be null");
            }
            else
            {
                this.CorporationId = corporationId;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for GetUniverseBloodlines200Ok and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "intelligence" is required (not null)
            if (intelligence == null)
            {
                throw new InvalidDataException("intelligence is a required property for GetUniverseBloodlines200Ok and cannot be null");
            }
            else
            {
                this.Intelligence = intelligence;
            }
            // to ensure "memory" is required (not null)
            if (memory == null)
            {
                throw new InvalidDataException("memory is a required property for GetUniverseBloodlines200Ok and cannot be null");
            }
            else
            {
                this.Memory = memory;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for GetUniverseBloodlines200Ok and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "perception" is required (not null)
            if (perception == null)
            {
                throw new InvalidDataException("perception is a required property for GetUniverseBloodlines200Ok and cannot be null");
            }
            else
            {
                this.Perception = perception;
            }
            // to ensure "raceId" is required (not null)
            if (raceId == null)
            {
                throw new InvalidDataException("raceId is a required property for GetUniverseBloodlines200Ok and cannot be null");
            }
            else
            {
                this.RaceId = raceId;
            }
            // to ensure "shipTypeId" is required (not null)
            if (shipTypeId == null)
            {
                throw new InvalidDataException("shipTypeId is a required property for GetUniverseBloodlines200Ok and cannot be null");
            }
            else
            {
                this.ShipTypeId = shipTypeId;
            }
            // to ensure "willpower" is required (not null)
            if (willpower == null)
            {
                throw new InvalidDataException("willpower is a required property for GetUniverseBloodlines200Ok and cannot be null");
            }
            else
            {
                this.Willpower = willpower;
            }
        }
        
        /// <summary>
        /// bloodline_id integer
        /// </summary>
        /// <value>bloodline_id integer</value>
        [DataMember(Name="bloodline_id", EmitDefaultValue=false)]
        public int? BloodlineId { get; set; }

        /// <summary>
        /// charisma integer
        /// </summary>
        /// <value>charisma integer</value>
        [DataMember(Name="charisma", EmitDefaultValue=false)]
        public int? Charisma { get; set; }

        /// <summary>
        /// corporation_id integer
        /// </summary>
        /// <value>corporation_id integer</value>
        [DataMember(Name="corporation_id", EmitDefaultValue=false)]
        public int? CorporationId { get; set; }

        /// <summary>
        /// description string
        /// </summary>
        /// <value>description string</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// intelligence integer
        /// </summary>
        /// <value>intelligence integer</value>
        [DataMember(Name="intelligence", EmitDefaultValue=false)]
        public int? Intelligence { get; set; }

        /// <summary>
        /// memory integer
        /// </summary>
        /// <value>memory integer</value>
        [DataMember(Name="memory", EmitDefaultValue=false)]
        public int? Memory { get; set; }

        /// <summary>
        /// name string
        /// </summary>
        /// <value>name string</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// perception integer
        /// </summary>
        /// <value>perception integer</value>
        [DataMember(Name="perception", EmitDefaultValue=false)]
        public int? Perception { get; set; }

        /// <summary>
        /// race_id integer
        /// </summary>
        /// <value>race_id integer</value>
        [DataMember(Name="race_id", EmitDefaultValue=false)]
        public int? RaceId { get; set; }

        /// <summary>
        /// ship_type_id integer
        /// </summary>
        /// <value>ship_type_id integer</value>
        [DataMember(Name="ship_type_id", EmitDefaultValue=false)]
        public int? ShipTypeId { get; set; }

        /// <summary>
        /// willpower integer
        /// </summary>
        /// <value>willpower integer</value>
        [DataMember(Name="willpower", EmitDefaultValue=false)]
        public int? Willpower { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUniverseBloodlines200Ok {\n");
            sb.Append("  BloodlineId: ").Append(BloodlineId).Append("\n");
            sb.Append("  Charisma: ").Append(Charisma).Append("\n");
            sb.Append("  CorporationId: ").Append(CorporationId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Intelligence: ").Append(Intelligence).Append("\n");
            sb.Append("  Memory: ").Append(Memory).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Perception: ").Append(Perception).Append("\n");
            sb.Append("  RaceId: ").Append(RaceId).Append("\n");
            sb.Append("  ShipTypeId: ").Append(ShipTypeId).Append("\n");
            sb.Append("  Willpower: ").Append(Willpower).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUniverseBloodlines200Ok);
        }

        /// <summary>
        /// Returns true if GetUniverseBloodlines200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUniverseBloodlines200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUniverseBloodlines200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BloodlineId == input.BloodlineId ||
                    (this.BloodlineId != null &&
                    this.BloodlineId.Equals(input.BloodlineId))
                ) && 
                (
                    this.Charisma == input.Charisma ||
                    (this.Charisma != null &&
                    this.Charisma.Equals(input.Charisma))
                ) && 
                (
                    this.CorporationId == input.CorporationId ||
                    (this.CorporationId != null &&
                    this.CorporationId.Equals(input.CorporationId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Intelligence == input.Intelligence ||
                    (this.Intelligence != null &&
                    this.Intelligence.Equals(input.Intelligence))
                ) && 
                (
                    this.Memory == input.Memory ||
                    (this.Memory != null &&
                    this.Memory.Equals(input.Memory))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Perception == input.Perception ||
                    (this.Perception != null &&
                    this.Perception.Equals(input.Perception))
                ) && 
                (
                    this.RaceId == input.RaceId ||
                    (this.RaceId != null &&
                    this.RaceId.Equals(input.RaceId))
                ) && 
                (
                    this.ShipTypeId == input.ShipTypeId ||
                    (this.ShipTypeId != null &&
                    this.ShipTypeId.Equals(input.ShipTypeId))
                ) && 
                (
                    this.Willpower == input.Willpower ||
                    (this.Willpower != null &&
                    this.Willpower.Equals(input.Willpower))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BloodlineId != null)
                    hashCode = hashCode * 59 + this.BloodlineId.GetHashCode();
                if (this.Charisma != null)
                    hashCode = hashCode * 59 + this.Charisma.GetHashCode();
                if (this.CorporationId != null)
                    hashCode = hashCode * 59 + this.CorporationId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Intelligence != null)
                    hashCode = hashCode * 59 + this.Intelligence.GetHashCode();
                if (this.Memory != null)
                    hashCode = hashCode * 59 + this.Memory.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Perception != null)
                    hashCode = hashCode * 59 + this.Perception.GetHashCode();
                if (this.RaceId != null)
                    hashCode = hashCode * 59 + this.RaceId.GetHashCode();
                if (this.ShipTypeId != null)
                    hashCode = hashCode * 59 + this.ShipTypeId.GetHashCode();
                if (this.Willpower != null)
                    hashCode = hashCode * 59 + this.Willpower.GetHashCode();
                return hashCode;
            }
        }
    }

}
