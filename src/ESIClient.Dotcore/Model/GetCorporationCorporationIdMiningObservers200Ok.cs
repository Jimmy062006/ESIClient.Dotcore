/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationCorporationIdMiningObservers200Ok :  IEquatable<GetCorporationCorporationIdMiningObservers200Ok>
    {
        /// <summary>
        /// The category of the observing entity
        /// </summary>
        /// <value>The category of the observing entity</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObserverTypeEnum
        {
            
            /// <summary>
            /// Enum Structure for value: structure
            /// </summary>
            [EnumMember(Value = "structure")]
            Structure = 1
        }

        /// <summary>
        /// The category of the observing entity
        /// </summary>
        /// <value>The category of the observing entity</value>
        [DataMember(Name="observer_type", EmitDefaultValue=false)]
        public ObserverTypeEnum ObserverType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationCorporationIdMiningObservers200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationCorporationIdMiningObservers200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationCorporationIdMiningObservers200Ok" /> class.
        /// </summary>
        /// <param name="lastUpdated">last_updated string (required).</param>
        /// <param name="observerId">The entity that was observing the asteroid field when it was mined.  (required).</param>
        /// <param name="observerType">The category of the observing entity (required).</param>
        public GetCorporationCorporationIdMiningObservers200Ok(DateTime? lastUpdated = default(DateTime?), long? observerId = default(long?), ObserverTypeEnum observerType = default(ObserverTypeEnum))
        {
            // to ensure "lastUpdated" is required (not null)
            if (lastUpdated == null)
            {
                throw new InvalidDataException("lastUpdated is a required property for GetCorporationCorporationIdMiningObservers200Ok and cannot be null");
            }
            else
            {
                this.LastUpdated = lastUpdated;
            }
            // to ensure "observerId" is required (not null)
            if (observerId == null)
            {
                throw new InvalidDataException("observerId is a required property for GetCorporationCorporationIdMiningObservers200Ok and cannot be null");
            }
            else
            {
                this.ObserverId = observerId;
            }
            // to ensure "observerType" is required (not null)
            if (observerType == null)
            {
                throw new InvalidDataException("observerType is a required property for GetCorporationCorporationIdMiningObservers200Ok and cannot be null");
            }
            else
            {
                this.ObserverType = observerType;
            }
        }
        
        /// <summary>
        /// last_updated string
        /// </summary>
        /// <value>last_updated string</value>
        [DataMember(Name="last_updated", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? LastUpdated { get; set; }

        /// <summary>
        /// The entity that was observing the asteroid field when it was mined. 
        /// </summary>
        /// <value>The entity that was observing the asteroid field when it was mined. </value>
        [DataMember(Name="observer_id", EmitDefaultValue=false)]
        public long? ObserverId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationCorporationIdMiningObservers200Ok {\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  ObserverId: ").Append(ObserverId).Append("\n");
            sb.Append("  ObserverType: ").Append(ObserverType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationCorporationIdMiningObservers200Ok);
        }

        /// <summary>
        /// Returns true if GetCorporationCorporationIdMiningObservers200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationCorporationIdMiningObservers200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationCorporationIdMiningObservers200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.ObserverId == input.ObserverId ||
                    (this.ObserverId != null &&
                    this.ObserverId.Equals(input.ObserverId))
                ) && 
                (
                    this.ObserverType == input.ObserverType ||
                    (this.ObserverType != null &&
                    this.ObserverType.Equals(input.ObserverType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.ObserverId != null)
                    hashCode = hashCode * 59 + this.ObserverId.GetHashCode();
                if (this.ObserverType != null)
                    hashCode = hashCode * 59 + this.ObserverType.GetHashCode();
                return hashCode;
            }
        }
    }

}
