/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetOpportunitiesGroupsGroupIdOk :  IEquatable<GetOpportunitiesGroupsGroupIdOk>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOpportunitiesGroupsGroupIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetOpportunitiesGroupsGroupIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOpportunitiesGroupsGroupIdOk" /> class.
        /// </summary>
        /// <param name="connectedGroups">The groups that are connected to this group on the opportunities map (required).</param>
        /// <param name="description">description string (required).</param>
        /// <param name="groupId">group_id integer (required).</param>
        /// <param name="name">name string (required).</param>
        /// <param name="notification">notification string (required).</param>
        /// <param name="requiredTasks">Tasks need to complete for this group (required).</param>
        public GetOpportunitiesGroupsGroupIdOk(List<int?> connectedGroups = default(List<int?>), string description = default(string), int? groupId = default(int?), string name = default(string), string notification = default(string), List<int?> requiredTasks = default(List<int?>))
        {
            // to ensure "connectedGroups" is required (not null)
            if (connectedGroups == null)
            {
                throw new InvalidDataException("connectedGroups is a required property for GetOpportunitiesGroupsGroupIdOk and cannot be null");
            }
            else
            {
                this.ConnectedGroups = connectedGroups;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for GetOpportunitiesGroupsGroupIdOk and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "groupId" is required (not null)
            if (groupId == null)
            {
                throw new InvalidDataException("groupId is a required property for GetOpportunitiesGroupsGroupIdOk and cannot be null");
            }
            else
            {
                this.GroupId = groupId;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for GetOpportunitiesGroupsGroupIdOk and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "notification" is required (not null)
            if (notification == null)
            {
                throw new InvalidDataException("notification is a required property for GetOpportunitiesGroupsGroupIdOk and cannot be null");
            }
            else
            {
                this.Notification = notification;
            }
            // to ensure "requiredTasks" is required (not null)
            if (requiredTasks == null)
            {
                throw new InvalidDataException("requiredTasks is a required property for GetOpportunitiesGroupsGroupIdOk and cannot be null");
            }
            else
            {
                this.RequiredTasks = requiredTasks;
            }
        }
        
        /// <summary>
        /// The groups that are connected to this group on the opportunities map
        /// </summary>
        /// <value>The groups that are connected to this group on the opportunities map</value>
        [DataMember(Name="connected_groups", EmitDefaultValue=false)]
        public List<int?> ConnectedGroups { get; set; }

        /// <summary>
        /// description string
        /// </summary>
        /// <value>description string</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// group_id integer
        /// </summary>
        /// <value>group_id integer</value>
        [DataMember(Name="group_id", EmitDefaultValue=false)]
        public int? GroupId { get; set; }

        /// <summary>
        /// name string
        /// </summary>
        /// <value>name string</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// notification string
        /// </summary>
        /// <value>notification string</value>
        [DataMember(Name="notification", EmitDefaultValue=false)]
        public string Notification { get; set; }

        /// <summary>
        /// Tasks need to complete for this group
        /// </summary>
        /// <value>Tasks need to complete for this group</value>
        [DataMember(Name="required_tasks", EmitDefaultValue=false)]
        public List<int?> RequiredTasks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetOpportunitiesGroupsGroupIdOk {\n");
            sb.Append("  ConnectedGroups: ").Append(ConnectedGroups).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Notification: ").Append(Notification).Append("\n");
            sb.Append("  RequiredTasks: ").Append(RequiredTasks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetOpportunitiesGroupsGroupIdOk);
        }

        /// <summary>
        /// Returns true if GetOpportunitiesGroupsGroupIdOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetOpportunitiesGroupsGroupIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetOpportunitiesGroupsGroupIdOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConnectedGroups == input.ConnectedGroups ||
                    this.ConnectedGroups != null &&
                    this.ConnectedGroups.SequenceEqual(input.ConnectedGroups)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Notification == input.Notification ||
                    (this.Notification != null &&
                    this.Notification.Equals(input.Notification))
                ) && 
                (
                    this.RequiredTasks == input.RequiredTasks ||
                    this.RequiredTasks != null &&
                    this.RequiredTasks.SequenceEqual(input.RequiredTasks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectedGroups != null)
                    hashCode = hashCode * 59 + this.ConnectedGroups.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Notification != null)
                    hashCode = hashCode * 59 + this.Notification.GetHashCode();
                if (this.RequiredTasks != null)
                    hashCode = hashCode * 59 + this.RequiredTasks.GetHashCode();
                return hashCode;
            }
        }
    }

}
