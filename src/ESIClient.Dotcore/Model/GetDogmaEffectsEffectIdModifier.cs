/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// modifier object
    /// </summary>
    [DataContract]
    public partial class GetDogmaEffectsEffectIdModifier :  IEquatable<GetDogmaEffectsEffectIdModifier>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDogmaEffectsEffectIdModifier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetDogmaEffectsEffectIdModifier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDogmaEffectsEffectIdModifier" /> class.
        /// </summary>
        /// <param name="domain">domain string.</param>
        /// <param name="effectId">effect_id integer.</param>
        /// <param name="func">func string (required).</param>
        /// <param name="modifiedAttributeId">modified_attribute_id integer.</param>
        /// <param name="modifyingAttributeId">modifying_attribute_id integer.</param>
        /// <param name="_operator">operator integer.</param>
        public GetDogmaEffectsEffectIdModifier(string domain = default(string), int? effectId = default(int?), string func = default(string), int? modifiedAttributeId = default(int?), int? modifyingAttributeId = default(int?), int? _operator = default(int?))
        {
            // to ensure "func" is required (not null)
            if (func == null)
            {
                throw new InvalidDataException("func is a required property for GetDogmaEffectsEffectIdModifier and cannot be null");
            }
            else
            {
                this.Func = func;
            }
            this.Domain = domain;
            this.EffectId = effectId;
            this.ModifiedAttributeId = modifiedAttributeId;
            this.ModifyingAttributeId = modifyingAttributeId;
            this.Operator = _operator;
        }
        
        /// <summary>
        /// domain string
        /// </summary>
        /// <value>domain string</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// effect_id integer
        /// </summary>
        /// <value>effect_id integer</value>
        [DataMember(Name="effect_id", EmitDefaultValue=false)]
        public int? EffectId { get; set; }

        /// <summary>
        /// func string
        /// </summary>
        /// <value>func string</value>
        [DataMember(Name="func", EmitDefaultValue=false)]
        public string Func { get; set; }

        /// <summary>
        /// modified_attribute_id integer
        /// </summary>
        /// <value>modified_attribute_id integer</value>
        [DataMember(Name="modified_attribute_id", EmitDefaultValue=false)]
        public int? ModifiedAttributeId { get; set; }

        /// <summary>
        /// modifying_attribute_id integer
        /// </summary>
        /// <value>modifying_attribute_id integer</value>
        [DataMember(Name="modifying_attribute_id", EmitDefaultValue=false)]
        public int? ModifyingAttributeId { get; set; }

        /// <summary>
        /// operator integer
        /// </summary>
        /// <value>operator integer</value>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public int? Operator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetDogmaEffectsEffectIdModifier {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  EffectId: ").Append(EffectId).Append("\n");
            sb.Append("  Func: ").Append(Func).Append("\n");
            sb.Append("  ModifiedAttributeId: ").Append(ModifiedAttributeId).Append("\n");
            sb.Append("  ModifyingAttributeId: ").Append(ModifyingAttributeId).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetDogmaEffectsEffectIdModifier);
        }

        /// <summary>
        /// Returns true if GetDogmaEffectsEffectIdModifier instances are equal
        /// </summary>
        /// <param name="input">Instance of GetDogmaEffectsEffectIdModifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetDogmaEffectsEffectIdModifier input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.EffectId == input.EffectId ||
                    (this.EffectId != null &&
                    this.EffectId.Equals(input.EffectId))
                ) && 
                (
                    this.Func == input.Func ||
                    (this.Func != null &&
                    this.Func.Equals(input.Func))
                ) && 
                (
                    this.ModifiedAttributeId == input.ModifiedAttributeId ||
                    (this.ModifiedAttributeId != null &&
                    this.ModifiedAttributeId.Equals(input.ModifiedAttributeId))
                ) && 
                (
                    this.ModifyingAttributeId == input.ModifyingAttributeId ||
                    (this.ModifyingAttributeId != null &&
                    this.ModifyingAttributeId.Equals(input.ModifyingAttributeId))
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.EffectId != null)
                    hashCode = hashCode * 59 + this.EffectId.GetHashCode();
                if (this.Func != null)
                    hashCode = hashCode * 59 + this.Func.GetHashCode();
                if (this.ModifiedAttributeId != null)
                    hashCode = hashCode * 59 + this.ModifiedAttributeId.GetHashCode();
                if (this.ModifyingAttributeId != null)
                    hashCode = hashCode * 59 + this.ModifyingAttributeId.GetHashCode();
                if (this.Operator != null)
                    hashCode = hashCode * 59 + this.Operator.GetHashCode();
                return hashCode;
            }
        }
    }

}
