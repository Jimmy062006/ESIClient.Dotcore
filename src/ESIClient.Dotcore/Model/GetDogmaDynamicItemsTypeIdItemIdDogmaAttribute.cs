/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// dogma_attribute object
    /// </summary>
    [DataContract]
    public partial class GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute :  IEquatable<GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute" /> class.
        /// </summary>
        /// <param name="attributeId">attribute_id integer (required).</param>
        /// <param name="value">value number (required).</param>
        public GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute(int? attributeId = default(int?), float? value = default(float?))
        {
            // to ensure "attributeId" is required (not null)
            if (attributeId == null)
            {
                throw new InvalidDataException("attributeId is a required property for GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute and cannot be null");
            }
            else
            {
                this.AttributeId = attributeId;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute and cannot be null");
            }
            else
            {
                this.Value = value;
            }
        }
        
        /// <summary>
        /// attribute_id integer
        /// </summary>
        /// <value>attribute_id integer</value>
        [DataMember(Name="attribute_id", EmitDefaultValue=false)]
        public int? AttributeId { get; set; }

        /// <summary>
        /// value number
        /// </summary>
        /// <value>value number</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public float? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute {\n");
            sb.Append("  AttributeId: ").Append(AttributeId).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute);
        }

        /// <summary>
        /// Returns true if GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttributeId == input.AttributeId ||
                    (this.AttributeId != null &&
                    this.AttributeId.Equals(input.AttributeId))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttributeId != null)
                    hashCode = hashCode * 59 + this.AttributeId.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }
    }

}
