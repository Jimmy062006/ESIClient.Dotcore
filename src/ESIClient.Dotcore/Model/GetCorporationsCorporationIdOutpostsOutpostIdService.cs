/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// service object
    /// </summary>
    [DataContract]
    public partial class GetCorporationsCorporationIdOutpostsOutpostIdService :  IEquatable<GetCorporationsCorporationIdOutpostsOutpostIdService>
    {
        /// <summary>
        /// service_name string
        /// </summary>
        /// <value>service_name string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServiceNameEnum
        {
            
            /// <summary>
            /// Enum BountyMissions for value: Bounty Missions
            /// </summary>
            [EnumMember(Value = "Bounty Missions")]
            BountyMissions = 1,
            
            /// <summary>
            /// Enum AssassinationMissions for value: Assassination Missions
            /// </summary>
            [EnumMember(Value = "Assassination Missions")]
            AssassinationMissions = 2,
            
            /// <summary>
            /// Enum CourierMissions for value: Courier Missions
            /// </summary>
            [EnumMember(Value = "Courier Missions")]
            CourierMissions = 3,
            
            /// <summary>
            /// Enum Interbus for value: Interbus
            /// </summary>
            [EnumMember(Value = "Interbus")]
            Interbus = 4,
            
            /// <summary>
            /// Enum ReprocessingPlant for value: Reprocessing Plant
            /// </summary>
            [EnumMember(Value = "Reprocessing Plant")]
            ReprocessingPlant = 5,
            
            /// <summary>
            /// Enum Refinery for value: Refinery
            /// </summary>
            [EnumMember(Value = "Refinery")]
            Refinery = 6,
            
            /// <summary>
            /// Enum Market for value: Market
            /// </summary>
            [EnumMember(Value = "Market")]
            Market = 7,
            
            /// <summary>
            /// Enum BlackMarket for value: Black Market
            /// </summary>
            [EnumMember(Value = "Black Market")]
            BlackMarket = 8,
            
            /// <summary>
            /// Enum StockExchange for value: Stock Exchange
            /// </summary>
            [EnumMember(Value = "Stock Exchange")]
            StockExchange = 9,
            
            /// <summary>
            /// Enum Cloning for value: Cloning
            /// </summary>
            [EnumMember(Value = "Cloning")]
            Cloning = 10,
            
            /// <summary>
            /// Enum Surgery for value: Surgery
            /// </summary>
            [EnumMember(Value = "Surgery")]
            Surgery = 11,
            
            /// <summary>
            /// Enum DNATherapy for value: DNA Therapy
            /// </summary>
            [EnumMember(Value = "DNA Therapy")]
            DNATherapy = 12,
            
            /// <summary>
            /// Enum RepairFacilities for value: Repair Facilities
            /// </summary>
            [EnumMember(Value = "Repair Facilities")]
            RepairFacilities = 13,
            
            /// <summary>
            /// Enum Factory for value: Factory
            /// </summary>
            [EnumMember(Value = "Factory")]
            Factory = 14,
            
            /// <summary>
            /// Enum Laboratory for value: Laboratory
            /// </summary>
            [EnumMember(Value = "Laboratory")]
            Laboratory = 15,
            
            /// <summary>
            /// Enum Gambling for value: Gambling
            /// </summary>
            [EnumMember(Value = "Gambling")]
            Gambling = 16,
            
            /// <summary>
            /// Enum Fitting for value: Fitting
            /// </summary>
            [EnumMember(Value = "Fitting")]
            Fitting = 17,
            
            /// <summary>
            /// Enum Paintshop for value: Paintshop
            /// </summary>
            [EnumMember(Value = "Paintshop")]
            Paintshop = 18,
            
            /// <summary>
            /// Enum News for value: News
            /// </summary>
            [EnumMember(Value = "News")]
            News = 19,
            
            /// <summary>
            /// Enum Storage for value: Storage
            /// </summary>
            [EnumMember(Value = "Storage")]
            Storage = 20,
            
            /// <summary>
            /// Enum Insurance for value: Insurance
            /// </summary>
            [EnumMember(Value = "Insurance")]
            Insurance = 21,
            
            /// <summary>
            /// Enum Docking for value: Docking
            /// </summary>
            [EnumMember(Value = "Docking")]
            Docking = 22,
            
            /// <summary>
            /// Enum OfficeRental for value: Office Rental
            /// </summary>
            [EnumMember(Value = "Office Rental")]
            OfficeRental = 23,
            
            /// <summary>
            /// Enum JumpCloneFacility for value: Jump Clone Facility
            /// </summary>
            [EnumMember(Value = "Jump Clone Facility")]
            JumpCloneFacility = 24,
            
            /// <summary>
            /// Enum LoyaltyPointStore for value: Loyalty Point Store
            /// </summary>
            [EnumMember(Value = "Loyalty Point Store")]
            LoyaltyPointStore = 25,
            
            /// <summary>
            /// Enum NavyOffices for value: Navy Offices
            /// </summary>
            [EnumMember(Value = "Navy Offices")]
            NavyOffices = 26,
            
            /// <summary>
            /// Enum SecurityOffice for value: Security Office
            /// </summary>
            [EnumMember(Value = "Security Office")]
            SecurityOffice = 27
        }

        /// <summary>
        /// service_name string
        /// </summary>
        /// <value>service_name string</value>
        [DataMember(Name="service_name", EmitDefaultValue=false)]
        public ServiceNameEnum ServiceName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdOutpostsOutpostIdService" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationsCorporationIdOutpostsOutpostIdService() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdOutpostsOutpostIdService" /> class.
        /// </summary>
        /// <param name="discountPerGoodStanding">discount_per_good_standing number (required).</param>
        /// <param name="minimumStanding">minimum_standing number (required).</param>
        /// <param name="serviceName">service_name string (required).</param>
        /// <param name="surchargePerBadStanding">surcharge_per_bad_standing number (required).</param>
        public GetCorporationsCorporationIdOutpostsOutpostIdService(double? discountPerGoodStanding = default(double?), double? minimumStanding = default(double?), ServiceNameEnum serviceName = default(ServiceNameEnum), double? surchargePerBadStanding = default(double?))
        {
            // to ensure "discountPerGoodStanding" is required (not null)
            if (discountPerGoodStanding == null)
            {
                throw new InvalidDataException("discountPerGoodStanding is a required property for GetCorporationsCorporationIdOutpostsOutpostIdService and cannot be null");
            }
            else
            {
                this.DiscountPerGoodStanding = discountPerGoodStanding;
            }
            // to ensure "minimumStanding" is required (not null)
            if (minimumStanding == null)
            {
                throw new InvalidDataException("minimumStanding is a required property for GetCorporationsCorporationIdOutpostsOutpostIdService and cannot be null");
            }
            else
            {
                this.MinimumStanding = minimumStanding;
            }
            // to ensure "serviceName" is required (not null)
            if (serviceName == null)
            {
                throw new InvalidDataException("serviceName is a required property for GetCorporationsCorporationIdOutpostsOutpostIdService and cannot be null");
            }
            else
            {
                this.ServiceName = serviceName;
            }
            // to ensure "surchargePerBadStanding" is required (not null)
            if (surchargePerBadStanding == null)
            {
                throw new InvalidDataException("surchargePerBadStanding is a required property for GetCorporationsCorporationIdOutpostsOutpostIdService and cannot be null");
            }
            else
            {
                this.SurchargePerBadStanding = surchargePerBadStanding;
            }
        }
        
        /// <summary>
        /// discount_per_good_standing number
        /// </summary>
        /// <value>discount_per_good_standing number</value>
        [DataMember(Name="discount_per_good_standing", EmitDefaultValue=false)]
        public double? DiscountPerGoodStanding { get; set; }

        /// <summary>
        /// minimum_standing number
        /// </summary>
        /// <value>minimum_standing number</value>
        [DataMember(Name="minimum_standing", EmitDefaultValue=false)]
        public double? MinimumStanding { get; set; }


        /// <summary>
        /// surcharge_per_bad_standing number
        /// </summary>
        /// <value>surcharge_per_bad_standing number</value>
        [DataMember(Name="surcharge_per_bad_standing", EmitDefaultValue=false)]
        public double? SurchargePerBadStanding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationsCorporationIdOutpostsOutpostIdService {\n");
            sb.Append("  DiscountPerGoodStanding: ").Append(DiscountPerGoodStanding).Append("\n");
            sb.Append("  MinimumStanding: ").Append(MinimumStanding).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  SurchargePerBadStanding: ").Append(SurchargePerBadStanding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationsCorporationIdOutpostsOutpostIdService);
        }

        /// <summary>
        /// Returns true if GetCorporationsCorporationIdOutpostsOutpostIdService instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationsCorporationIdOutpostsOutpostIdService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationsCorporationIdOutpostsOutpostIdService input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DiscountPerGoodStanding == input.DiscountPerGoodStanding ||
                    (this.DiscountPerGoodStanding != null &&
                    this.DiscountPerGoodStanding.Equals(input.DiscountPerGoodStanding))
                ) && 
                (
                    this.MinimumStanding == input.MinimumStanding ||
                    (this.MinimumStanding != null &&
                    this.MinimumStanding.Equals(input.MinimumStanding))
                ) && 
                (
                    this.ServiceName == input.ServiceName ||
                    (this.ServiceName != null &&
                    this.ServiceName.Equals(input.ServiceName))
                ) && 
                (
                    this.SurchargePerBadStanding == input.SurchargePerBadStanding ||
                    (this.SurchargePerBadStanding != null &&
                    this.SurchargePerBadStanding.Equals(input.SurchargePerBadStanding))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DiscountPerGoodStanding != null)
                    hashCode = hashCode * 59 + this.DiscountPerGoodStanding.GetHashCode();
                if (this.MinimumStanding != null)
                    hashCode = hashCode * 59 + this.MinimumStanding.GetHashCode();
                if (this.ServiceName != null)
                    hashCode = hashCode * 59 + this.ServiceName.GetHashCode();
                if (this.SurchargePerBadStanding != null)
                    hashCode = hashCode * 59 + this.SurchargePerBadStanding.GetHashCode();
                return hashCode;
            }
        }
    }

}
