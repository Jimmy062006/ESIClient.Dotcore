/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// planet object
    /// </summary>
    [DataContract]
    public partial class GetUniverseSystemsSystemIdPlanet :  IEquatable<GetUniverseSystemsSystemIdPlanet>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseSystemsSystemIdPlanet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetUniverseSystemsSystemIdPlanet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseSystemsSystemIdPlanet" /> class.
        /// </summary>
        /// <param name="asteroidBelts">asteroid_belts array.</param>
        /// <param name="moons">moons array.</param>
        /// <param name="planetId">planet_id integer (required).</param>
        public GetUniverseSystemsSystemIdPlanet(List<int?> asteroidBelts = default(List<int?>), List<int?> moons = default(List<int?>), int? planetId = default(int?))
        {
            // to ensure "planetId" is required (not null)
            if (planetId == null)
            {
                throw new InvalidDataException("planetId is a required property for GetUniverseSystemsSystemIdPlanet and cannot be null");
            }
            else
            {
                this.PlanetId = planetId;
            }
            this.AsteroidBelts = asteroidBelts;
            this.Moons = moons;
        }
        
        /// <summary>
        /// asteroid_belts array
        /// </summary>
        /// <value>asteroid_belts array</value>
        [DataMember(Name="asteroid_belts", EmitDefaultValue=false)]
        public List<int?> AsteroidBelts { get; set; }

        /// <summary>
        /// moons array
        /// </summary>
        /// <value>moons array</value>
        [DataMember(Name="moons", EmitDefaultValue=false)]
        public List<int?> Moons { get; set; }

        /// <summary>
        /// planet_id integer
        /// </summary>
        /// <value>planet_id integer</value>
        [DataMember(Name="planet_id", EmitDefaultValue=false)]
        public int? PlanetId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUniverseSystemsSystemIdPlanet {\n");
            sb.Append("  AsteroidBelts: ").Append(AsteroidBelts).Append("\n");
            sb.Append("  Moons: ").Append(Moons).Append("\n");
            sb.Append("  PlanetId: ").Append(PlanetId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUniverseSystemsSystemIdPlanet);
        }

        /// <summary>
        /// Returns true if GetUniverseSystemsSystemIdPlanet instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUniverseSystemsSystemIdPlanet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUniverseSystemsSystemIdPlanet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AsteroidBelts == input.AsteroidBelts ||
                    this.AsteroidBelts != null &&
                    this.AsteroidBelts.SequenceEqual(input.AsteroidBelts)
                ) && 
                (
                    this.Moons == input.Moons ||
                    this.Moons != null &&
                    this.Moons.SequenceEqual(input.Moons)
                ) && 
                (
                    this.PlanetId == input.PlanetId ||
                    (this.PlanetId != null &&
                    this.PlanetId.Equals(input.PlanetId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AsteroidBelts != null)
                    hashCode = hashCode * 59 + this.AsteroidBelts.GetHashCode();
                if (this.Moons != null)
                    hashCode = hashCode * 59 + this.Moons.GetHashCode();
                if (this.PlanetId != null)
                    hashCode = hashCode * 59 + this.PlanetId.GetHashCode();
                return hashCode;
            }
        }
    }

}
