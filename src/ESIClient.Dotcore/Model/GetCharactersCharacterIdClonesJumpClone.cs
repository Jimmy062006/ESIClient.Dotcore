/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// jump_clone object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdClonesJumpClone :  IEquatable<GetCharactersCharacterIdClonesJumpClone>
    {
        /// <summary>
        /// location_type string
        /// </summary>
        /// <value>location_type string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LocationTypeEnum
        {
            
            /// <summary>
            /// Enum Station for value: station
            /// </summary>
            [EnumMember(Value = "station")]
            Station = 1,
            
            /// <summary>
            /// Enum Structure for value: structure
            /// </summary>
            [EnumMember(Value = "structure")]
            Structure = 2
        }

        /// <summary>
        /// location_type string
        /// </summary>
        /// <value>location_type string</value>
        [DataMember(Name="location_type", EmitDefaultValue=false)]
        public LocationTypeEnum LocationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdClonesJumpClone" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdClonesJumpClone() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdClonesJumpClone" /> class.
        /// </summary>
        /// <param name="implants">implants array (required).</param>
        /// <param name="jumpCloneId">jump_clone_id integer (required).</param>
        /// <param name="locationId">location_id integer (required).</param>
        /// <param name="locationType">location_type string (required).</param>
        /// <param name="name">name string.</param>
        public GetCharactersCharacterIdClonesJumpClone(List<int?> implants = default(List<int?>), int? jumpCloneId = default(int?), long? locationId = default(long?), LocationTypeEnum locationType = default(LocationTypeEnum), string name = default(string))
        {
            // to ensure "implants" is required (not null)
            if (implants == null)
            {
                throw new InvalidDataException("implants is a required property for GetCharactersCharacterIdClonesJumpClone and cannot be null");
            }
            else
            {
                this.Implants = implants;
            }
            // to ensure "jumpCloneId" is required (not null)
            if (jumpCloneId == null)
            {
                throw new InvalidDataException("jumpCloneId is a required property for GetCharactersCharacterIdClonesJumpClone and cannot be null");
            }
            else
            {
                this.JumpCloneId = jumpCloneId;
            }
            // to ensure "locationId" is required (not null)
            if (locationId == null)
            {
                throw new InvalidDataException("locationId is a required property for GetCharactersCharacterIdClonesJumpClone and cannot be null");
            }
            else
            {
                this.LocationId = locationId;
            }
            // to ensure "locationType" is required (not null)
            if (locationType == null)
            {
                throw new InvalidDataException("locationType is a required property for GetCharactersCharacterIdClonesJumpClone and cannot be null");
            }
            else
            {
                this.LocationType = locationType;
            }
            this.Name = name;
        }
        
        /// <summary>
        /// implants array
        /// </summary>
        /// <value>implants array</value>
        [DataMember(Name="implants", EmitDefaultValue=false)]
        public List<int?> Implants { get; set; }

        /// <summary>
        /// jump_clone_id integer
        /// </summary>
        /// <value>jump_clone_id integer</value>
        [DataMember(Name="jump_clone_id", EmitDefaultValue=false)]
        public int? JumpCloneId { get; set; }

        /// <summary>
        /// location_id integer
        /// </summary>
        /// <value>location_id integer</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public long? LocationId { get; set; }


        /// <summary>
        /// name string
        /// </summary>
        /// <value>name string</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdClonesJumpClone {\n");
            sb.Append("  Implants: ").Append(Implants).Append("\n");
            sb.Append("  JumpCloneId: ").Append(JumpCloneId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  LocationType: ").Append(LocationType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdClonesJumpClone);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdClonesJumpClone instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdClonesJumpClone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdClonesJumpClone input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Implants == input.Implants ||
                    this.Implants != null &&
                    this.Implants.SequenceEqual(input.Implants)
                ) && 
                (
                    this.JumpCloneId == input.JumpCloneId ||
                    (this.JumpCloneId != null &&
                    this.JumpCloneId.Equals(input.JumpCloneId))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.LocationType == input.LocationType ||
                    (this.LocationType != null &&
                    this.LocationType.Equals(input.LocationType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Implants != null)
                    hashCode = hashCode * 59 + this.Implants.GetHashCode();
                if (this.JumpCloneId != null)
                    hashCode = hashCode * 59 + this.JumpCloneId.GetHashCode();
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.LocationType != null)
                    hashCode = hashCode * 59 + this.LocationType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }
    }

}
