/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationsCorporationIdMembersTitles200Ok :  IEquatable<GetCorporationsCorporationIdMembersTitles200Ok>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdMembersTitles200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationsCorporationIdMembersTitles200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdMembersTitles200Ok" /> class.
        /// </summary>
        /// <param name="characterId">character_id integer (required).</param>
        /// <param name="titles">A list of title_id (required).</param>
        public GetCorporationsCorporationIdMembersTitles200Ok(int? characterId = default(int?), List<int?> titles = default(List<int?>))
        {
            // to ensure "characterId" is required (not null)
            if (characterId == null)
            {
                throw new InvalidDataException("characterId is a required property for GetCorporationsCorporationIdMembersTitles200Ok and cannot be null");
            }
            else
            {
                this.CharacterId = characterId;
            }
            // to ensure "titles" is required (not null)
            if (titles == null)
            {
                throw new InvalidDataException("titles is a required property for GetCorporationsCorporationIdMembersTitles200Ok and cannot be null");
            }
            else
            {
                this.Titles = titles;
            }
        }
        
        /// <summary>
        /// character_id integer
        /// </summary>
        /// <value>character_id integer</value>
        [DataMember(Name="character_id", EmitDefaultValue=false)]
        public int? CharacterId { get; set; }

        /// <summary>
        /// A list of title_id
        /// </summary>
        /// <value>A list of title_id</value>
        [DataMember(Name="titles", EmitDefaultValue=false)]
        public List<int?> Titles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationsCorporationIdMembersTitles200Ok {\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  Titles: ").Append(Titles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationsCorporationIdMembersTitles200Ok);
        }

        /// <summary>
        /// Returns true if GetCorporationsCorporationIdMembersTitles200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationsCorporationIdMembersTitles200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationsCorporationIdMembersTitles200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CharacterId == input.CharacterId ||
                    (this.CharacterId != null &&
                    this.CharacterId.Equals(input.CharacterId))
                ) && 
                (
                    this.Titles == input.Titles ||
                    this.Titles != null &&
                    this.Titles.SequenceEqual(input.Titles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CharacterId != null)
                    hashCode = hashCode * 59 + this.CharacterId.GetHashCode();
                if (this.Titles != null)
                    hashCode = hashCode * 59 + this.Titles.GetHashCode();
                return hashCode;
            }
        }
    }

}
