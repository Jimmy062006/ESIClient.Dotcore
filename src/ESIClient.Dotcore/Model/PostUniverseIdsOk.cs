/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class PostUniverseIdsOk :  IEquatable<PostUniverseIdsOk>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostUniverseIdsOk" /> class.
        /// </summary>
        /// <param name="agents">agents array.</param>
        /// <param name="alliances">alliances array.</param>
        /// <param name="characters">characters array.</param>
        /// <param name="constellations">constellations array.</param>
        /// <param name="corporations">corporations array.</param>
        /// <param name="factions">factions array.</param>
        /// <param name="inventoryTypes">inventory_types array.</param>
        /// <param name="regions">regions array.</param>
        /// <param name="stations">stations array.</param>
        /// <param name="systems">systems array.</param>
        public PostUniverseIdsOk(List<PostUniverseIdsAgent> agents = default(List<PostUniverseIdsAgent>), List<PostUniverseIdsAlliance> alliances = default(List<PostUniverseIdsAlliance>), List<PostUniverseIdsCharacter> characters = default(List<PostUniverseIdsCharacter>), List<PostUniverseIdsConstellation> constellations = default(List<PostUniverseIdsConstellation>), List<PostUniverseIdsCorporation> corporations = default(List<PostUniverseIdsCorporation>), List<PostUniverseIdsFaction> factions = default(List<PostUniverseIdsFaction>), List<PostUniverseIdsInventoryType> inventoryTypes = default(List<PostUniverseIdsInventoryType>), List<PostUniverseIdsRegion> regions = default(List<PostUniverseIdsRegion>), List<PostUniverseIdsStation> stations = default(List<PostUniverseIdsStation>), List<PostUniverseIdsSystem> systems = default(List<PostUniverseIdsSystem>))
        {
            this.Agents = agents;
            this.Alliances = alliances;
            this.Characters = characters;
            this.Constellations = constellations;
            this.Corporations = corporations;
            this.Factions = factions;
            this.InventoryTypes = inventoryTypes;
            this.Regions = regions;
            this.Stations = stations;
            this.Systems = systems;
        }
        
        /// <summary>
        /// agents array
        /// </summary>
        /// <value>agents array</value>
        [DataMember(Name="agents", EmitDefaultValue=false)]
        public List<PostUniverseIdsAgent> Agents { get; set; }

        /// <summary>
        /// alliances array
        /// </summary>
        /// <value>alliances array</value>
        [DataMember(Name="alliances", EmitDefaultValue=false)]
        public List<PostUniverseIdsAlliance> Alliances { get; set; }

        /// <summary>
        /// characters array
        /// </summary>
        /// <value>characters array</value>
        [DataMember(Name="characters", EmitDefaultValue=false)]
        public List<PostUniverseIdsCharacter> Characters { get; set; }

        /// <summary>
        /// constellations array
        /// </summary>
        /// <value>constellations array</value>
        [DataMember(Name="constellations", EmitDefaultValue=false)]
        public List<PostUniverseIdsConstellation> Constellations { get; set; }

        /// <summary>
        /// corporations array
        /// </summary>
        /// <value>corporations array</value>
        [DataMember(Name="corporations", EmitDefaultValue=false)]
        public List<PostUniverseIdsCorporation> Corporations { get; set; }

        /// <summary>
        /// factions array
        /// </summary>
        /// <value>factions array</value>
        [DataMember(Name="factions", EmitDefaultValue=false)]
        public List<PostUniverseIdsFaction> Factions { get; set; }

        /// <summary>
        /// inventory_types array
        /// </summary>
        /// <value>inventory_types array</value>
        [DataMember(Name="inventory_types", EmitDefaultValue=false)]
        public List<PostUniverseIdsInventoryType> InventoryTypes { get; set; }

        /// <summary>
        /// regions array
        /// </summary>
        /// <value>regions array</value>
        [DataMember(Name="regions", EmitDefaultValue=false)]
        public List<PostUniverseIdsRegion> Regions { get; set; }

        /// <summary>
        /// stations array
        /// </summary>
        /// <value>stations array</value>
        [DataMember(Name="stations", EmitDefaultValue=false)]
        public List<PostUniverseIdsStation> Stations { get; set; }

        /// <summary>
        /// systems array
        /// </summary>
        /// <value>systems array</value>
        [DataMember(Name="systems", EmitDefaultValue=false)]
        public List<PostUniverseIdsSystem> Systems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostUniverseIdsOk {\n");
            sb.Append("  Agents: ").Append(Agents).Append("\n");
            sb.Append("  Alliances: ").Append(Alliances).Append("\n");
            sb.Append("  Characters: ").Append(Characters).Append("\n");
            sb.Append("  Constellations: ").Append(Constellations).Append("\n");
            sb.Append("  Corporations: ").Append(Corporations).Append("\n");
            sb.Append("  Factions: ").Append(Factions).Append("\n");
            sb.Append("  InventoryTypes: ").Append(InventoryTypes).Append("\n");
            sb.Append("  Regions: ").Append(Regions).Append("\n");
            sb.Append("  Stations: ").Append(Stations).Append("\n");
            sb.Append("  Systems: ").Append(Systems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostUniverseIdsOk);
        }

        /// <summary>
        /// Returns true if PostUniverseIdsOk instances are equal
        /// </summary>
        /// <param name="input">Instance of PostUniverseIdsOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostUniverseIdsOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Agents == input.Agents ||
                    this.Agents != null &&
                    this.Agents.SequenceEqual(input.Agents)
                ) && 
                (
                    this.Alliances == input.Alliances ||
                    this.Alliances != null &&
                    this.Alliances.SequenceEqual(input.Alliances)
                ) && 
                (
                    this.Characters == input.Characters ||
                    this.Characters != null &&
                    this.Characters.SequenceEqual(input.Characters)
                ) && 
                (
                    this.Constellations == input.Constellations ||
                    this.Constellations != null &&
                    this.Constellations.SequenceEqual(input.Constellations)
                ) && 
                (
                    this.Corporations == input.Corporations ||
                    this.Corporations != null &&
                    this.Corporations.SequenceEqual(input.Corporations)
                ) && 
                (
                    this.Factions == input.Factions ||
                    this.Factions != null &&
                    this.Factions.SequenceEqual(input.Factions)
                ) && 
                (
                    this.InventoryTypes == input.InventoryTypes ||
                    this.InventoryTypes != null &&
                    this.InventoryTypes.SequenceEqual(input.InventoryTypes)
                ) && 
                (
                    this.Regions == input.Regions ||
                    this.Regions != null &&
                    this.Regions.SequenceEqual(input.Regions)
                ) && 
                (
                    this.Stations == input.Stations ||
                    this.Stations != null &&
                    this.Stations.SequenceEqual(input.Stations)
                ) && 
                (
                    this.Systems == input.Systems ||
                    this.Systems != null &&
                    this.Systems.SequenceEqual(input.Systems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Agents != null)
                    hashCode = hashCode * 59 + this.Agents.GetHashCode();
                if (this.Alliances != null)
                    hashCode = hashCode * 59 + this.Alliances.GetHashCode();
                if (this.Characters != null)
                    hashCode = hashCode * 59 + this.Characters.GetHashCode();
                if (this.Constellations != null)
                    hashCode = hashCode * 59 + this.Constellations.GetHashCode();
                if (this.Corporations != null)
                    hashCode = hashCode * 59 + this.Corporations.GetHashCode();
                if (this.Factions != null)
                    hashCode = hashCode * 59 + this.Factions.GetHashCode();
                if (this.InventoryTypes != null)
                    hashCode = hashCode * 59 + this.InventoryTypes.GetHashCode();
                if (this.Regions != null)
                    hashCode = hashCode * 59 + this.Regions.GetHashCode();
                if (this.Stations != null)
                    hashCode = hashCode * 59 + this.Stations.GetHashCode();
                if (this.Systems != null)
                    hashCode = hashCode * 59 + this.Systems.GetHashCode();
                return hashCode;
            }
        }
    }

}
