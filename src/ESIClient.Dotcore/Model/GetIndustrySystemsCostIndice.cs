/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// cost_indice object
    /// </summary>
    [DataContract]
    public partial class GetIndustrySystemsCostIndice :  IEquatable<GetIndustrySystemsCostIndice>
    {
        /// <summary>
        /// activity string
        /// </summary>
        /// <value>activity string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActivityEnum
        {
            
            /// <summary>
            /// Enum Copying for value: copying
            /// </summary>
            [EnumMember(Value = "copying")]
            Copying = 1,
            
            /// <summary>
            /// Enum Duplicating for value: duplicating
            /// </summary>
            [EnumMember(Value = "duplicating")]
            Duplicating = 2,
            
            /// <summary>
            /// Enum Invention for value: invention
            /// </summary>
            [EnumMember(Value = "invention")]
            Invention = 3,
            
            /// <summary>
            /// Enum Manufacturing for value: manufacturing
            /// </summary>
            [EnumMember(Value = "manufacturing")]
            Manufacturing = 4,
            
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 5,
            
            /// <summary>
            /// Enum Reaction for value: reaction
            /// </summary>
            [EnumMember(Value = "reaction")]
            Reaction = 6,
            
            /// <summary>
            /// Enum Researchingmaterialefficiency for value: researching_material_efficiency
            /// </summary>
            [EnumMember(Value = "researching_material_efficiency")]
            Researchingmaterialefficiency = 7,
            
            /// <summary>
            /// Enum Researchingtechnology for value: researching_technology
            /// </summary>
            [EnumMember(Value = "researching_technology")]
            Researchingtechnology = 8,
            
            /// <summary>
            /// Enum Researchingtimeefficiency for value: researching_time_efficiency
            /// </summary>
            [EnumMember(Value = "researching_time_efficiency")]
            Researchingtimeefficiency = 9,
            
            /// <summary>
            /// Enum Reverseengineering for value: reverse_engineering
            /// </summary>
            [EnumMember(Value = "reverse_engineering")]
            Reverseengineering = 10
        }

        /// <summary>
        /// activity string
        /// </summary>
        /// <value>activity string</value>
        [DataMember(Name="activity", EmitDefaultValue=false)]
        public ActivityEnum Activity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetIndustrySystemsCostIndice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetIndustrySystemsCostIndice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetIndustrySystemsCostIndice" /> class.
        /// </summary>
        /// <param name="activity">activity string (required).</param>
        /// <param name="costIndex">cost_index number (required).</param>
        public GetIndustrySystemsCostIndice(ActivityEnum activity = default(ActivityEnum), float? costIndex = default(float?))
        {
            // to ensure "activity" is required (not null)
            if (activity == null)
            {
                throw new InvalidDataException("activity is a required property for GetIndustrySystemsCostIndice and cannot be null");
            }
            else
            {
                this.Activity = activity;
            }
            // to ensure "costIndex" is required (not null)
            if (costIndex == null)
            {
                throw new InvalidDataException("costIndex is a required property for GetIndustrySystemsCostIndice and cannot be null");
            }
            else
            {
                this.CostIndex = costIndex;
            }
        }
        

        /// <summary>
        /// cost_index number
        /// </summary>
        /// <value>cost_index number</value>
        [DataMember(Name="cost_index", EmitDefaultValue=false)]
        public float? CostIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetIndustrySystemsCostIndice {\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  CostIndex: ").Append(CostIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetIndustrySystemsCostIndice);
        }

        /// <summary>
        /// Returns true if GetIndustrySystemsCostIndice instances are equal
        /// </summary>
        /// <param name="input">Instance of GetIndustrySystemsCostIndice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetIndustrySystemsCostIndice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Activity == input.Activity ||
                    (this.Activity != null &&
                    this.Activity.Equals(input.Activity))
                ) && 
                (
                    this.CostIndex == input.CostIndex ||
                    (this.CostIndex != null &&
                    this.CostIndex.Equals(input.CostIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Activity != null)
                    hashCode = hashCode * 59 + this.Activity.GetHashCode();
                if (this.CostIndex != null)
                    hashCode = hashCode * 59 + this.CostIndex.GetHashCode();
                return hashCode;
            }
        }
    }

}
