/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdAgentsResearch200Ok :  IEquatable<GetCharactersCharacterIdAgentsResearch200Ok>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdAgentsResearch200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdAgentsResearch200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdAgentsResearch200Ok" /> class.
        /// </summary>
        /// <param name="agentId">agent_id integer (required).</param>
        /// <param name="pointsPerDay">points_per_day number (required).</param>
        /// <param name="remainderPoints">remainder_points number (required).</param>
        /// <param name="skillTypeId">skill_type_id integer (required).</param>
        /// <param name="startedAt">started_at string (required).</param>
        public GetCharactersCharacterIdAgentsResearch200Ok(int? agentId = default(int?), float? pointsPerDay = default(float?), float? remainderPoints = default(float?), int? skillTypeId = default(int?), DateTime? startedAt = default(DateTime?))
        {
            // to ensure "agentId" is required (not null)
            if (agentId == null)
            {
                throw new InvalidDataException("agentId is a required property for GetCharactersCharacterIdAgentsResearch200Ok and cannot be null");
            }
            else
            {
                this.AgentId = agentId;
            }
            // to ensure "pointsPerDay" is required (not null)
            if (pointsPerDay == null)
            {
                throw new InvalidDataException("pointsPerDay is a required property for GetCharactersCharacterIdAgentsResearch200Ok and cannot be null");
            }
            else
            {
                this.PointsPerDay = pointsPerDay;
            }
            // to ensure "remainderPoints" is required (not null)
            if (remainderPoints == null)
            {
                throw new InvalidDataException("remainderPoints is a required property for GetCharactersCharacterIdAgentsResearch200Ok and cannot be null");
            }
            else
            {
                this.RemainderPoints = remainderPoints;
            }
            // to ensure "skillTypeId" is required (not null)
            if (skillTypeId == null)
            {
                throw new InvalidDataException("skillTypeId is a required property for GetCharactersCharacterIdAgentsResearch200Ok and cannot be null");
            }
            else
            {
                this.SkillTypeId = skillTypeId;
            }
            // to ensure "startedAt" is required (not null)
            if (startedAt == null)
            {
                throw new InvalidDataException("startedAt is a required property for GetCharactersCharacterIdAgentsResearch200Ok and cannot be null");
            }
            else
            {
                this.StartedAt = startedAt;
            }
        }
        
        /// <summary>
        /// agent_id integer
        /// </summary>
        /// <value>agent_id integer</value>
        [DataMember(Name="agent_id", EmitDefaultValue=false)]
        public int? AgentId { get; set; }

        /// <summary>
        /// points_per_day number
        /// </summary>
        /// <value>points_per_day number</value>
        [DataMember(Name="points_per_day", EmitDefaultValue=false)]
        public float? PointsPerDay { get; set; }

        /// <summary>
        /// remainder_points number
        /// </summary>
        /// <value>remainder_points number</value>
        [DataMember(Name="remainder_points", EmitDefaultValue=false)]
        public float? RemainderPoints { get; set; }

        /// <summary>
        /// skill_type_id integer
        /// </summary>
        /// <value>skill_type_id integer</value>
        [DataMember(Name="skill_type_id", EmitDefaultValue=false)]
        public int? SkillTypeId { get; set; }

        /// <summary>
        /// started_at string
        /// </summary>
        /// <value>started_at string</value>
        [DataMember(Name="started_at", EmitDefaultValue=false)]
        public DateTime? StartedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdAgentsResearch200Ok {\n");
            sb.Append("  AgentId: ").Append(AgentId).Append("\n");
            sb.Append("  PointsPerDay: ").Append(PointsPerDay).Append("\n");
            sb.Append("  RemainderPoints: ").Append(RemainderPoints).Append("\n");
            sb.Append("  SkillTypeId: ").Append(SkillTypeId).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdAgentsResearch200Ok);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdAgentsResearch200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdAgentsResearch200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdAgentsResearch200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AgentId == input.AgentId ||
                    (this.AgentId != null &&
                    this.AgentId.Equals(input.AgentId))
                ) && 
                (
                    this.PointsPerDay == input.PointsPerDay ||
                    (this.PointsPerDay != null &&
                    this.PointsPerDay.Equals(input.PointsPerDay))
                ) && 
                (
                    this.RemainderPoints == input.RemainderPoints ||
                    (this.RemainderPoints != null &&
                    this.RemainderPoints.Equals(input.RemainderPoints))
                ) && 
                (
                    this.SkillTypeId == input.SkillTypeId ||
                    (this.SkillTypeId != null &&
                    this.SkillTypeId.Equals(input.SkillTypeId))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgentId != null)
                    hashCode = hashCode * 59 + this.AgentId.GetHashCode();
                if (this.PointsPerDay != null)
                    hashCode = hashCode * 59 + this.PointsPerDay.GetHashCode();
                if (this.RemainderPoints != null)
                    hashCode = hashCode * 59 + this.RemainderPoints.GetHashCode();
                if (this.SkillTypeId != null)
                    hashCode = hashCode * 59 + this.SkillTypeId.GetHashCode();
                if (this.StartedAt != null)
                    hashCode = hashCode * 59 + this.StartedAt.GetHashCode();
                return hashCode;
            }
        }
    }

}
