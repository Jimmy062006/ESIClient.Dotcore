/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// item object
    /// </summary>
    [DataContract]
    public partial class GetKillmailsKillmailIdKillmailHashItem :  IEquatable<GetKillmailsKillmailIdKillmailHashItem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetKillmailsKillmailIdKillmailHashItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetKillmailsKillmailIdKillmailHashItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetKillmailsKillmailIdKillmailHashItem" /> class.
        /// </summary>
        /// <param name="flag">Flag for the location of the item  (required).</param>
        /// <param name="itemTypeId">item_type_id integer (required).</param>
        /// <param name="items">items array.</param>
        /// <param name="quantityDestroyed">How many of the item were destroyed if any .</param>
        /// <param name="quantityDropped">How many of the item were dropped if any .</param>
        /// <param name="singleton">singleton integer (required).</param>
        public GetKillmailsKillmailIdKillmailHashItem(int? flag = default(int?), int? itemTypeId = default(int?), List<GetKillmailsKillmailIdKillmailHashItemsItem> items = default(List<GetKillmailsKillmailIdKillmailHashItemsItem>), long? quantityDestroyed = default(long?), long? quantityDropped = default(long?), int? singleton = default(int?))
        {
            // to ensure "flag" is required (not null)
            if (flag == null)
            {
                throw new InvalidDataException("flag is a required property for GetKillmailsKillmailIdKillmailHashItem and cannot be null");
            }
            else
            {
                this.Flag = flag;
            }
            // to ensure "itemTypeId" is required (not null)
            if (itemTypeId == null)
            {
                throw new InvalidDataException("itemTypeId is a required property for GetKillmailsKillmailIdKillmailHashItem and cannot be null");
            }
            else
            {
                this.ItemTypeId = itemTypeId;
            }
            // to ensure "singleton" is required (not null)
            if (singleton == null)
            {
                throw new InvalidDataException("singleton is a required property for GetKillmailsKillmailIdKillmailHashItem and cannot be null");
            }
            else
            {
                this.Singleton = singleton;
            }
            this.Items = items;
            this.QuantityDestroyed = quantityDestroyed;
            this.QuantityDropped = quantityDropped;
        }
        
        /// <summary>
        /// Flag for the location of the item 
        /// </summary>
        /// <value>Flag for the location of the item </value>
        [DataMember(Name="flag", EmitDefaultValue=false)]
        public int? Flag { get; set; }

        /// <summary>
        /// item_type_id integer
        /// </summary>
        /// <value>item_type_id integer</value>
        [DataMember(Name="item_type_id", EmitDefaultValue=false)]
        public int? ItemTypeId { get; set; }

        /// <summary>
        /// items array
        /// </summary>
        /// <value>items array</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<GetKillmailsKillmailIdKillmailHashItemsItem> Items { get; set; }

        /// <summary>
        /// How many of the item were destroyed if any 
        /// </summary>
        /// <value>How many of the item were destroyed if any </value>
        [DataMember(Name="quantity_destroyed", EmitDefaultValue=false)]
        public long? QuantityDestroyed { get; set; }

        /// <summary>
        /// How many of the item were dropped if any 
        /// </summary>
        /// <value>How many of the item were dropped if any </value>
        [DataMember(Name="quantity_dropped", EmitDefaultValue=false)]
        public long? QuantityDropped { get; set; }

        /// <summary>
        /// singleton integer
        /// </summary>
        /// <value>singleton integer</value>
        [DataMember(Name="singleton", EmitDefaultValue=false)]
        public int? Singleton { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetKillmailsKillmailIdKillmailHashItem {\n");
            sb.Append("  Flag: ").Append(Flag).Append("\n");
            sb.Append("  ItemTypeId: ").Append(ItemTypeId).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  QuantityDestroyed: ").Append(QuantityDestroyed).Append("\n");
            sb.Append("  QuantityDropped: ").Append(QuantityDropped).Append("\n");
            sb.Append("  Singleton: ").Append(Singleton).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetKillmailsKillmailIdKillmailHashItem);
        }

        /// <summary>
        /// Returns true if GetKillmailsKillmailIdKillmailHashItem instances are equal
        /// </summary>
        /// <param name="input">Instance of GetKillmailsKillmailIdKillmailHashItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetKillmailsKillmailIdKillmailHashItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Flag == input.Flag ||
                    (this.Flag != null &&
                    this.Flag.Equals(input.Flag))
                ) && 
                (
                    this.ItemTypeId == input.ItemTypeId ||
                    (this.ItemTypeId != null &&
                    this.ItemTypeId.Equals(input.ItemTypeId))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.QuantityDestroyed == input.QuantityDestroyed ||
                    (this.QuantityDestroyed != null &&
                    this.QuantityDestroyed.Equals(input.QuantityDestroyed))
                ) && 
                (
                    this.QuantityDropped == input.QuantityDropped ||
                    (this.QuantityDropped != null &&
                    this.QuantityDropped.Equals(input.QuantityDropped))
                ) && 
                (
                    this.Singleton == input.Singleton ||
                    (this.Singleton != null &&
                    this.Singleton.Equals(input.Singleton))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Flag != null)
                    hashCode = hashCode * 59 + this.Flag.GetHashCode();
                if (this.ItemTypeId != null)
                    hashCode = hashCode * 59 + this.ItemTypeId.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.QuantityDestroyed != null)
                    hashCode = hashCode * 59 + this.QuantityDestroyed.GetHashCode();
                if (this.QuantityDropped != null)
                    hashCode = hashCode * 59 + this.QuantityDropped.GetHashCode();
                if (this.Singleton != null)
                    hashCode = hashCode * 59 + this.Singleton.GetHashCode();
                return hashCode;
            }
        }
    }

}
