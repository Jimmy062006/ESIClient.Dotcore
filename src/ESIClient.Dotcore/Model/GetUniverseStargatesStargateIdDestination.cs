/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// destination object
    /// </summary>
    [DataContract]
    public partial class GetUniverseStargatesStargateIdDestination :  IEquatable<GetUniverseStargatesStargateIdDestination>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseStargatesStargateIdDestination" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetUniverseStargatesStargateIdDestination() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseStargatesStargateIdDestination" /> class.
        /// </summary>
        /// <param name="stargateId">The stargate this stargate connects to (required).</param>
        /// <param name="systemId">The solar system this stargate connects to (required).</param>
        public GetUniverseStargatesStargateIdDestination(int? stargateId = default(int?), int? systemId = default(int?))
        {
            // to ensure "stargateId" is required (not null)
            if (stargateId == null)
            {
                throw new InvalidDataException("stargateId is a required property for GetUniverseStargatesStargateIdDestination and cannot be null");
            }
            else
            {
                this.StargateId = stargateId;
            }
            // to ensure "systemId" is required (not null)
            if (systemId == null)
            {
                throw new InvalidDataException("systemId is a required property for GetUniverseStargatesStargateIdDestination and cannot be null");
            }
            else
            {
                this.SystemId = systemId;
            }
        }
        
        /// <summary>
        /// The stargate this stargate connects to
        /// </summary>
        /// <value>The stargate this stargate connects to</value>
        [DataMember(Name="stargate_id", EmitDefaultValue=false)]
        public int? StargateId { get; set; }

        /// <summary>
        /// The solar system this stargate connects to
        /// </summary>
        /// <value>The solar system this stargate connects to</value>
        [DataMember(Name="system_id", EmitDefaultValue=false)]
        public int? SystemId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUniverseStargatesStargateIdDestination {\n");
            sb.Append("  StargateId: ").Append(StargateId).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUniverseStargatesStargateIdDestination);
        }

        /// <summary>
        /// Returns true if GetUniverseStargatesStargateIdDestination instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUniverseStargatesStargateIdDestination to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUniverseStargatesStargateIdDestination input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StargateId == input.StargateId ||
                    (this.StargateId != null &&
                    this.StargateId.Equals(input.StargateId))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StargateId != null)
                    hashCode = hashCode * 59 + this.StargateId.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                return hashCode;
            }
        }
    }

}
