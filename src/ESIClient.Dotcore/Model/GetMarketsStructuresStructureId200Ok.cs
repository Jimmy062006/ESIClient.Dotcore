/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetMarketsStructuresStructureId200Ok :  IEquatable<GetMarketsStructuresStructureId200Ok>
    {
        /// <summary>
        /// range string
        /// </summary>
        /// <value>range string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RangeEnum
        {
            
            /// <summary>
            /// Enum Station for value: station
            /// </summary>
            [EnumMember(Value = "station")]
            Station = 1,
            
            /// <summary>
            /// Enum Region for value: region
            /// </summary>
            [EnumMember(Value = "region")]
            Region = 2,
            
            /// <summary>
            /// Enum Solarsystem for value: solarsystem
            /// </summary>
            [EnumMember(Value = "solarsystem")]
            Solarsystem = 3,
            
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 4,
            
            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 5,
            
            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 6,
            
            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 7,
            
            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 8,
            
            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 9,
            
            /// <summary>
            /// Enum _20 for value: 20
            /// </summary>
            [EnumMember(Value = "20")]
            _20 = 10,
            
            /// <summary>
            /// Enum _30 for value: 30
            /// </summary>
            [EnumMember(Value = "30")]
            _30 = 11,
            
            /// <summary>
            /// Enum _40 for value: 40
            /// </summary>
            [EnumMember(Value = "40")]
            _40 = 12
        }

        /// <summary>
        /// range string
        /// </summary>
        /// <value>range string</value>
        [DataMember(Name="range", EmitDefaultValue=false)]
        public RangeEnum Range { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMarketsStructuresStructureId200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetMarketsStructuresStructureId200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMarketsStructuresStructureId200Ok" /> class.
        /// </summary>
        /// <param name="duration">duration integer (required).</param>
        /// <param name="isBuyOrder">is_buy_order boolean (required).</param>
        /// <param name="issued">issued string (required).</param>
        /// <param name="locationId">location_id integer (required).</param>
        /// <param name="minVolume">min_volume integer (required).</param>
        /// <param name="orderId">order_id integer (required).</param>
        /// <param name="price">price number (required).</param>
        /// <param name="range">range string (required).</param>
        /// <param name="typeId">type_id integer (required).</param>
        /// <param name="volumeRemain">volume_remain integer (required).</param>
        /// <param name="volumeTotal">volume_total integer (required).</param>
        public GetMarketsStructuresStructureId200Ok(int? duration = default(int?), bool? isBuyOrder = default(bool?), DateTime? issued = default(DateTime?), long? locationId = default(long?), int? minVolume = default(int?), long? orderId = default(long?), double? price = default(double?), RangeEnum range = default(RangeEnum), int? typeId = default(int?), int? volumeRemain = default(int?), int? volumeTotal = default(int?))
        {
            // to ensure "duration" is required (not null)
            if (duration == null)
            {
                throw new InvalidDataException("duration is a required property for GetMarketsStructuresStructureId200Ok and cannot be null");
            }
            else
            {
                this.Duration = duration;
            }
            // to ensure "isBuyOrder" is required (not null)
            if (isBuyOrder == null)
            {
                throw new InvalidDataException("isBuyOrder is a required property for GetMarketsStructuresStructureId200Ok and cannot be null");
            }
            else
            {
                this.IsBuyOrder = isBuyOrder;
            }
            // to ensure "issued" is required (not null)
            if (issued == null)
            {
                throw new InvalidDataException("issued is a required property for GetMarketsStructuresStructureId200Ok and cannot be null");
            }
            else
            {
                this.Issued = issued;
            }
            // to ensure "locationId" is required (not null)
            if (locationId == null)
            {
                throw new InvalidDataException("locationId is a required property for GetMarketsStructuresStructureId200Ok and cannot be null");
            }
            else
            {
                this.LocationId = locationId;
            }
            // to ensure "minVolume" is required (not null)
            if (minVolume == null)
            {
                throw new InvalidDataException("minVolume is a required property for GetMarketsStructuresStructureId200Ok and cannot be null");
            }
            else
            {
                this.MinVolume = minVolume;
            }
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new InvalidDataException("orderId is a required property for GetMarketsStructuresStructureId200Ok and cannot be null");
            }
            else
            {
                this.OrderId = orderId;
            }
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new InvalidDataException("price is a required property for GetMarketsStructuresStructureId200Ok and cannot be null");
            }
            else
            {
                this.Price = price;
            }
            // to ensure "range" is required (not null)
            if (range == null)
            {
                throw new InvalidDataException("range is a required property for GetMarketsStructuresStructureId200Ok and cannot be null");
            }
            else
            {
                this.Range = range;
            }
            // to ensure "typeId" is required (not null)
            if (typeId == null)
            {
                throw new InvalidDataException("typeId is a required property for GetMarketsStructuresStructureId200Ok and cannot be null");
            }
            else
            {
                this.TypeId = typeId;
            }
            // to ensure "volumeRemain" is required (not null)
            if (volumeRemain == null)
            {
                throw new InvalidDataException("volumeRemain is a required property for GetMarketsStructuresStructureId200Ok and cannot be null");
            }
            else
            {
                this.VolumeRemain = volumeRemain;
            }
            // to ensure "volumeTotal" is required (not null)
            if (volumeTotal == null)
            {
                throw new InvalidDataException("volumeTotal is a required property for GetMarketsStructuresStructureId200Ok and cannot be null");
            }
            else
            {
                this.VolumeTotal = volumeTotal;
            }
        }
        
        /// <summary>
        /// duration integer
        /// </summary>
        /// <value>duration integer</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// is_buy_order boolean
        /// </summary>
        /// <value>is_buy_order boolean</value>
        [DataMember(Name="is_buy_order", EmitDefaultValue=false)]
        public bool? IsBuyOrder { get; set; }

        /// <summary>
        /// issued string
        /// </summary>
        /// <value>issued string</value>
        [DataMember(Name="issued", EmitDefaultValue=false)]
        public DateTime? Issued { get; set; }

        /// <summary>
        /// location_id integer
        /// </summary>
        /// <value>location_id integer</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public long? LocationId { get; set; }

        /// <summary>
        /// min_volume integer
        /// </summary>
        /// <value>min_volume integer</value>
        [DataMember(Name="min_volume", EmitDefaultValue=false)]
        public int? MinVolume { get; set; }

        /// <summary>
        /// order_id integer
        /// </summary>
        /// <value>order_id integer</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public long? OrderId { get; set; }

        /// <summary>
        /// price number
        /// </summary>
        /// <value>price number</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }


        /// <summary>
        /// type_id integer
        /// </summary>
        /// <value>type_id integer</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// volume_remain integer
        /// </summary>
        /// <value>volume_remain integer</value>
        [DataMember(Name="volume_remain", EmitDefaultValue=false)]
        public int? VolumeRemain { get; set; }

        /// <summary>
        /// volume_total integer
        /// </summary>
        /// <value>volume_total integer</value>
        [DataMember(Name="volume_total", EmitDefaultValue=false)]
        public int? VolumeTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetMarketsStructuresStructureId200Ok {\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  IsBuyOrder: ").Append(IsBuyOrder).Append("\n");
            sb.Append("  Issued: ").Append(Issued).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  MinVolume: ").Append(MinVolume).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  VolumeRemain: ").Append(VolumeRemain).Append("\n");
            sb.Append("  VolumeTotal: ").Append(VolumeTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetMarketsStructuresStructureId200Ok);
        }

        /// <summary>
        /// Returns true if GetMarketsStructuresStructureId200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetMarketsStructuresStructureId200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetMarketsStructuresStructureId200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.IsBuyOrder == input.IsBuyOrder ||
                    (this.IsBuyOrder != null &&
                    this.IsBuyOrder.Equals(input.IsBuyOrder))
                ) && 
                (
                    this.Issued == input.Issued ||
                    (this.Issued != null &&
                    this.Issued.Equals(input.Issued))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.MinVolume == input.MinVolume ||
                    (this.MinVolume != null &&
                    this.MinVolume.Equals(input.MinVolume))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.VolumeRemain == input.VolumeRemain ||
                    (this.VolumeRemain != null &&
                    this.VolumeRemain.Equals(input.VolumeRemain))
                ) && 
                (
                    this.VolumeTotal == input.VolumeTotal ||
                    (this.VolumeTotal != null &&
                    this.VolumeTotal.Equals(input.VolumeTotal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.IsBuyOrder != null)
                    hashCode = hashCode * 59 + this.IsBuyOrder.GetHashCode();
                if (this.Issued != null)
                    hashCode = hashCode * 59 + this.Issued.GetHashCode();
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.MinVolume != null)
                    hashCode = hashCode * 59 + this.MinVolume.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Range != null)
                    hashCode = hashCode * 59 + this.Range.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                if (this.VolumeRemain != null)
                    hashCode = hashCode * 59 + this.VolumeRemain.GetHashCode();
                if (this.VolumeTotal != null)
                    hashCode = hashCode * 59 + this.VolumeTotal.GetHashCode();
                return hashCode;
            }
        }
    }

}
