/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationsCorporationIdContainersLogs200Ok :  IEquatable<GetCorporationsCorporationIdContainersLogs200Ok>
    {
        /// <summary>
        /// action string
        /// </summary>
        /// <value>action string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Add for value: add
            /// </summary>
            [EnumMember(Value = "add")]
            Add = 1,
            
            /// <summary>
            /// Enum Assemble for value: assemble
            /// </summary>
            [EnumMember(Value = "assemble")]
            Assemble = 2,
            
            /// <summary>
            /// Enum Configure for value: configure
            /// </summary>
            [EnumMember(Value = "configure")]
            Configure = 3,
            
            /// <summary>
            /// Enum Enterpassword for value: enter_password
            /// </summary>
            [EnumMember(Value = "enter_password")]
            Enterpassword = 4,
            
            /// <summary>
            /// Enum Lock for value: lock
            /// </summary>
            [EnumMember(Value = "lock")]
            Lock = 5,
            
            /// <summary>
            /// Enum Move for value: move
            /// </summary>
            [EnumMember(Value = "move")]
            Move = 6,
            
            /// <summary>
            /// Enum Repackage for value: repackage
            /// </summary>
            [EnumMember(Value = "repackage")]
            Repackage = 7,
            
            /// <summary>
            /// Enum Setname for value: set_name
            /// </summary>
            [EnumMember(Value = "set_name")]
            Setname = 8,
            
            /// <summary>
            /// Enum Setpassword for value: set_password
            /// </summary>
            [EnumMember(Value = "set_password")]
            Setpassword = 9,
            
            /// <summary>
            /// Enum Unlock for value: unlock
            /// </summary>
            [EnumMember(Value = "unlock")]
            Unlock = 10
        }

        /// <summary>
        /// action string
        /// </summary>
        /// <value>action string</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum Action { get; set; }
        /// <summary>
        /// location_flag string
        /// </summary>
        /// <value>location_flag string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LocationFlagEnum
        {
            
            /// <summary>
            /// Enum AssetSafety for value: AssetSafety
            /// </summary>
            [EnumMember(Value = "AssetSafety")]
            AssetSafety = 1,
            
            /// <summary>
            /// Enum AutoFit for value: AutoFit
            /// </summary>
            [EnumMember(Value = "AutoFit")]
            AutoFit = 2,
            
            /// <summary>
            /// Enum Bonus for value: Bonus
            /// </summary>
            [EnumMember(Value = "Bonus")]
            Bonus = 3,
            
            /// <summary>
            /// Enum Booster for value: Booster
            /// </summary>
            [EnumMember(Value = "Booster")]
            Booster = 4,
            
            /// <summary>
            /// Enum BoosterBay for value: BoosterBay
            /// </summary>
            [EnumMember(Value = "BoosterBay")]
            BoosterBay = 5,
            
            /// <summary>
            /// Enum Capsule for value: Capsule
            /// </summary>
            [EnumMember(Value = "Capsule")]
            Capsule = 6,
            
            /// <summary>
            /// Enum Cargo for value: Cargo
            /// </summary>
            [EnumMember(Value = "Cargo")]
            Cargo = 7,
            
            /// <summary>
            /// Enum CorpDeliveries for value: CorpDeliveries
            /// </summary>
            [EnumMember(Value = "CorpDeliveries")]
            CorpDeliveries = 8,
            
            /// <summary>
            /// Enum CorpSAG1 for value: CorpSAG1
            /// </summary>
            [EnumMember(Value = "CorpSAG1")]
            CorpSAG1 = 9,
            
            /// <summary>
            /// Enum CorpSAG2 for value: CorpSAG2
            /// </summary>
            [EnumMember(Value = "CorpSAG2")]
            CorpSAG2 = 10,
            
            /// <summary>
            /// Enum CorpSAG3 for value: CorpSAG3
            /// </summary>
            [EnumMember(Value = "CorpSAG3")]
            CorpSAG3 = 11,
            
            /// <summary>
            /// Enum CorpSAG4 for value: CorpSAG4
            /// </summary>
            [EnumMember(Value = "CorpSAG4")]
            CorpSAG4 = 12,
            
            /// <summary>
            /// Enum CorpSAG5 for value: CorpSAG5
            /// </summary>
            [EnumMember(Value = "CorpSAG5")]
            CorpSAG5 = 13,
            
            /// <summary>
            /// Enum CorpSAG6 for value: CorpSAG6
            /// </summary>
            [EnumMember(Value = "CorpSAG6")]
            CorpSAG6 = 14,
            
            /// <summary>
            /// Enum CorpSAG7 for value: CorpSAG7
            /// </summary>
            [EnumMember(Value = "CorpSAG7")]
            CorpSAG7 = 15,
            
            /// <summary>
            /// Enum CrateLoot for value: CrateLoot
            /// </summary>
            [EnumMember(Value = "CrateLoot")]
            CrateLoot = 16,
            
            /// <summary>
            /// Enum Deliveries for value: Deliveries
            /// </summary>
            [EnumMember(Value = "Deliveries")]
            Deliveries = 17,
            
            /// <summary>
            /// Enum DroneBay for value: DroneBay
            /// </summary>
            [EnumMember(Value = "DroneBay")]
            DroneBay = 18,
            
            /// <summary>
            /// Enum DustBattle for value: DustBattle
            /// </summary>
            [EnumMember(Value = "DustBattle")]
            DustBattle = 19,
            
            /// <summary>
            /// Enum DustDatabank for value: DustDatabank
            /// </summary>
            [EnumMember(Value = "DustDatabank")]
            DustDatabank = 20,
            
            /// <summary>
            /// Enum FighterBay for value: FighterBay
            /// </summary>
            [EnumMember(Value = "FighterBay")]
            FighterBay = 21,
            
            /// <summary>
            /// Enum FighterTube0 for value: FighterTube0
            /// </summary>
            [EnumMember(Value = "FighterTube0")]
            FighterTube0 = 22,
            
            /// <summary>
            /// Enum FighterTube1 for value: FighterTube1
            /// </summary>
            [EnumMember(Value = "FighterTube1")]
            FighterTube1 = 23,
            
            /// <summary>
            /// Enum FighterTube2 for value: FighterTube2
            /// </summary>
            [EnumMember(Value = "FighterTube2")]
            FighterTube2 = 24,
            
            /// <summary>
            /// Enum FighterTube3 for value: FighterTube3
            /// </summary>
            [EnumMember(Value = "FighterTube3")]
            FighterTube3 = 25,
            
            /// <summary>
            /// Enum FighterTube4 for value: FighterTube4
            /// </summary>
            [EnumMember(Value = "FighterTube4")]
            FighterTube4 = 26,
            
            /// <summary>
            /// Enum FleetHangar for value: FleetHangar
            /// </summary>
            [EnumMember(Value = "FleetHangar")]
            FleetHangar = 27,
            
            /// <summary>
            /// Enum Hangar for value: Hangar
            /// </summary>
            [EnumMember(Value = "Hangar")]
            Hangar = 28,
            
            /// <summary>
            /// Enum HangarAll for value: HangarAll
            /// </summary>
            [EnumMember(Value = "HangarAll")]
            HangarAll = 29,
            
            /// <summary>
            /// Enum HiSlot0 for value: HiSlot0
            /// </summary>
            [EnumMember(Value = "HiSlot0")]
            HiSlot0 = 30,
            
            /// <summary>
            /// Enum HiSlot1 for value: HiSlot1
            /// </summary>
            [EnumMember(Value = "HiSlot1")]
            HiSlot1 = 31,
            
            /// <summary>
            /// Enum HiSlot2 for value: HiSlot2
            /// </summary>
            [EnumMember(Value = "HiSlot2")]
            HiSlot2 = 32,
            
            /// <summary>
            /// Enum HiSlot3 for value: HiSlot3
            /// </summary>
            [EnumMember(Value = "HiSlot3")]
            HiSlot3 = 33,
            
            /// <summary>
            /// Enum HiSlot4 for value: HiSlot4
            /// </summary>
            [EnumMember(Value = "HiSlot4")]
            HiSlot4 = 34,
            
            /// <summary>
            /// Enum HiSlot5 for value: HiSlot5
            /// </summary>
            [EnumMember(Value = "HiSlot5")]
            HiSlot5 = 35,
            
            /// <summary>
            /// Enum HiSlot6 for value: HiSlot6
            /// </summary>
            [EnumMember(Value = "HiSlot6")]
            HiSlot6 = 36,
            
            /// <summary>
            /// Enum HiSlot7 for value: HiSlot7
            /// </summary>
            [EnumMember(Value = "HiSlot7")]
            HiSlot7 = 37,
            
            /// <summary>
            /// Enum HiddenModifiers for value: HiddenModifiers
            /// </summary>
            [EnumMember(Value = "HiddenModifiers")]
            HiddenModifiers = 38,
            
            /// <summary>
            /// Enum Implant for value: Implant
            /// </summary>
            [EnumMember(Value = "Implant")]
            Implant = 39,
            
            /// <summary>
            /// Enum Impounded for value: Impounded
            /// </summary>
            [EnumMember(Value = "Impounded")]
            Impounded = 40,
            
            /// <summary>
            /// Enum JunkyardReprocessed for value: JunkyardReprocessed
            /// </summary>
            [EnumMember(Value = "JunkyardReprocessed")]
            JunkyardReprocessed = 41,
            
            /// <summary>
            /// Enum JunkyardTrashed for value: JunkyardTrashed
            /// </summary>
            [EnumMember(Value = "JunkyardTrashed")]
            JunkyardTrashed = 42,
            
            /// <summary>
            /// Enum LoSlot0 for value: LoSlot0
            /// </summary>
            [EnumMember(Value = "LoSlot0")]
            LoSlot0 = 43,
            
            /// <summary>
            /// Enum LoSlot1 for value: LoSlot1
            /// </summary>
            [EnumMember(Value = "LoSlot1")]
            LoSlot1 = 44,
            
            /// <summary>
            /// Enum LoSlot2 for value: LoSlot2
            /// </summary>
            [EnumMember(Value = "LoSlot2")]
            LoSlot2 = 45,
            
            /// <summary>
            /// Enum LoSlot3 for value: LoSlot3
            /// </summary>
            [EnumMember(Value = "LoSlot3")]
            LoSlot3 = 46,
            
            /// <summary>
            /// Enum LoSlot4 for value: LoSlot4
            /// </summary>
            [EnumMember(Value = "LoSlot4")]
            LoSlot4 = 47,
            
            /// <summary>
            /// Enum LoSlot5 for value: LoSlot5
            /// </summary>
            [EnumMember(Value = "LoSlot5")]
            LoSlot5 = 48,
            
            /// <summary>
            /// Enum LoSlot6 for value: LoSlot6
            /// </summary>
            [EnumMember(Value = "LoSlot6")]
            LoSlot6 = 49,
            
            /// <summary>
            /// Enum LoSlot7 for value: LoSlot7
            /// </summary>
            [EnumMember(Value = "LoSlot7")]
            LoSlot7 = 50,
            
            /// <summary>
            /// Enum Locked for value: Locked
            /// </summary>
            [EnumMember(Value = "Locked")]
            Locked = 51,
            
            /// <summary>
            /// Enum MedSlot0 for value: MedSlot0
            /// </summary>
            [EnumMember(Value = "MedSlot0")]
            MedSlot0 = 52,
            
            /// <summary>
            /// Enum MedSlot1 for value: MedSlot1
            /// </summary>
            [EnumMember(Value = "MedSlot1")]
            MedSlot1 = 53,
            
            /// <summary>
            /// Enum MedSlot2 for value: MedSlot2
            /// </summary>
            [EnumMember(Value = "MedSlot2")]
            MedSlot2 = 54,
            
            /// <summary>
            /// Enum MedSlot3 for value: MedSlot3
            /// </summary>
            [EnumMember(Value = "MedSlot3")]
            MedSlot3 = 55,
            
            /// <summary>
            /// Enum MedSlot4 for value: MedSlot4
            /// </summary>
            [EnumMember(Value = "MedSlot4")]
            MedSlot4 = 56,
            
            /// <summary>
            /// Enum MedSlot5 for value: MedSlot5
            /// </summary>
            [EnumMember(Value = "MedSlot5")]
            MedSlot5 = 57,
            
            /// <summary>
            /// Enum MedSlot6 for value: MedSlot6
            /// </summary>
            [EnumMember(Value = "MedSlot6")]
            MedSlot6 = 58,
            
            /// <summary>
            /// Enum MedSlot7 for value: MedSlot7
            /// </summary>
            [EnumMember(Value = "MedSlot7")]
            MedSlot7 = 59,
            
            /// <summary>
            /// Enum OfficeFolder for value: OfficeFolder
            /// </summary>
            [EnumMember(Value = "OfficeFolder")]
            OfficeFolder = 60,
            
            /// <summary>
            /// Enum Pilot for value: Pilot
            /// </summary>
            [EnumMember(Value = "Pilot")]
            Pilot = 61,
            
            /// <summary>
            /// Enum PlanetSurface for value: PlanetSurface
            /// </summary>
            [EnumMember(Value = "PlanetSurface")]
            PlanetSurface = 62,
            
            /// <summary>
            /// Enum QuafeBay for value: QuafeBay
            /// </summary>
            [EnumMember(Value = "QuafeBay")]
            QuafeBay = 63,
            
            /// <summary>
            /// Enum Reward for value: Reward
            /// </summary>
            [EnumMember(Value = "Reward")]
            Reward = 64,
            
            /// <summary>
            /// Enum RigSlot0 for value: RigSlot0
            /// </summary>
            [EnumMember(Value = "RigSlot0")]
            RigSlot0 = 65,
            
            /// <summary>
            /// Enum RigSlot1 for value: RigSlot1
            /// </summary>
            [EnumMember(Value = "RigSlot1")]
            RigSlot1 = 66,
            
            /// <summary>
            /// Enum RigSlot2 for value: RigSlot2
            /// </summary>
            [EnumMember(Value = "RigSlot2")]
            RigSlot2 = 67,
            
            /// <summary>
            /// Enum RigSlot3 for value: RigSlot3
            /// </summary>
            [EnumMember(Value = "RigSlot3")]
            RigSlot3 = 68,
            
            /// <summary>
            /// Enum RigSlot4 for value: RigSlot4
            /// </summary>
            [EnumMember(Value = "RigSlot4")]
            RigSlot4 = 69,
            
            /// <summary>
            /// Enum RigSlot5 for value: RigSlot5
            /// </summary>
            [EnumMember(Value = "RigSlot5")]
            RigSlot5 = 70,
            
            /// <summary>
            /// Enum RigSlot6 for value: RigSlot6
            /// </summary>
            [EnumMember(Value = "RigSlot6")]
            RigSlot6 = 71,
            
            /// <summary>
            /// Enum RigSlot7 for value: RigSlot7
            /// </summary>
            [EnumMember(Value = "RigSlot7")]
            RigSlot7 = 72,
            
            /// <summary>
            /// Enum SecondaryStorage for value: SecondaryStorage
            /// </summary>
            [EnumMember(Value = "SecondaryStorage")]
            SecondaryStorage = 73,
            
            /// <summary>
            /// Enum ServiceSlot0 for value: ServiceSlot0
            /// </summary>
            [EnumMember(Value = "ServiceSlot0")]
            ServiceSlot0 = 74,
            
            /// <summary>
            /// Enum ServiceSlot1 for value: ServiceSlot1
            /// </summary>
            [EnumMember(Value = "ServiceSlot1")]
            ServiceSlot1 = 75,
            
            /// <summary>
            /// Enum ServiceSlot2 for value: ServiceSlot2
            /// </summary>
            [EnumMember(Value = "ServiceSlot2")]
            ServiceSlot2 = 76,
            
            /// <summary>
            /// Enum ServiceSlot3 for value: ServiceSlot3
            /// </summary>
            [EnumMember(Value = "ServiceSlot3")]
            ServiceSlot3 = 77,
            
            /// <summary>
            /// Enum ServiceSlot4 for value: ServiceSlot4
            /// </summary>
            [EnumMember(Value = "ServiceSlot4")]
            ServiceSlot4 = 78,
            
            /// <summary>
            /// Enum ServiceSlot5 for value: ServiceSlot5
            /// </summary>
            [EnumMember(Value = "ServiceSlot5")]
            ServiceSlot5 = 79,
            
            /// <summary>
            /// Enum ServiceSlot6 for value: ServiceSlot6
            /// </summary>
            [EnumMember(Value = "ServiceSlot6")]
            ServiceSlot6 = 80,
            
            /// <summary>
            /// Enum ServiceSlot7 for value: ServiceSlot7
            /// </summary>
            [EnumMember(Value = "ServiceSlot7")]
            ServiceSlot7 = 81,
            
            /// <summary>
            /// Enum ShipHangar for value: ShipHangar
            /// </summary>
            [EnumMember(Value = "ShipHangar")]
            ShipHangar = 82,
            
            /// <summary>
            /// Enum ShipOffline for value: ShipOffline
            /// </summary>
            [EnumMember(Value = "ShipOffline")]
            ShipOffline = 83,
            
            /// <summary>
            /// Enum Skill for value: Skill
            /// </summary>
            [EnumMember(Value = "Skill")]
            Skill = 84,
            
            /// <summary>
            /// Enum SkillInTraining for value: SkillInTraining
            /// </summary>
            [EnumMember(Value = "SkillInTraining")]
            SkillInTraining = 85,
            
            /// <summary>
            /// Enum SpecializedAmmoHold for value: SpecializedAmmoHold
            /// </summary>
            [EnumMember(Value = "SpecializedAmmoHold")]
            SpecializedAmmoHold = 86,
            
            /// <summary>
            /// Enum SpecializedCommandCenterHold for value: SpecializedCommandCenterHold
            /// </summary>
            [EnumMember(Value = "SpecializedCommandCenterHold")]
            SpecializedCommandCenterHold = 87,
            
            /// <summary>
            /// Enum SpecializedFuelBay for value: SpecializedFuelBay
            /// </summary>
            [EnumMember(Value = "SpecializedFuelBay")]
            SpecializedFuelBay = 88,
            
            /// <summary>
            /// Enum SpecializedGasHold for value: SpecializedGasHold
            /// </summary>
            [EnumMember(Value = "SpecializedGasHold")]
            SpecializedGasHold = 89,
            
            /// <summary>
            /// Enum SpecializedIndustrialShipHold for value: SpecializedIndustrialShipHold
            /// </summary>
            [EnumMember(Value = "SpecializedIndustrialShipHold")]
            SpecializedIndustrialShipHold = 90,
            
            /// <summary>
            /// Enum SpecializedLargeShipHold for value: SpecializedLargeShipHold
            /// </summary>
            [EnumMember(Value = "SpecializedLargeShipHold")]
            SpecializedLargeShipHold = 91,
            
            /// <summary>
            /// Enum SpecializedMaterialBay for value: SpecializedMaterialBay
            /// </summary>
            [EnumMember(Value = "SpecializedMaterialBay")]
            SpecializedMaterialBay = 92,
            
            /// <summary>
            /// Enum SpecializedMediumShipHold for value: SpecializedMediumShipHold
            /// </summary>
            [EnumMember(Value = "SpecializedMediumShipHold")]
            SpecializedMediumShipHold = 93,
            
            /// <summary>
            /// Enum SpecializedMineralHold for value: SpecializedMineralHold
            /// </summary>
            [EnumMember(Value = "SpecializedMineralHold")]
            SpecializedMineralHold = 94,
            
            /// <summary>
            /// Enum SpecializedOreHold for value: SpecializedOreHold
            /// </summary>
            [EnumMember(Value = "SpecializedOreHold")]
            SpecializedOreHold = 95,
            
            /// <summary>
            /// Enum SpecializedPlanetaryCommoditiesHold for value: SpecializedPlanetaryCommoditiesHold
            /// </summary>
            [EnumMember(Value = "SpecializedPlanetaryCommoditiesHold")]
            SpecializedPlanetaryCommoditiesHold = 96,
            
            /// <summary>
            /// Enum SpecializedSalvageHold for value: SpecializedSalvageHold
            /// </summary>
            [EnumMember(Value = "SpecializedSalvageHold")]
            SpecializedSalvageHold = 97,
            
            /// <summary>
            /// Enum SpecializedShipHold for value: SpecializedShipHold
            /// </summary>
            [EnumMember(Value = "SpecializedShipHold")]
            SpecializedShipHold = 98,
            
            /// <summary>
            /// Enum SpecializedSmallShipHold for value: SpecializedSmallShipHold
            /// </summary>
            [EnumMember(Value = "SpecializedSmallShipHold")]
            SpecializedSmallShipHold = 99,
            
            /// <summary>
            /// Enum StructureActive for value: StructureActive
            /// </summary>
            [EnumMember(Value = "StructureActive")]
            StructureActive = 100,
            
            /// <summary>
            /// Enum StructureFuel for value: StructureFuel
            /// </summary>
            [EnumMember(Value = "StructureFuel")]
            StructureFuel = 101,
            
            /// <summary>
            /// Enum StructureInactive for value: StructureInactive
            /// </summary>
            [EnumMember(Value = "StructureInactive")]
            StructureInactive = 102,
            
            /// <summary>
            /// Enum StructureOffline for value: StructureOffline
            /// </summary>
            [EnumMember(Value = "StructureOffline")]
            StructureOffline = 103,
            
            /// <summary>
            /// Enum SubSystemBay for value: SubSystemBay
            /// </summary>
            [EnumMember(Value = "SubSystemBay")]
            SubSystemBay = 104,
            
            /// <summary>
            /// Enum SubSystemSlot0 for value: SubSystemSlot0
            /// </summary>
            [EnumMember(Value = "SubSystemSlot0")]
            SubSystemSlot0 = 105,
            
            /// <summary>
            /// Enum SubSystemSlot1 for value: SubSystemSlot1
            /// </summary>
            [EnumMember(Value = "SubSystemSlot1")]
            SubSystemSlot1 = 106,
            
            /// <summary>
            /// Enum SubSystemSlot2 for value: SubSystemSlot2
            /// </summary>
            [EnumMember(Value = "SubSystemSlot2")]
            SubSystemSlot2 = 107,
            
            /// <summary>
            /// Enum SubSystemSlot3 for value: SubSystemSlot3
            /// </summary>
            [EnumMember(Value = "SubSystemSlot3")]
            SubSystemSlot3 = 108,
            
            /// <summary>
            /// Enum SubSystemSlot4 for value: SubSystemSlot4
            /// </summary>
            [EnumMember(Value = "SubSystemSlot4")]
            SubSystemSlot4 = 109,
            
            /// <summary>
            /// Enum SubSystemSlot5 for value: SubSystemSlot5
            /// </summary>
            [EnumMember(Value = "SubSystemSlot5")]
            SubSystemSlot5 = 110,
            
            /// <summary>
            /// Enum SubSystemSlot6 for value: SubSystemSlot6
            /// </summary>
            [EnumMember(Value = "SubSystemSlot6")]
            SubSystemSlot6 = 111,
            
            /// <summary>
            /// Enum SubSystemSlot7 for value: SubSystemSlot7
            /// </summary>
            [EnumMember(Value = "SubSystemSlot7")]
            SubSystemSlot7 = 112,
            
            /// <summary>
            /// Enum Unlocked for value: Unlocked
            /// </summary>
            [EnumMember(Value = "Unlocked")]
            Unlocked = 113,
            
            /// <summary>
            /// Enum Wallet for value: Wallet
            /// </summary>
            [EnumMember(Value = "Wallet")]
            Wallet = 114,
            
            /// <summary>
            /// Enum Wardrobe for value: Wardrobe
            /// </summary>
            [EnumMember(Value = "Wardrobe")]
            Wardrobe = 115
        }

        /// <summary>
        /// location_flag string
        /// </summary>
        /// <value>location_flag string</value>
        [DataMember(Name="location_flag", EmitDefaultValue=false)]
        public LocationFlagEnum LocationFlag { get; set; }
        /// <summary>
        /// Type of password set if action is of type SetPassword or EnterPassword
        /// </summary>
        /// <value>Type of password set if action is of type SetPassword or EnterPassword</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PasswordTypeEnum
        {
            
            /// <summary>
            /// Enum Config for value: config
            /// </summary>
            [EnumMember(Value = "config")]
            Config = 1,
            
            /// <summary>
            /// Enum General for value: general
            /// </summary>
            [EnumMember(Value = "general")]
            General = 2
        }

        /// <summary>
        /// Type of password set if action is of type SetPassword or EnterPassword
        /// </summary>
        /// <value>Type of password set if action is of type SetPassword or EnterPassword</value>
        [DataMember(Name="password_type", EmitDefaultValue=false)]
        public PasswordTypeEnum? PasswordType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdContainersLogs200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationsCorporationIdContainersLogs200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdContainersLogs200Ok" /> class.
        /// </summary>
        /// <param name="action">action string (required).</param>
        /// <param name="characterId">ID of the character who performed the action. (required).</param>
        /// <param name="containerId">ID of the container (required).</param>
        /// <param name="containerTypeId">Type ID of the container (required).</param>
        /// <param name="locationFlag">location_flag string (required).</param>
        /// <param name="locationId">location_id integer (required).</param>
        /// <param name="loggedAt">Timestamp when this log was created (required).</param>
        /// <param name="newConfigBitmask">new_config_bitmask integer.</param>
        /// <param name="oldConfigBitmask">old_config_bitmask integer.</param>
        /// <param name="passwordType">Type of password set if action is of type SetPassword or EnterPassword.</param>
        /// <param name="quantity">Quantity of the item being acted upon.</param>
        /// <param name="typeId">Type ID of the item being acted upon.</param>
        public GetCorporationsCorporationIdContainersLogs200Ok(ActionEnum action = default(ActionEnum), int? characterId = default(int?), long? containerId = default(long?), int? containerTypeId = default(int?), LocationFlagEnum locationFlag = default(LocationFlagEnum), long? locationId = default(long?), DateTime? loggedAt = default(DateTime?), int? newConfigBitmask = default(int?), int? oldConfigBitmask = default(int?), PasswordTypeEnum? passwordType = default(PasswordTypeEnum?), int? quantity = default(int?), int? typeId = default(int?))
        {
            // to ensure "action" is required (not null)
            if (action == null)
            {
                throw new InvalidDataException("action is a required property for GetCorporationsCorporationIdContainersLogs200Ok and cannot be null");
            }
            else
            {
                this.Action = action;
            }
            // to ensure "characterId" is required (not null)
            if (characterId == null)
            {
                throw new InvalidDataException("characterId is a required property for GetCorporationsCorporationIdContainersLogs200Ok and cannot be null");
            }
            else
            {
                this.CharacterId = characterId;
            }
            // to ensure "containerId" is required (not null)
            if (containerId == null)
            {
                throw new InvalidDataException("containerId is a required property for GetCorporationsCorporationIdContainersLogs200Ok and cannot be null");
            }
            else
            {
                this.ContainerId = containerId;
            }
            // to ensure "containerTypeId" is required (not null)
            if (containerTypeId == null)
            {
                throw new InvalidDataException("containerTypeId is a required property for GetCorporationsCorporationIdContainersLogs200Ok and cannot be null");
            }
            else
            {
                this.ContainerTypeId = containerTypeId;
            }
            // to ensure "locationFlag" is required (not null)
            if (locationFlag == null)
            {
                throw new InvalidDataException("locationFlag is a required property for GetCorporationsCorporationIdContainersLogs200Ok and cannot be null");
            }
            else
            {
                this.LocationFlag = locationFlag;
            }
            // to ensure "locationId" is required (not null)
            if (locationId == null)
            {
                throw new InvalidDataException("locationId is a required property for GetCorporationsCorporationIdContainersLogs200Ok and cannot be null");
            }
            else
            {
                this.LocationId = locationId;
            }
            // to ensure "loggedAt" is required (not null)
            if (loggedAt == null)
            {
                throw new InvalidDataException("loggedAt is a required property for GetCorporationsCorporationIdContainersLogs200Ok and cannot be null");
            }
            else
            {
                this.LoggedAt = loggedAt;
            }
            this.NewConfigBitmask = newConfigBitmask;
            this.OldConfigBitmask = oldConfigBitmask;
            this.PasswordType = passwordType;
            this.Quantity = quantity;
            this.TypeId = typeId;
        }
        

        /// <summary>
        /// ID of the character who performed the action.
        /// </summary>
        /// <value>ID of the character who performed the action.</value>
        [DataMember(Name="character_id", EmitDefaultValue=false)]
        public int? CharacterId { get; set; }

        /// <summary>
        /// ID of the container
        /// </summary>
        /// <value>ID of the container</value>
        [DataMember(Name="container_id", EmitDefaultValue=false)]
        public long? ContainerId { get; set; }

        /// <summary>
        /// Type ID of the container
        /// </summary>
        /// <value>Type ID of the container</value>
        [DataMember(Name="container_type_id", EmitDefaultValue=false)]
        public int? ContainerTypeId { get; set; }


        /// <summary>
        /// location_id integer
        /// </summary>
        /// <value>location_id integer</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public long? LocationId { get; set; }

        /// <summary>
        /// Timestamp when this log was created
        /// </summary>
        /// <value>Timestamp when this log was created</value>
        [DataMember(Name="logged_at", EmitDefaultValue=false)]
        public DateTime? LoggedAt { get; set; }

        /// <summary>
        /// new_config_bitmask integer
        /// </summary>
        /// <value>new_config_bitmask integer</value>
        [DataMember(Name="new_config_bitmask", EmitDefaultValue=false)]
        public int? NewConfigBitmask { get; set; }

        /// <summary>
        /// old_config_bitmask integer
        /// </summary>
        /// <value>old_config_bitmask integer</value>
        [DataMember(Name="old_config_bitmask", EmitDefaultValue=false)]
        public int? OldConfigBitmask { get; set; }


        /// <summary>
        /// Quantity of the item being acted upon
        /// </summary>
        /// <value>Quantity of the item being acted upon</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Type ID of the item being acted upon
        /// </summary>
        /// <value>Type ID of the item being acted upon</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationsCorporationIdContainersLogs200Ok {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  ContainerId: ").Append(ContainerId).Append("\n");
            sb.Append("  ContainerTypeId: ").Append(ContainerTypeId).Append("\n");
            sb.Append("  LocationFlag: ").Append(LocationFlag).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  LoggedAt: ").Append(LoggedAt).Append("\n");
            sb.Append("  NewConfigBitmask: ").Append(NewConfigBitmask).Append("\n");
            sb.Append("  OldConfigBitmask: ").Append(OldConfigBitmask).Append("\n");
            sb.Append("  PasswordType: ").Append(PasswordType).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationsCorporationIdContainersLogs200Ok);
        }

        /// <summary>
        /// Returns true if GetCorporationsCorporationIdContainersLogs200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationsCorporationIdContainersLogs200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationsCorporationIdContainersLogs200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.CharacterId == input.CharacterId ||
                    (this.CharacterId != null &&
                    this.CharacterId.Equals(input.CharacterId))
                ) && 
                (
                    this.ContainerId == input.ContainerId ||
                    (this.ContainerId != null &&
                    this.ContainerId.Equals(input.ContainerId))
                ) && 
                (
                    this.ContainerTypeId == input.ContainerTypeId ||
                    (this.ContainerTypeId != null &&
                    this.ContainerTypeId.Equals(input.ContainerTypeId))
                ) && 
                (
                    this.LocationFlag == input.LocationFlag ||
                    (this.LocationFlag != null &&
                    this.LocationFlag.Equals(input.LocationFlag))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.LoggedAt == input.LoggedAt ||
                    (this.LoggedAt != null &&
                    this.LoggedAt.Equals(input.LoggedAt))
                ) && 
                (
                    this.NewConfigBitmask == input.NewConfigBitmask ||
                    (this.NewConfigBitmask != null &&
                    this.NewConfigBitmask.Equals(input.NewConfigBitmask))
                ) && 
                (
                    this.OldConfigBitmask == input.OldConfigBitmask ||
                    (this.OldConfigBitmask != null &&
                    this.OldConfigBitmask.Equals(input.OldConfigBitmask))
                ) && 
                (
                    this.PasswordType == input.PasswordType ||
                    (this.PasswordType != null &&
                    this.PasswordType.Equals(input.PasswordType))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.CharacterId != null)
                    hashCode = hashCode * 59 + this.CharacterId.GetHashCode();
                if (this.ContainerId != null)
                    hashCode = hashCode * 59 + this.ContainerId.GetHashCode();
                if (this.ContainerTypeId != null)
                    hashCode = hashCode * 59 + this.ContainerTypeId.GetHashCode();
                if (this.LocationFlag != null)
                    hashCode = hashCode * 59 + this.LocationFlag.GetHashCode();
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.LoggedAt != null)
                    hashCode = hashCode * 59 + this.LoggedAt.GetHashCode();
                if (this.NewConfigBitmask != null)
                    hashCode = hashCode * 59 + this.NewConfigBitmask.GetHashCode();
                if (this.OldConfigBitmask != null)
                    hashCode = hashCode * 59 + this.OldConfigBitmask.GetHashCode();
                if (this.PasswordType != null)
                    hashCode = hashCode * 59 + this.PasswordType.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                return hashCode;
            }
        }
    }

}
