/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// pve object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdStatsPve :  IEquatable<GetCharactersCharacterIdStatsPve>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdStatsPve" /> class.
        /// </summary>
        /// <param name="dungeonsCompletedAgent">dungeons_completed_agent integer.</param>
        /// <param name="dungeonsCompletedDistribution">dungeons_completed_distribution integer.</param>
        /// <param name="missionsSucceeded">missions_succeeded integer.</param>
        /// <param name="missionsSucceededEpicArc">missions_succeeded_epic_arc integer.</param>
        public GetCharactersCharacterIdStatsPve(long? dungeonsCompletedAgent = default(long?), long? dungeonsCompletedDistribution = default(long?), long? missionsSucceeded = default(long?), long? missionsSucceededEpicArc = default(long?))
        {
            this.DungeonsCompletedAgent = dungeonsCompletedAgent;
            this.DungeonsCompletedDistribution = dungeonsCompletedDistribution;
            this.MissionsSucceeded = missionsSucceeded;
            this.MissionsSucceededEpicArc = missionsSucceededEpicArc;
        }
        
        /// <summary>
        /// dungeons_completed_agent integer
        /// </summary>
        /// <value>dungeons_completed_agent integer</value>
        [DataMember(Name="dungeons_completed_agent", EmitDefaultValue=false)]
        public long? DungeonsCompletedAgent { get; set; }

        /// <summary>
        /// dungeons_completed_distribution integer
        /// </summary>
        /// <value>dungeons_completed_distribution integer</value>
        [DataMember(Name="dungeons_completed_distribution", EmitDefaultValue=false)]
        public long? DungeonsCompletedDistribution { get; set; }

        /// <summary>
        /// missions_succeeded integer
        /// </summary>
        /// <value>missions_succeeded integer</value>
        [DataMember(Name="missions_succeeded", EmitDefaultValue=false)]
        public long? MissionsSucceeded { get; set; }

        /// <summary>
        /// missions_succeeded_epic_arc integer
        /// </summary>
        /// <value>missions_succeeded_epic_arc integer</value>
        [DataMember(Name="missions_succeeded_epic_arc", EmitDefaultValue=false)]
        public long? MissionsSucceededEpicArc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdStatsPve {\n");
            sb.Append("  DungeonsCompletedAgent: ").Append(DungeonsCompletedAgent).Append("\n");
            sb.Append("  DungeonsCompletedDistribution: ").Append(DungeonsCompletedDistribution).Append("\n");
            sb.Append("  MissionsSucceeded: ").Append(MissionsSucceeded).Append("\n");
            sb.Append("  MissionsSucceededEpicArc: ").Append(MissionsSucceededEpicArc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdStatsPve);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdStatsPve instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdStatsPve to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdStatsPve input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DungeonsCompletedAgent == input.DungeonsCompletedAgent ||
                    (this.DungeonsCompletedAgent != null &&
                    this.DungeonsCompletedAgent.Equals(input.DungeonsCompletedAgent))
                ) && 
                (
                    this.DungeonsCompletedDistribution == input.DungeonsCompletedDistribution ||
                    (this.DungeonsCompletedDistribution != null &&
                    this.DungeonsCompletedDistribution.Equals(input.DungeonsCompletedDistribution))
                ) && 
                (
                    this.MissionsSucceeded == input.MissionsSucceeded ||
                    (this.MissionsSucceeded != null &&
                    this.MissionsSucceeded.Equals(input.MissionsSucceeded))
                ) && 
                (
                    this.MissionsSucceededEpicArc == input.MissionsSucceededEpicArc ||
                    (this.MissionsSucceededEpicArc != null &&
                    this.MissionsSucceededEpicArc.Equals(input.MissionsSucceededEpicArc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DungeonsCompletedAgent != null)
                    hashCode = hashCode * 59 + this.DungeonsCompletedAgent.GetHashCode();
                if (this.DungeonsCompletedDistribution != null)
                    hashCode = hashCode * 59 + this.DungeonsCompletedDistribution.GetHashCode();
                if (this.MissionsSucceeded != null)
                    hashCode = hashCode * 59 + this.MissionsSucceeded.GetHashCode();
                if (this.MissionsSucceededEpicArc != null)
                    hashCode = hashCode * 59 + this.MissionsSucceededEpicArc.GetHashCode();
                return hashCode;
            }
        }
    }

}
