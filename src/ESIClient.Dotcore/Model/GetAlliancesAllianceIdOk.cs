/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetAlliancesAllianceIdOk :  IEquatable<GetAlliancesAllianceIdOk>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAlliancesAllianceIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetAlliancesAllianceIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAlliancesAllianceIdOk" /> class.
        /// </summary>
        /// <param name="creatorCorporationId">ID of the corporation that created the alliance (required).</param>
        /// <param name="creatorId">ID of the character that created the alliance (required).</param>
        /// <param name="dateFounded">date_founded string (required).</param>
        /// <param name="executorCorporationId">the executor corporation ID, if this alliance is not closed.</param>
        /// <param name="factionId">Faction ID this alliance is fighting for, if this alliance is enlisted in factional warfare.</param>
        /// <param name="name">the full name of the alliance (required).</param>
        /// <param name="ticker">the short name of the alliance (required).</param>
        public GetAlliancesAllianceIdOk(int? creatorCorporationId = default(int?), int? creatorId = default(int?), DateTime? dateFounded = default(DateTime?), int? executorCorporationId = default(int?), int? factionId = default(int?), string name = default(string), string ticker = default(string))
        {
            // to ensure "creatorCorporationId" is required (not null)
            if (creatorCorporationId == null)
            {
                throw new InvalidDataException("creatorCorporationId is a required property for GetAlliancesAllianceIdOk and cannot be null");
            }
            else
            {
                this.CreatorCorporationId = creatorCorporationId;
            }
            // to ensure "creatorId" is required (not null)
            if (creatorId == null)
            {
                throw new InvalidDataException("creatorId is a required property for GetAlliancesAllianceIdOk and cannot be null");
            }
            else
            {
                this.CreatorId = creatorId;
            }
            // to ensure "dateFounded" is required (not null)
            if (dateFounded == null)
            {
                throw new InvalidDataException("dateFounded is a required property for GetAlliancesAllianceIdOk and cannot be null");
            }
            else
            {
                this.DateFounded = dateFounded;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for GetAlliancesAllianceIdOk and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "ticker" is required (not null)
            if (ticker == null)
            {
                throw new InvalidDataException("ticker is a required property for GetAlliancesAllianceIdOk and cannot be null");
            }
            else
            {
                this.Ticker = ticker;
            }
            this.ExecutorCorporationId = executorCorporationId;
            this.FactionId = factionId;
        }
        
        /// <summary>
        /// ID of the corporation that created the alliance
        /// </summary>
        /// <value>ID of the corporation that created the alliance</value>
        [DataMember(Name="creator_corporation_id", EmitDefaultValue=false)]
        public int? CreatorCorporationId { get; set; }

        /// <summary>
        /// ID of the character that created the alliance
        /// </summary>
        /// <value>ID of the character that created the alliance</value>
        [DataMember(Name="creator_id", EmitDefaultValue=false)]
        public int? CreatorId { get; set; }

        /// <summary>
        /// date_founded string
        /// </summary>
        /// <value>date_founded string</value>
        [DataMember(Name="date_founded", EmitDefaultValue=false)]
        public DateTime? DateFounded { get; set; }

        /// <summary>
        /// the executor corporation ID, if this alliance is not closed
        /// </summary>
        /// <value>the executor corporation ID, if this alliance is not closed</value>
        [DataMember(Name="executor_corporation_id", EmitDefaultValue=false)]
        public int? ExecutorCorporationId { get; set; }

        /// <summary>
        /// Faction ID this alliance is fighting for, if this alliance is enlisted in factional warfare
        /// </summary>
        /// <value>Faction ID this alliance is fighting for, if this alliance is enlisted in factional warfare</value>
        [DataMember(Name="faction_id", EmitDefaultValue=false)]
        public int? FactionId { get; set; }

        /// <summary>
        /// the full name of the alliance
        /// </summary>
        /// <value>the full name of the alliance</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// the short name of the alliance
        /// </summary>
        /// <value>the short name of the alliance</value>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAlliancesAllianceIdOk {\n");
            sb.Append("  CreatorCorporationId: ").Append(CreatorCorporationId).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("  DateFounded: ").Append(DateFounded).Append("\n");
            sb.Append("  ExecutorCorporationId: ").Append(ExecutorCorporationId).Append("\n");
            sb.Append("  FactionId: ").Append(FactionId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAlliancesAllianceIdOk);
        }

        /// <summary>
        /// Returns true if GetAlliancesAllianceIdOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAlliancesAllianceIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAlliancesAllianceIdOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatorCorporationId == input.CreatorCorporationId ||
                    (this.CreatorCorporationId != null &&
                    this.CreatorCorporationId.Equals(input.CreatorCorporationId))
                ) && 
                (
                    this.CreatorId == input.CreatorId ||
                    (this.CreatorId != null &&
                    this.CreatorId.Equals(input.CreatorId))
                ) && 
                (
                    this.DateFounded == input.DateFounded ||
                    (this.DateFounded != null &&
                    this.DateFounded.Equals(input.DateFounded))
                ) && 
                (
                    this.ExecutorCorporationId == input.ExecutorCorporationId ||
                    (this.ExecutorCorporationId != null &&
                    this.ExecutorCorporationId.Equals(input.ExecutorCorporationId))
                ) && 
                (
                    this.FactionId == input.FactionId ||
                    (this.FactionId != null &&
                    this.FactionId.Equals(input.FactionId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatorCorporationId != null)
                    hashCode = hashCode * 59 + this.CreatorCorporationId.GetHashCode();
                if (this.CreatorId != null)
                    hashCode = hashCode * 59 + this.CreatorId.GetHashCode();
                if (this.DateFounded != null)
                    hashCode = hashCode * 59 + this.DateFounded.GetHashCode();
                if (this.ExecutorCorporationId != null)
                    hashCode = hashCode * 59 + this.ExecutorCorporationId.GetHashCode();
                if (this.FactionId != null)
                    hashCode = hashCode * 59 + this.FactionId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                return hashCode;
            }
        }
    }

}
