/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdContracts200Ok :  IEquatable<GetCharactersCharacterIdContracts200Ok>
    {
        /// <summary>
        /// To whom the contract is available
        /// </summary>
        /// <value>To whom the contract is available</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AvailabilityEnum
        {
            
            /// <summary>
            /// Enum Public for value: public
            /// </summary>
            [EnumMember(Value = "public")]
            Public = 1,
            
            /// <summary>
            /// Enum Personal for value: personal
            /// </summary>
            [EnumMember(Value = "personal")]
            Personal = 2,
            
            /// <summary>
            /// Enum Corporation for value: corporation
            /// </summary>
            [EnumMember(Value = "corporation")]
            Corporation = 3,
            
            /// <summary>
            /// Enum Alliance for value: alliance
            /// </summary>
            [EnumMember(Value = "alliance")]
            Alliance = 4
        }

        /// <summary>
        /// To whom the contract is available
        /// </summary>
        /// <value>To whom the contract is available</value>
        [DataMember(Name="availability", EmitDefaultValue=false)]
        public AvailabilityEnum Availability { get; set; }
        /// <summary>
        /// Status of the the contract
        /// </summary>
        /// <value>Status of the the contract</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Outstanding for value: outstanding
            /// </summary>
            [EnumMember(Value = "outstanding")]
            Outstanding = 1,
            
            /// <summary>
            /// Enum Inprogress for value: in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            Inprogress = 2,
            
            /// <summary>
            /// Enum Finishedissuer for value: finished_issuer
            /// </summary>
            [EnumMember(Value = "finished_issuer")]
            Finishedissuer = 3,
            
            /// <summary>
            /// Enum Finishedcontractor for value: finished_contractor
            /// </summary>
            [EnumMember(Value = "finished_contractor")]
            Finishedcontractor = 4,
            
            /// <summary>
            /// Enum Finished for value: finished
            /// </summary>
            [EnumMember(Value = "finished")]
            Finished = 5,
            
            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 6,
            
            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            Rejected = 7,
            
            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 8,
            
            /// <summary>
            /// Enum Deleted for value: deleted
            /// </summary>
            [EnumMember(Value = "deleted")]
            Deleted = 9,
            
            /// <summary>
            /// Enum Reversed for value: reversed
            /// </summary>
            [EnumMember(Value = "reversed")]
            Reversed = 10
        }

        /// <summary>
        /// Status of the the contract
        /// </summary>
        /// <value>Status of the the contract</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Type of the contract
        /// </summary>
        /// <value>Type of the contract</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 1,
            
            /// <summary>
            /// Enum Itemexchange for value: item_exchange
            /// </summary>
            [EnumMember(Value = "item_exchange")]
            Itemexchange = 2,
            
            /// <summary>
            /// Enum Auction for value: auction
            /// </summary>
            [EnumMember(Value = "auction")]
            Auction = 3,
            
            /// <summary>
            /// Enum Courier for value: courier
            /// </summary>
            [EnumMember(Value = "courier")]
            Courier = 4,
            
            /// <summary>
            /// Enum Loan for value: loan
            /// </summary>
            [EnumMember(Value = "loan")]
            Loan = 5
        }

        /// <summary>
        /// Type of the contract
        /// </summary>
        /// <value>Type of the contract</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdContracts200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdContracts200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdContracts200Ok" /> class.
        /// </summary>
        /// <param name="acceptorId">Who will accept the contract (required).</param>
        /// <param name="assigneeId">ID to whom the contract is assigned, can be corporation or character ID (required).</param>
        /// <param name="availability">To whom the contract is available (required).</param>
        /// <param name="buyout">Buyout price (for Auctions only).</param>
        /// <param name="collateral">Collateral price (for Couriers only).</param>
        /// <param name="contractId">contract_id integer (required).</param>
        /// <param name="dateAccepted">Date of confirmation of contract.</param>
        /// <param name="dateCompleted">Date of completed of contract.</param>
        /// <param name="dateExpired">Expiration date of the contract (required).</param>
        /// <param name="dateIssued">Ð¡reation date of the contract (required).</param>
        /// <param name="daysToComplete">Number of days to perform the contract.</param>
        /// <param name="endLocationId">End location ID (for Couriers contract).</param>
        /// <param name="forCorporation">true if the contract was issued on behalf of the issuer&#39;s corporation (required).</param>
        /// <param name="issuerCorporationId">Character&#39;s corporation ID for the issuer (required).</param>
        /// <param name="issuerId">Character ID for the issuer (required).</param>
        /// <param name="price">Price of contract (for ItemsExchange and Auctions).</param>
        /// <param name="reward">Remuneration for contract (for Couriers only).</param>
        /// <param name="startLocationId">Start location ID (for Couriers contract).</param>
        /// <param name="status">Status of the the contract (required).</param>
        /// <param name="title">Title of the contract.</param>
        /// <param name="type">Type of the contract (required).</param>
        /// <param name="volume">Volume of items in the contract.</param>
        public GetCharactersCharacterIdContracts200Ok(int? acceptorId = default(int?), int? assigneeId = default(int?), AvailabilityEnum availability = default(AvailabilityEnum), double? buyout = default(double?), double? collateral = default(double?), int? contractId = default(int?), DateTime? dateAccepted = default(DateTime?), DateTime? dateCompleted = default(DateTime?), DateTime? dateExpired = default(DateTime?), DateTime? dateIssued = default(DateTime?), int? daysToComplete = default(int?), long? endLocationId = default(long?), bool? forCorporation = default(bool?), int? issuerCorporationId = default(int?), int? issuerId = default(int?), double? price = default(double?), double? reward = default(double?), long? startLocationId = default(long?), StatusEnum status = default(StatusEnum), string title = default(string), TypeEnum type = default(TypeEnum), double? volume = default(double?))
        {
            // to ensure "acceptorId" is required (not null)
            if (acceptorId == null)
            {
                throw new InvalidDataException("acceptorId is a required property for GetCharactersCharacterIdContracts200Ok and cannot be null");
            }
            else
            {
                this.AcceptorId = acceptorId;
            }
            // to ensure "assigneeId" is required (not null)
            if (assigneeId == null)
            {
                throw new InvalidDataException("assigneeId is a required property for GetCharactersCharacterIdContracts200Ok and cannot be null");
            }
            else
            {
                this.AssigneeId = assigneeId;
            }
            // to ensure "availability" is required (not null)
            if (availability == null)
            {
                throw new InvalidDataException("availability is a required property for GetCharactersCharacterIdContracts200Ok and cannot be null");
            }
            else
            {
                this.Availability = availability;
            }
            // to ensure "contractId" is required (not null)
            if (contractId == null)
            {
                throw new InvalidDataException("contractId is a required property for GetCharactersCharacterIdContracts200Ok and cannot be null");
            }
            else
            {
                this.ContractId = contractId;
            }
            // to ensure "dateExpired" is required (not null)
            if (dateExpired == null)
            {
                throw new InvalidDataException("dateExpired is a required property for GetCharactersCharacterIdContracts200Ok and cannot be null");
            }
            else
            {
                this.DateExpired = dateExpired;
            }
            // to ensure "dateIssued" is required (not null)
            if (dateIssued == null)
            {
                throw new InvalidDataException("dateIssued is a required property for GetCharactersCharacterIdContracts200Ok and cannot be null");
            }
            else
            {
                this.DateIssued = dateIssued;
            }
            // to ensure "forCorporation" is required (not null)
            if (forCorporation == null)
            {
                throw new InvalidDataException("forCorporation is a required property for GetCharactersCharacterIdContracts200Ok and cannot be null");
            }
            else
            {
                this.ForCorporation = forCorporation;
            }
            // to ensure "issuerCorporationId" is required (not null)
            if (issuerCorporationId == null)
            {
                throw new InvalidDataException("issuerCorporationId is a required property for GetCharactersCharacterIdContracts200Ok and cannot be null");
            }
            else
            {
                this.IssuerCorporationId = issuerCorporationId;
            }
            // to ensure "issuerId" is required (not null)
            if (issuerId == null)
            {
                throw new InvalidDataException("issuerId is a required property for GetCharactersCharacterIdContracts200Ok and cannot be null");
            }
            else
            {
                this.IssuerId = issuerId;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for GetCharactersCharacterIdContracts200Ok and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for GetCharactersCharacterIdContracts200Ok and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Buyout = buyout;
            this.Collateral = collateral;
            this.DateAccepted = dateAccepted;
            this.DateCompleted = dateCompleted;
            this.DaysToComplete = daysToComplete;
            this.EndLocationId = endLocationId;
            this.Price = price;
            this.Reward = reward;
            this.StartLocationId = startLocationId;
            this.Title = title;
            this.Volume = volume;
        }
        
        /// <summary>
        /// Who will accept the contract
        /// </summary>
        /// <value>Who will accept the contract</value>
        [DataMember(Name="acceptor_id", EmitDefaultValue=false)]
        public int? AcceptorId { get; set; }

        /// <summary>
        /// ID to whom the contract is assigned, can be corporation or character ID
        /// </summary>
        /// <value>ID to whom the contract is assigned, can be corporation or character ID</value>
        [DataMember(Name="assignee_id", EmitDefaultValue=false)]
        public int? AssigneeId { get; set; }


        /// <summary>
        /// Buyout price (for Auctions only)
        /// </summary>
        /// <value>Buyout price (for Auctions only)</value>
        [DataMember(Name="buyout", EmitDefaultValue=false)]
        public double? Buyout { get; set; }

        /// <summary>
        /// Collateral price (for Couriers only)
        /// </summary>
        /// <value>Collateral price (for Couriers only)</value>
        [DataMember(Name="collateral", EmitDefaultValue=false)]
        public double? Collateral { get; set; }

        /// <summary>
        /// contract_id integer
        /// </summary>
        /// <value>contract_id integer</value>
        [DataMember(Name="contract_id", EmitDefaultValue=false)]
        public int? ContractId { get; set; }

        /// <summary>
        /// Date of confirmation of contract
        /// </summary>
        /// <value>Date of confirmation of contract</value>
        [DataMember(Name="date_accepted", EmitDefaultValue=false)]
        public DateTime? DateAccepted { get; set; }

        /// <summary>
        /// Date of completed of contract
        /// </summary>
        /// <value>Date of completed of contract</value>
        [DataMember(Name="date_completed", EmitDefaultValue=false)]
        public DateTime? DateCompleted { get; set; }

        /// <summary>
        /// Expiration date of the contract
        /// </summary>
        /// <value>Expiration date of the contract</value>
        [DataMember(Name="date_expired", EmitDefaultValue=false)]
        public DateTime? DateExpired { get; set; }

        /// <summary>
        /// Ð¡reation date of the contract
        /// </summary>
        /// <value>Ð¡reation date of the contract</value>
        [DataMember(Name="date_issued", EmitDefaultValue=false)]
        public DateTime? DateIssued { get; set; }

        /// <summary>
        /// Number of days to perform the contract
        /// </summary>
        /// <value>Number of days to perform the contract</value>
        [DataMember(Name="days_to_complete", EmitDefaultValue=false)]
        public int? DaysToComplete { get; set; }

        /// <summary>
        /// End location ID (for Couriers contract)
        /// </summary>
        /// <value>End location ID (for Couriers contract)</value>
        [DataMember(Name="end_location_id", EmitDefaultValue=false)]
        public long? EndLocationId { get; set; }

        /// <summary>
        /// true if the contract was issued on behalf of the issuer&#39;s corporation
        /// </summary>
        /// <value>true if the contract was issued on behalf of the issuer&#39;s corporation</value>
        [DataMember(Name="for_corporation", EmitDefaultValue=false)]
        public bool? ForCorporation { get; set; }

        /// <summary>
        /// Character&#39;s corporation ID for the issuer
        /// </summary>
        /// <value>Character&#39;s corporation ID for the issuer</value>
        [DataMember(Name="issuer_corporation_id", EmitDefaultValue=false)]
        public int? IssuerCorporationId { get; set; }

        /// <summary>
        /// Character ID for the issuer
        /// </summary>
        /// <value>Character ID for the issuer</value>
        [DataMember(Name="issuer_id", EmitDefaultValue=false)]
        public int? IssuerId { get; set; }

        /// <summary>
        /// Price of contract (for ItemsExchange and Auctions)
        /// </summary>
        /// <value>Price of contract (for ItemsExchange and Auctions)</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Remuneration for contract (for Couriers only)
        /// </summary>
        /// <value>Remuneration for contract (for Couriers only)</value>
        [DataMember(Name="reward", EmitDefaultValue=false)]
        public double? Reward { get; set; }

        /// <summary>
        /// Start location ID (for Couriers contract)
        /// </summary>
        /// <value>Start location ID (for Couriers contract)</value>
        [DataMember(Name="start_location_id", EmitDefaultValue=false)]
        public long? StartLocationId { get; set; }


        /// <summary>
        /// Title of the contract
        /// </summary>
        /// <value>Title of the contract</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }


        /// <summary>
        /// Volume of items in the contract
        /// </summary>
        /// <value>Volume of items in the contract</value>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public double? Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdContracts200Ok {\n");
            sb.Append("  AcceptorId: ").Append(AcceptorId).Append("\n");
            sb.Append("  AssigneeId: ").Append(AssigneeId).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  Buyout: ").Append(Buyout).Append("\n");
            sb.Append("  Collateral: ").Append(Collateral).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  DateAccepted: ").Append(DateAccepted).Append("\n");
            sb.Append("  DateCompleted: ").Append(DateCompleted).Append("\n");
            sb.Append("  DateExpired: ").Append(DateExpired).Append("\n");
            sb.Append("  DateIssued: ").Append(DateIssued).Append("\n");
            sb.Append("  DaysToComplete: ").Append(DaysToComplete).Append("\n");
            sb.Append("  EndLocationId: ").Append(EndLocationId).Append("\n");
            sb.Append("  ForCorporation: ").Append(ForCorporation).Append("\n");
            sb.Append("  IssuerCorporationId: ").Append(IssuerCorporationId).Append("\n");
            sb.Append("  IssuerId: ").Append(IssuerId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Reward: ").Append(Reward).Append("\n");
            sb.Append("  StartLocationId: ").Append(StartLocationId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdContracts200Ok);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdContracts200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdContracts200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdContracts200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptorId == input.AcceptorId ||
                    (this.AcceptorId != null &&
                    this.AcceptorId.Equals(input.AcceptorId))
                ) && 
                (
                    this.AssigneeId == input.AssigneeId ||
                    (this.AssigneeId != null &&
                    this.AssigneeId.Equals(input.AssigneeId))
                ) && 
                (
                    this.Availability == input.Availability ||
                    (this.Availability != null &&
                    this.Availability.Equals(input.Availability))
                ) && 
                (
                    this.Buyout == input.Buyout ||
                    (this.Buyout != null &&
                    this.Buyout.Equals(input.Buyout))
                ) && 
                (
                    this.Collateral == input.Collateral ||
                    (this.Collateral != null &&
                    this.Collateral.Equals(input.Collateral))
                ) && 
                (
                    this.ContractId == input.ContractId ||
                    (this.ContractId != null &&
                    this.ContractId.Equals(input.ContractId))
                ) && 
                (
                    this.DateAccepted == input.DateAccepted ||
                    (this.DateAccepted != null &&
                    this.DateAccepted.Equals(input.DateAccepted))
                ) && 
                (
                    this.DateCompleted == input.DateCompleted ||
                    (this.DateCompleted != null &&
                    this.DateCompleted.Equals(input.DateCompleted))
                ) && 
                (
                    this.DateExpired == input.DateExpired ||
                    (this.DateExpired != null &&
                    this.DateExpired.Equals(input.DateExpired))
                ) && 
                (
                    this.DateIssued == input.DateIssued ||
                    (this.DateIssued != null &&
                    this.DateIssued.Equals(input.DateIssued))
                ) && 
                (
                    this.DaysToComplete == input.DaysToComplete ||
                    (this.DaysToComplete != null &&
                    this.DaysToComplete.Equals(input.DaysToComplete))
                ) && 
                (
                    this.EndLocationId == input.EndLocationId ||
                    (this.EndLocationId != null &&
                    this.EndLocationId.Equals(input.EndLocationId))
                ) && 
                (
                    this.ForCorporation == input.ForCorporation ||
                    (this.ForCorporation != null &&
                    this.ForCorporation.Equals(input.ForCorporation))
                ) && 
                (
                    this.IssuerCorporationId == input.IssuerCorporationId ||
                    (this.IssuerCorporationId != null &&
                    this.IssuerCorporationId.Equals(input.IssuerCorporationId))
                ) && 
                (
                    this.IssuerId == input.IssuerId ||
                    (this.IssuerId != null &&
                    this.IssuerId.Equals(input.IssuerId))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Reward == input.Reward ||
                    (this.Reward != null &&
                    this.Reward.Equals(input.Reward))
                ) && 
                (
                    this.StartLocationId == input.StartLocationId ||
                    (this.StartLocationId != null &&
                    this.StartLocationId.Equals(input.StartLocationId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptorId != null)
                    hashCode = hashCode * 59 + this.AcceptorId.GetHashCode();
                if (this.AssigneeId != null)
                    hashCode = hashCode * 59 + this.AssigneeId.GetHashCode();
                if (this.Availability != null)
                    hashCode = hashCode * 59 + this.Availability.GetHashCode();
                if (this.Buyout != null)
                    hashCode = hashCode * 59 + this.Buyout.GetHashCode();
                if (this.Collateral != null)
                    hashCode = hashCode * 59 + this.Collateral.GetHashCode();
                if (this.ContractId != null)
                    hashCode = hashCode * 59 + this.ContractId.GetHashCode();
                if (this.DateAccepted != null)
                    hashCode = hashCode * 59 + this.DateAccepted.GetHashCode();
                if (this.DateCompleted != null)
                    hashCode = hashCode * 59 + this.DateCompleted.GetHashCode();
                if (this.DateExpired != null)
                    hashCode = hashCode * 59 + this.DateExpired.GetHashCode();
                if (this.DateIssued != null)
                    hashCode = hashCode * 59 + this.DateIssued.GetHashCode();
                if (this.DaysToComplete != null)
                    hashCode = hashCode * 59 + this.DaysToComplete.GetHashCode();
                if (this.EndLocationId != null)
                    hashCode = hashCode * 59 + this.EndLocationId.GetHashCode();
                if (this.ForCorporation != null)
                    hashCode = hashCode * 59 + this.ForCorporation.GetHashCode();
                if (this.IssuerCorporationId != null)
                    hashCode = hashCode * 59 + this.IssuerCorporationId.GetHashCode();
                if (this.IssuerId != null)
                    hashCode = hashCode * 59 + this.IssuerId.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Reward != null)
                    hashCode = hashCode * 59 + this.Reward.GetHashCode();
                if (this.StartLocationId != null)
                    hashCode = hashCode * 59 + this.StartLocationId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                return hashCode;
            }
        }
    }

}
