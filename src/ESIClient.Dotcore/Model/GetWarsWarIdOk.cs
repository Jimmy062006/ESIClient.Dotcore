/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetWarsWarIdOk :  IEquatable<GetWarsWarIdOk>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetWarsWarIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetWarsWarIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetWarsWarIdOk" /> class.
        /// </summary>
        /// <param name="aggressor">aggressor (required).</param>
        /// <param name="allies">allied corporations or alliances, each object contains either corporation_id or alliance_id.</param>
        /// <param name="declared">Time that the war was declared (required).</param>
        /// <param name="defender">defender (required).</param>
        /// <param name="finished">Time the war ended and shooting was no longer allowed.</param>
        /// <param name="id">ID of the specified war (required).</param>
        /// <param name="mutual">Was the war declared mutual by both parties (required).</param>
        /// <param name="openForAllies">Is the war currently open for allies or not (required).</param>
        /// <param name="retracted">Time the war was retracted but both sides could still shoot each other.</param>
        /// <param name="started">Time when the war started and both sides could shoot each other.</param>
        public GetWarsWarIdOk(GetWarsWarIdAggressor aggressor = default(GetWarsWarIdAggressor), List<GetWarsWarIdAlly> allies = default(List<GetWarsWarIdAlly>), DateTime? declared = default(DateTime?), GetWarsWarIdDefender defender = default(GetWarsWarIdDefender), DateTime? finished = default(DateTime?), int? id = default(int?), bool? mutual = default(bool?), bool? openForAllies = default(bool?), DateTime? retracted = default(DateTime?), DateTime? started = default(DateTime?))
        {
            // to ensure "aggressor" is required (not null)
            if (aggressor == null)
            {
                throw new InvalidDataException("aggressor is a required property for GetWarsWarIdOk and cannot be null");
            }
            else
            {
                this.Aggressor = aggressor;
            }
            // to ensure "declared" is required (not null)
            if (declared == null)
            {
                throw new InvalidDataException("declared is a required property for GetWarsWarIdOk and cannot be null");
            }
            else
            {
                this.Declared = declared;
            }
            // to ensure "defender" is required (not null)
            if (defender == null)
            {
                throw new InvalidDataException("defender is a required property for GetWarsWarIdOk and cannot be null");
            }
            else
            {
                this.Defender = defender;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for GetWarsWarIdOk and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "mutual" is required (not null)
            if (mutual == null)
            {
                throw new InvalidDataException("mutual is a required property for GetWarsWarIdOk and cannot be null");
            }
            else
            {
                this.Mutual = mutual;
            }
            // to ensure "openForAllies" is required (not null)
            if (openForAllies == null)
            {
                throw new InvalidDataException("openForAllies is a required property for GetWarsWarIdOk and cannot be null");
            }
            else
            {
                this.OpenForAllies = openForAllies;
            }
            this.Allies = allies;
            this.Finished = finished;
            this.Retracted = retracted;
            this.Started = started;
        }
        
        /// <summary>
        /// Gets or Sets Aggressor
        /// </summary>
        [DataMember(Name="aggressor", EmitDefaultValue=false)]
        public GetWarsWarIdAggressor Aggressor { get; set; }

        /// <summary>
        /// allied corporations or alliances, each object contains either corporation_id or alliance_id
        /// </summary>
        /// <value>allied corporations or alliances, each object contains either corporation_id or alliance_id</value>
        [DataMember(Name="allies", EmitDefaultValue=false)]
        public List<GetWarsWarIdAlly> Allies { get; set; }

        /// <summary>
        /// Time that the war was declared
        /// </summary>
        /// <value>Time that the war was declared</value>
        [DataMember(Name="declared", EmitDefaultValue=false)]
        public DateTime? Declared { get; set; }

        /// <summary>
        /// Gets or Sets Defender
        /// </summary>
        [DataMember(Name="defender", EmitDefaultValue=false)]
        public GetWarsWarIdDefender Defender { get; set; }

        /// <summary>
        /// Time the war ended and shooting was no longer allowed
        /// </summary>
        /// <value>Time the war ended and shooting was no longer allowed</value>
        [DataMember(Name="finished", EmitDefaultValue=false)]
        public DateTime? Finished { get; set; }

        /// <summary>
        /// ID of the specified war
        /// </summary>
        /// <value>ID of the specified war</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Was the war declared mutual by both parties
        /// </summary>
        /// <value>Was the war declared mutual by both parties</value>
        [DataMember(Name="mutual", EmitDefaultValue=false)]
        public bool? Mutual { get; set; }

        /// <summary>
        /// Is the war currently open for allies or not
        /// </summary>
        /// <value>Is the war currently open for allies or not</value>
        [DataMember(Name="open_for_allies", EmitDefaultValue=false)]
        public bool? OpenForAllies { get; set; }

        /// <summary>
        /// Time the war was retracted but both sides could still shoot each other
        /// </summary>
        /// <value>Time the war was retracted but both sides could still shoot each other</value>
        [DataMember(Name="retracted", EmitDefaultValue=false)]
        public DateTime? Retracted { get; set; }

        /// <summary>
        /// Time when the war started and both sides could shoot each other
        /// </summary>
        /// <value>Time when the war started and both sides could shoot each other</value>
        [DataMember(Name="started", EmitDefaultValue=false)]
        public DateTime? Started { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetWarsWarIdOk {\n");
            sb.Append("  Aggressor: ").Append(Aggressor).Append("\n");
            sb.Append("  Allies: ").Append(Allies).Append("\n");
            sb.Append("  Declared: ").Append(Declared).Append("\n");
            sb.Append("  Defender: ").Append(Defender).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Mutual: ").Append(Mutual).Append("\n");
            sb.Append("  OpenForAllies: ").Append(OpenForAllies).Append("\n");
            sb.Append("  Retracted: ").Append(Retracted).Append("\n");
            sb.Append("  Started: ").Append(Started).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetWarsWarIdOk);
        }

        /// <summary>
        /// Returns true if GetWarsWarIdOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetWarsWarIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetWarsWarIdOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Aggressor == input.Aggressor ||
                    (this.Aggressor != null &&
                    this.Aggressor.Equals(input.Aggressor))
                ) && 
                (
                    this.Allies == input.Allies ||
                    this.Allies != null &&
                    this.Allies.SequenceEqual(input.Allies)
                ) && 
                (
                    this.Declared == input.Declared ||
                    (this.Declared != null &&
                    this.Declared.Equals(input.Declared))
                ) && 
                (
                    this.Defender == input.Defender ||
                    (this.Defender != null &&
                    this.Defender.Equals(input.Defender))
                ) && 
                (
                    this.Finished == input.Finished ||
                    (this.Finished != null &&
                    this.Finished.Equals(input.Finished))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Mutual == input.Mutual ||
                    (this.Mutual != null &&
                    this.Mutual.Equals(input.Mutual))
                ) && 
                (
                    this.OpenForAllies == input.OpenForAllies ||
                    (this.OpenForAllies != null &&
                    this.OpenForAllies.Equals(input.OpenForAllies))
                ) && 
                (
                    this.Retracted == input.Retracted ||
                    (this.Retracted != null &&
                    this.Retracted.Equals(input.Retracted))
                ) && 
                (
                    this.Started == input.Started ||
                    (this.Started != null &&
                    this.Started.Equals(input.Started))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Aggressor != null)
                    hashCode = hashCode * 59 + this.Aggressor.GetHashCode();
                if (this.Allies != null)
                    hashCode = hashCode * 59 + this.Allies.GetHashCode();
                if (this.Declared != null)
                    hashCode = hashCode * 59 + this.Declared.GetHashCode();
                if (this.Defender != null)
                    hashCode = hashCode * 59 + this.Defender.GetHashCode();
                if (this.Finished != null)
                    hashCode = hashCode * 59 + this.Finished.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Mutual != null)
                    hashCode = hashCode * 59 + this.Mutual.GetHashCode();
                if (this.OpenForAllies != null)
                    hashCode = hashCode * 59 + this.OpenForAllies.GetHashCode();
                if (this.Retracted != null)
                    hashCode = hashCode * 59 + this.Retracted.GetHashCode();
                if (this.Started != null)
                    hashCode = hashCode * 59 + this.Started.GetHashCode();
                return hashCode;
            }
        }
    }

}
