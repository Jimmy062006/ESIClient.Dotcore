/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ESIClient.Dotcore.Client.SwaggerDateConverter;

namespace ESIClient.Dotcore.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdWalletJournal200Ok :  IEquatable<GetCharactersCharacterIdWalletJournal200Ok>
    {
        /// <summary>
        /// The type of the given context_id if present
        /// </summary>
        /// <value>The type of the given context_id if present</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContextIdTypeEnum
        {
            
            /// <summary>
            /// Enum Structureid for value: structure_id
            /// </summary>
            [EnumMember(Value = "structure_id")]
            Structureid = 1,
            
            /// <summary>
            /// Enum Stationid for value: station_id
            /// </summary>
            [EnumMember(Value = "station_id")]
            Stationid = 2,
            
            /// <summary>
            /// Enum Markettransactionid for value: market_transaction_id
            /// </summary>
            [EnumMember(Value = "market_transaction_id")]
            Markettransactionid = 3,
            
            /// <summary>
            /// Enum Characterid for value: character_id
            /// </summary>
            [EnumMember(Value = "character_id")]
            Characterid = 4,
            
            /// <summary>
            /// Enum Corporationid for value: corporation_id
            /// </summary>
            [EnumMember(Value = "corporation_id")]
            Corporationid = 5,
            
            /// <summary>
            /// Enum Allianceid for value: alliance_id
            /// </summary>
            [EnumMember(Value = "alliance_id")]
            Allianceid = 6,
            
            /// <summary>
            /// Enum Evesystem for value: eve_system
            /// </summary>
            [EnumMember(Value = "eve_system")]
            Evesystem = 7,
            
            /// <summary>
            /// Enum Industryjobid for value: industry_job_id
            /// </summary>
            [EnumMember(Value = "industry_job_id")]
            Industryjobid = 8,
            
            /// <summary>
            /// Enum Contractid for value: contract_id
            /// </summary>
            [EnumMember(Value = "contract_id")]
            Contractid = 9,
            
            /// <summary>
            /// Enum Planetid for value: planet_id
            /// </summary>
            [EnumMember(Value = "planet_id")]
            Planetid = 10,
            
            /// <summary>
            /// Enum Systemid for value: system_id
            /// </summary>
            [EnumMember(Value = "system_id")]
            Systemid = 11,
            
            /// <summary>
            /// Enum Typeid for value: type_id
            /// </summary>
            [EnumMember(Value = "type_id")]
            Typeid = 12
        }

        /// <summary>
        /// The type of the given context_id if present
        /// </summary>
        /// <value>The type of the given context_id if present</value>
        [DataMember(Name="context_id_type", EmitDefaultValue=false)]
        public ContextIdTypeEnum? ContextIdType { get; set; }
        /// <summary>
        /// The transaction type for the given transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string-&gt;int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py
        /// </summary>
        /// <value>The transaction type for the given transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string-&gt;int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RefTypeEnum
        {
            
            /// <summary>
            /// Enum Accelerationgatefee for value: acceleration_gate_fee
            /// </summary>
            [EnumMember(Value = "acceleration_gate_fee")]
            Accelerationgatefee = 1,
            
            /// <summary>
            /// Enum Advertisementlistingfee for value: advertisement_listing_fee
            /// </summary>
            [EnumMember(Value = "advertisement_listing_fee")]
            Advertisementlistingfee = 2,
            
            /// <summary>
            /// Enum Agentdonation for value: agent_donation
            /// </summary>
            [EnumMember(Value = "agent_donation")]
            Agentdonation = 3,
            
            /// <summary>
            /// Enum Agentlocationservices for value: agent_location_services
            /// </summary>
            [EnumMember(Value = "agent_location_services")]
            Agentlocationservices = 4,
            
            /// <summary>
            /// Enum Agentmiscellaneous for value: agent_miscellaneous
            /// </summary>
            [EnumMember(Value = "agent_miscellaneous")]
            Agentmiscellaneous = 5,
            
            /// <summary>
            /// Enum Agentmissioncollateralpaid for value: agent_mission_collateral_paid
            /// </summary>
            [EnumMember(Value = "agent_mission_collateral_paid")]
            Agentmissioncollateralpaid = 6,
            
            /// <summary>
            /// Enum Agentmissioncollateralrefunded for value: agent_mission_collateral_refunded
            /// </summary>
            [EnumMember(Value = "agent_mission_collateral_refunded")]
            Agentmissioncollateralrefunded = 7,
            
            /// <summary>
            /// Enum Agentmissionreward for value: agent_mission_reward
            /// </summary>
            [EnumMember(Value = "agent_mission_reward")]
            Agentmissionreward = 8,
            
            /// <summary>
            /// Enum Agentmissionrewardcorporationtax for value: agent_mission_reward_corporation_tax
            /// </summary>
            [EnumMember(Value = "agent_mission_reward_corporation_tax")]
            Agentmissionrewardcorporationtax = 9,
            
            /// <summary>
            /// Enum Agentmissiontimebonusreward for value: agent_mission_time_bonus_reward
            /// </summary>
            [EnumMember(Value = "agent_mission_time_bonus_reward")]
            Agentmissiontimebonusreward = 10,
            
            /// <summary>
            /// Enum Agentmissiontimebonusrewardcorporationtax for value: agent_mission_time_bonus_reward_corporation_tax
            /// </summary>
            [EnumMember(Value = "agent_mission_time_bonus_reward_corporation_tax")]
            Agentmissiontimebonusrewardcorporationtax = 11,
            
            /// <summary>
            /// Enum Agentsecurityservices for value: agent_security_services
            /// </summary>
            [EnumMember(Value = "agent_security_services")]
            Agentsecurityservices = 12,
            
            /// <summary>
            /// Enum Agentservicesrendered for value: agent_services_rendered
            /// </summary>
            [EnumMember(Value = "agent_services_rendered")]
            Agentservicesrendered = 13,
            
            /// <summary>
            /// Enum Agentspreward for value: agents_preward
            /// </summary>
            [EnumMember(Value = "agents_preward")]
            Agentspreward = 14,
            
            /// <summary>
            /// Enum Alliancemaintainancefee for value: alliance_maintainance_fee
            /// </summary>
            [EnumMember(Value = "alliance_maintainance_fee")]
            Alliancemaintainancefee = 15,
            
            /// <summary>
            /// Enum Allianceregistrationfee for value: alliance_registration_fee
            /// </summary>
            [EnumMember(Value = "alliance_registration_fee")]
            Allianceregistrationfee = 16,
            
            /// <summary>
            /// Enum Assetsafetyrecoverytax for value: asset_safety_recovery_tax
            /// </summary>
            [EnumMember(Value = "asset_safety_recovery_tax")]
            Assetsafetyrecoverytax = 17,
            
            /// <summary>
            /// Enum Bounty for value: bounty
            /// </summary>
            [EnumMember(Value = "bounty")]
            Bounty = 18,
            
            /// <summary>
            /// Enum Bountyprize for value: bounty_prize
            /// </summary>
            [EnumMember(Value = "bounty_prize")]
            Bountyprize = 19,
            
            /// <summary>
            /// Enum Bountyprizecorporationtax for value: bounty_prize_corporation_tax
            /// </summary>
            [EnumMember(Value = "bounty_prize_corporation_tax")]
            Bountyprizecorporationtax = 20,
            
            /// <summary>
            /// Enum Bountyprizes for value: bounty_prizes
            /// </summary>
            [EnumMember(Value = "bounty_prizes")]
            Bountyprizes = 21,
            
            /// <summary>
            /// Enum Bountyreimbursement for value: bounty_reimbursement
            /// </summary>
            [EnumMember(Value = "bounty_reimbursement")]
            Bountyreimbursement = 22,
            
            /// <summary>
            /// Enum Bountysurcharge for value: bounty_surcharge
            /// </summary>
            [EnumMember(Value = "bounty_surcharge")]
            Bountysurcharge = 23,
            
            /// <summary>
            /// Enum Brokersfee for value: brokers_fee
            /// </summary>
            [EnumMember(Value = "brokers_fee")]
            Brokersfee = 24,
            
            /// <summary>
            /// Enum Cloneactivation for value: clone_activation
            /// </summary>
            [EnumMember(Value = "clone_activation")]
            Cloneactivation = 25,
            
            /// <summary>
            /// Enum Clonetransfer for value: clone_transfer
            /// </summary>
            [EnumMember(Value = "clone_transfer")]
            Clonetransfer = 26,
            
            /// <summary>
            /// Enum Contrabandfine for value: contraband_fine
            /// </summary>
            [EnumMember(Value = "contraband_fine")]
            Contrabandfine = 27,
            
            /// <summary>
            /// Enum Contractauctionbid for value: contract_auction_bid
            /// </summary>
            [EnumMember(Value = "contract_auction_bid")]
            Contractauctionbid = 28,
            
            /// <summary>
            /// Enum Contractauctionbidcorp for value: contract_auction_bid_corp
            /// </summary>
            [EnumMember(Value = "contract_auction_bid_corp")]
            Contractauctionbidcorp = 29,
            
            /// <summary>
            /// Enum Contractauctionbidrefund for value: contract_auction_bid_refund
            /// </summary>
            [EnumMember(Value = "contract_auction_bid_refund")]
            Contractauctionbidrefund = 30,
            
            /// <summary>
            /// Enum Contractauctionsold for value: contract_auction_sold
            /// </summary>
            [EnumMember(Value = "contract_auction_sold")]
            Contractauctionsold = 31,
            
            /// <summary>
            /// Enum Contractbrokersfee for value: contract_brokers_fee
            /// </summary>
            [EnumMember(Value = "contract_brokers_fee")]
            Contractbrokersfee = 32,
            
            /// <summary>
            /// Enum Contractbrokersfeecorp for value: contract_brokers_fee_corp
            /// </summary>
            [EnumMember(Value = "contract_brokers_fee_corp")]
            Contractbrokersfeecorp = 33,
            
            /// <summary>
            /// Enum Contractcollateral for value: contract_collateral
            /// </summary>
            [EnumMember(Value = "contract_collateral")]
            Contractcollateral = 34,
            
            /// <summary>
            /// Enum Contractcollateraldepositedcorp for value: contract_collateral_deposited_corp
            /// </summary>
            [EnumMember(Value = "contract_collateral_deposited_corp")]
            Contractcollateraldepositedcorp = 35,
            
            /// <summary>
            /// Enum Contractcollateralpayout for value: contract_collateral_payout
            /// </summary>
            [EnumMember(Value = "contract_collateral_payout")]
            Contractcollateralpayout = 36,
            
            /// <summary>
            /// Enum Contractcollateralrefund for value: contract_collateral_refund
            /// </summary>
            [EnumMember(Value = "contract_collateral_refund")]
            Contractcollateralrefund = 37,
            
            /// <summary>
            /// Enum Contractdeposit for value: contract_deposit
            /// </summary>
            [EnumMember(Value = "contract_deposit")]
            Contractdeposit = 38,
            
            /// <summary>
            /// Enum Contractdepositcorp for value: contract_deposit_corp
            /// </summary>
            [EnumMember(Value = "contract_deposit_corp")]
            Contractdepositcorp = 39,
            
            /// <summary>
            /// Enum Contractdepositrefund for value: contract_deposit_refund
            /// </summary>
            [EnumMember(Value = "contract_deposit_refund")]
            Contractdepositrefund = 40,
            
            /// <summary>
            /// Enum Contractdepositsalestax for value: contract_deposit_sales_tax
            /// </summary>
            [EnumMember(Value = "contract_deposit_sales_tax")]
            Contractdepositsalestax = 41,
            
            /// <summary>
            /// Enum Contractprice for value: contract_price
            /// </summary>
            [EnumMember(Value = "contract_price")]
            Contractprice = 42,
            
            /// <summary>
            /// Enum Contractpricepaymentcorp for value: contract_price_payment_corp
            /// </summary>
            [EnumMember(Value = "contract_price_payment_corp")]
            Contractpricepaymentcorp = 43,
            
            /// <summary>
            /// Enum Contractreversal for value: contract_reversal
            /// </summary>
            [EnumMember(Value = "contract_reversal")]
            Contractreversal = 44,
            
            /// <summary>
            /// Enum Contractreward for value: contract_reward
            /// </summary>
            [EnumMember(Value = "contract_reward")]
            Contractreward = 45,
            
            /// <summary>
            /// Enum Contractrewarddeposited for value: contract_reward_deposited
            /// </summary>
            [EnumMember(Value = "contract_reward_deposited")]
            Contractrewarddeposited = 46,
            
            /// <summary>
            /// Enum Contractrewarddepositedcorp for value: contract_reward_deposited_corp
            /// </summary>
            [EnumMember(Value = "contract_reward_deposited_corp")]
            Contractrewarddepositedcorp = 47,
            
            /// <summary>
            /// Enum Contractrewardrefund for value: contract_reward_refund
            /// </summary>
            [EnumMember(Value = "contract_reward_refund")]
            Contractrewardrefund = 48,
            
            /// <summary>
            /// Enum Contractsalestax for value: contract_sales_tax
            /// </summary>
            [EnumMember(Value = "contract_sales_tax")]
            Contractsalestax = 49,
            
            /// <summary>
            /// Enum Copying for value: copying
            /// </summary>
            [EnumMember(Value = "copying")]
            Copying = 50,
            
            /// <summary>
            /// Enum Corporaterewardpayout for value: corporate_reward_payout
            /// </summary>
            [EnumMember(Value = "corporate_reward_payout")]
            Corporaterewardpayout = 51,
            
            /// <summary>
            /// Enum Corporaterewardtax for value: corporate_reward_tax
            /// </summary>
            [EnumMember(Value = "corporate_reward_tax")]
            Corporaterewardtax = 52,
            
            /// <summary>
            /// Enum Corporationaccountwithdrawal for value: corporation_account_withdrawal
            /// </summary>
            [EnumMember(Value = "corporation_account_withdrawal")]
            Corporationaccountwithdrawal = 53,
            
            /// <summary>
            /// Enum Corporationbulkpayment for value: corporation_bulk_payment
            /// </summary>
            [EnumMember(Value = "corporation_bulk_payment")]
            Corporationbulkpayment = 54,
            
            /// <summary>
            /// Enum Corporationdividendpayment for value: corporation_dividend_payment
            /// </summary>
            [EnumMember(Value = "corporation_dividend_payment")]
            Corporationdividendpayment = 55,
            
            /// <summary>
            /// Enum Corporationliquidation for value: corporation_liquidation
            /// </summary>
            [EnumMember(Value = "corporation_liquidation")]
            Corporationliquidation = 56,
            
            /// <summary>
            /// Enum Corporationlogochangecost for value: corporation_logo_change_cost
            /// </summary>
            [EnumMember(Value = "corporation_logo_change_cost")]
            Corporationlogochangecost = 57,
            
            /// <summary>
            /// Enum Corporationpayment for value: corporation_payment
            /// </summary>
            [EnumMember(Value = "corporation_payment")]
            Corporationpayment = 58,
            
            /// <summary>
            /// Enum Corporationregistrationfee for value: corporation_registration_fee
            /// </summary>
            [EnumMember(Value = "corporation_registration_fee")]
            Corporationregistrationfee = 59,
            
            /// <summary>
            /// Enum Couriermissionescrow for value: courier_mission_escrow
            /// </summary>
            [EnumMember(Value = "courier_mission_escrow")]
            Couriermissionescrow = 60,
            
            /// <summary>
            /// Enum Cspa for value: cspa
            /// </summary>
            [EnumMember(Value = "cspa")]
            Cspa = 61,
            
            /// <summary>
            /// Enum Cspaofflinerefund for value: cspaofflinerefund
            /// </summary>
            [EnumMember(Value = "cspaofflinerefund")]
            Cspaofflinerefund = 62,
            
            /// <summary>
            /// Enum Datacorefee for value: datacore_fee
            /// </summary>
            [EnumMember(Value = "datacore_fee")]
            Datacorefee = 63,
            
            /// <summary>
            /// Enum Dnamodificationfee for value: dna_modification_fee
            /// </summary>
            [EnumMember(Value = "dna_modification_fee")]
            Dnamodificationfee = 64,
            
            /// <summary>
            /// Enum Dockingfee for value: docking_fee
            /// </summary>
            [EnumMember(Value = "docking_fee")]
            Dockingfee = 65,
            
            /// <summary>
            /// Enum Duelwagerescrow for value: duel_wager_escrow
            /// </summary>
            [EnumMember(Value = "duel_wager_escrow")]
            Duelwagerescrow = 66,
            
            /// <summary>
            /// Enum Duelwagerpayment for value: duel_wager_payment
            /// </summary>
            [EnumMember(Value = "duel_wager_payment")]
            Duelwagerpayment = 67,
            
            /// <summary>
            /// Enum Duelwagerrefund for value: duel_wager_refund
            /// </summary>
            [EnumMember(Value = "duel_wager_refund")]
            Duelwagerrefund = 68,
            
            /// <summary>
            /// Enum Factoryslotrentalfee for value: factory_slot_rental_fee
            /// </summary>
            [EnumMember(Value = "factory_slot_rental_fee")]
            Factoryslotrentalfee = 69,
            
            /// <summary>
            /// Enum Gmcashtransfer for value: gm_cash_transfer
            /// </summary>
            [EnumMember(Value = "gm_cash_transfer")]
            Gmcashtransfer = 70,
            
            /// <summary>
            /// Enum Industryjobtax for value: industry_job_tax
            /// </summary>
            [EnumMember(Value = "industry_job_tax")]
            Industryjobtax = 71,
            
            /// <summary>
            /// Enum Infrastructurehubmaintenance for value: infrastructure_hub_maintenance
            /// </summary>
            [EnumMember(Value = "infrastructure_hub_maintenance")]
            Infrastructurehubmaintenance = 72,
            
            /// <summary>
            /// Enum Inheritance for value: inheritance
            /// </summary>
            [EnumMember(Value = "inheritance")]
            Inheritance = 73,
            
            /// <summary>
            /// Enum Insurance for value: insurance
            /// </summary>
            [EnumMember(Value = "insurance")]
            Insurance = 74,
            
            /// <summary>
            /// Enum Jumpcloneactivationfee for value: jump_clone_activation_fee
            /// </summary>
            [EnumMember(Value = "jump_clone_activation_fee")]
            Jumpcloneactivationfee = 75,
            
            /// <summary>
            /// Enum Jumpcloneinstallationfee for value: jump_clone_installation_fee
            /// </summary>
            [EnumMember(Value = "jump_clone_installation_fee")]
            Jumpcloneinstallationfee = 76,
            
            /// <summary>
            /// Enum Killrightfee for value: kill_right_fee
            /// </summary>
            [EnumMember(Value = "kill_right_fee")]
            Killrightfee = 77,
            
            /// <summary>
            /// Enum Lpstore for value: lp_store
            /// </summary>
            [EnumMember(Value = "lp_store")]
            Lpstore = 78,
            
            /// <summary>
            /// Enum Manufacturing for value: manufacturing
            /// </summary>
            [EnumMember(Value = "manufacturing")]
            Manufacturing = 79,
            
            /// <summary>
            /// Enum Marketescrow for value: market_escrow
            /// </summary>
            [EnumMember(Value = "market_escrow")]
            Marketescrow = 80,
            
            /// <summary>
            /// Enum Marketfinepaid for value: market_fine_paid
            /// </summary>
            [EnumMember(Value = "market_fine_paid")]
            Marketfinepaid = 81,
            
            /// <summary>
            /// Enum Markettransaction for value: market_transaction
            /// </summary>
            [EnumMember(Value = "market_transaction")]
            Markettransaction = 82,
            
            /// <summary>
            /// Enum Medalcreation for value: medal_creation
            /// </summary>
            [EnumMember(Value = "medal_creation")]
            Medalcreation = 83,
            
            /// <summary>
            /// Enum Medalissued for value: medal_issued
            /// </summary>
            [EnumMember(Value = "medal_issued")]
            Medalissued = 84,
            
            /// <summary>
            /// Enum Missioncompletion for value: mission_completion
            /// </summary>
            [EnumMember(Value = "mission_completion")]
            Missioncompletion = 85,
            
            /// <summary>
            /// Enum Missioncost for value: mission_cost
            /// </summary>
            [EnumMember(Value = "mission_cost")]
            Missioncost = 86,
            
            /// <summary>
            /// Enum Missionexpiration for value: mission_expiration
            /// </summary>
            [EnumMember(Value = "mission_expiration")]
            Missionexpiration = 87,
            
            /// <summary>
            /// Enum Missionreward for value: mission_reward
            /// </summary>
            [EnumMember(Value = "mission_reward")]
            Missionreward = 88,
            
            /// <summary>
            /// Enum Officerentalfee for value: office_rental_fee
            /// </summary>
            [EnumMember(Value = "office_rental_fee")]
            Officerentalfee = 89,
            
            /// <summary>
            /// Enum Operationbonus for value: operation_bonus
            /// </summary>
            [EnumMember(Value = "operation_bonus")]
            Operationbonus = 90,
            
            /// <summary>
            /// Enum Opportunityreward for value: opportunity_reward
            /// </summary>
            [EnumMember(Value = "opportunity_reward")]
            Opportunityreward = 91,
            
            /// <summary>
            /// Enum Planetaryconstruction for value: planetary_construction
            /// </summary>
            [EnumMember(Value = "planetary_construction")]
            Planetaryconstruction = 92,
            
            /// <summary>
            /// Enum Planetaryexporttax for value: planetary_export_tax
            /// </summary>
            [EnumMember(Value = "planetary_export_tax")]
            Planetaryexporttax = 93,
            
            /// <summary>
            /// Enum Planetaryimporttax for value: planetary_import_tax
            /// </summary>
            [EnumMember(Value = "planetary_import_tax")]
            Planetaryimporttax = 94,
            
            /// <summary>
            /// Enum Playerdonation for value: player_donation
            /// </summary>
            [EnumMember(Value = "player_donation")]
            Playerdonation = 95,
            
            /// <summary>
            /// Enum Playertrading for value: player_trading
            /// </summary>
            [EnumMember(Value = "player_trading")]
            Playertrading = 96,
            
            /// <summary>
            /// Enum Projectdiscoveryreward for value: project_discovery_reward
            /// </summary>
            [EnumMember(Value = "project_discovery_reward")]
            Projectdiscoveryreward = 97,
            
            /// <summary>
            /// Enum Projectdiscoverytax for value: project_discovery_tax
            /// </summary>
            [EnumMember(Value = "project_discovery_tax")]
            Projectdiscoverytax = 98,
            
            /// <summary>
            /// Enum Reaction for value: reaction
            /// </summary>
            [EnumMember(Value = "reaction")]
            Reaction = 99,
            
            /// <summary>
            /// Enum Releaseofimpoundedproperty for value: release_of_impounded_property
            /// </summary>
            [EnumMember(Value = "release_of_impounded_property")]
            Releaseofimpoundedproperty = 100,
            
            /// <summary>
            /// Enum Repairbill for value: repair_bill
            /// </summary>
            [EnumMember(Value = "repair_bill")]
            Repairbill = 101,
            
            /// <summary>
            /// Enum Reprocessingtax for value: reprocessing_tax
            /// </summary>
            [EnumMember(Value = "reprocessing_tax")]
            Reprocessingtax = 102,
            
            /// <summary>
            /// Enum Researchingmaterialproductivity for value: researching_material_productivity
            /// </summary>
            [EnumMember(Value = "researching_material_productivity")]
            Researchingmaterialproductivity = 103,
            
            /// <summary>
            /// Enum Researchingtechnology for value: researching_technology
            /// </summary>
            [EnumMember(Value = "researching_technology")]
            Researchingtechnology = 104,
            
            /// <summary>
            /// Enum Researchingtimeproductivity for value: researching_time_productivity
            /// </summary>
            [EnumMember(Value = "researching_time_productivity")]
            Researchingtimeproductivity = 105,
            
            /// <summary>
            /// Enum Resourcewarsreward for value: resource_wars_reward
            /// </summary>
            [EnumMember(Value = "resource_wars_reward")]
            Resourcewarsreward = 106,
            
            /// <summary>
            /// Enum Reverseengineering for value: reverse_engineering
            /// </summary>
            [EnumMember(Value = "reverse_engineering")]
            Reverseengineering = 107,
            
            /// <summary>
            /// Enum Securityprocessingfee for value: security_processing_fee
            /// </summary>
            [EnumMember(Value = "security_processing_fee")]
            Securityprocessingfee = 108,
            
            /// <summary>
            /// Enum Shares for value: shares
            /// </summary>
            [EnumMember(Value = "shares")]
            Shares = 109,
            
            /// <summary>
            /// Enum Sovereignitybill for value: sovereignity_bill
            /// </summary>
            [EnumMember(Value = "sovereignity_bill")]
            Sovereignitybill = 110,
            
            /// <summary>
            /// Enum Storepurchase for value: store_purchase
            /// </summary>
            [EnumMember(Value = "store_purchase")]
            Storepurchase = 111,
            
            /// <summary>
            /// Enum Storepurchaserefund for value: store_purchase_refund
            /// </summary>
            [EnumMember(Value = "store_purchase_refund")]
            Storepurchaserefund = 112,
            
            /// <summary>
            /// Enum Transactiontax for value: transaction_tax
            /// </summary>
            [EnumMember(Value = "transaction_tax")]
            Transactiontax = 113,
            
            /// <summary>
            /// Enum Upkeepadjustmentfee for value: upkeep_adjustment_fee
            /// </summary>
            [EnumMember(Value = "upkeep_adjustment_fee")]
            Upkeepadjustmentfee = 114,
            
            /// <summary>
            /// Enum Warallycontract for value: war_ally_contract
            /// </summary>
            [EnumMember(Value = "war_ally_contract")]
            Warallycontract = 115,
            
            /// <summary>
            /// Enum Warfee for value: war_fee
            /// </summary>
            [EnumMember(Value = "war_fee")]
            Warfee = 116,
            
            /// <summary>
            /// Enum Warfeesurrender for value: war_fee_surrender
            /// </summary>
            [EnumMember(Value = "war_fee_surrender")]
            Warfeesurrender = 117
        }

        /// <summary>
        /// The transaction type for the given transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string-&gt;int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py
        /// </summary>
        /// <value>The transaction type for the given transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string-&gt;int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py</value>
        [DataMember(Name="ref_type", EmitDefaultValue=false)]
        public RefTypeEnum RefType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdWalletJournal200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdWalletJournal200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdWalletJournal200Ok" /> class.
        /// </summary>
        /// <param name="amount">The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn.</param>
        /// <param name="balance">Wallet balance after transaction occurred.</param>
        /// <param name="contextId">An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id.</param>
        /// <param name="contextIdType">The type of the given context_id if present.</param>
        /// <param name="date">Date and time of transaction (required).</param>
        /// <param name="description">The reason for the transaction, mirrors what is seen in the client (required).</param>
        /// <param name="firstPartyId">The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name.</param>
        /// <param name="id">Unique journal reference ID (required).</param>
        /// <param name="reason">The user stated reason for the transaction. Only applies to some ref_types.</param>
        /// <param name="refType">The transaction type for the given transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string-&gt;int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py (required).</param>
        /// <param name="secondPartyId">The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name.</param>
        /// <param name="tax">Tax amount received. Only applies to tax related transactions.</param>
        /// <param name="taxReceiverId">The corporation ID receiving any tax paid. Only applies to tax related transactions.</param>
        public GetCharactersCharacterIdWalletJournal200Ok(double? amount = default(double?), double? balance = default(double?), long? contextId = default(long?), ContextIdTypeEnum? contextIdType = default(ContextIdTypeEnum?), DateTime? date = default(DateTime?), string description = default(string), int? firstPartyId = default(int?), long? id = default(long?), string reason = default(string), RefTypeEnum refType = default(RefTypeEnum), int? secondPartyId = default(int?), double? tax = default(double?), int? taxReceiverId = default(int?))
        {
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for GetCharactersCharacterIdWalletJournal200Ok and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for GetCharactersCharacterIdWalletJournal200Ok and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for GetCharactersCharacterIdWalletJournal200Ok and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "refType" is required (not null)
            if (refType == null)
            {
                throw new InvalidDataException("refType is a required property for GetCharactersCharacterIdWalletJournal200Ok and cannot be null");
            }
            else
            {
                this.RefType = refType;
            }
            this.Amount = amount;
            this.Balance = balance;
            this.ContextId = contextId;
            this.ContextIdType = contextIdType;
            this.FirstPartyId = firstPartyId;
            this.Reason = reason;
            this.SecondPartyId = secondPartyId;
            this.Tax = tax;
            this.TaxReceiverId = taxReceiverId;
        }
        
        /// <summary>
        /// The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn
        /// </summary>
        /// <value>The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Wallet balance after transaction occurred
        /// </summary>
        /// <value>Wallet balance after transaction occurred</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public double? Balance { get; set; }

        /// <summary>
        /// An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id
        /// </summary>
        /// <value>An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id</value>
        [DataMember(Name="context_id", EmitDefaultValue=false)]
        public long? ContextId { get; set; }


        /// <summary>
        /// Date and time of transaction
        /// </summary>
        /// <value>Date and time of transaction</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// The reason for the transaction, mirrors what is seen in the client
        /// </summary>
        /// <value>The reason for the transaction, mirrors what is seen in the client</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
        /// </summary>
        /// <value>The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name</value>
        [DataMember(Name="first_party_id", EmitDefaultValue=false)]
        public int? FirstPartyId { get; set; }

        /// <summary>
        /// Unique journal reference ID
        /// </summary>
        /// <value>Unique journal reference ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The user stated reason for the transaction. Only applies to some ref_types
        /// </summary>
        /// <value>The user stated reason for the transaction. Only applies to some ref_types</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }


        /// <summary>
        /// The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
        /// </summary>
        /// <value>The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name</value>
        [DataMember(Name="second_party_id", EmitDefaultValue=false)]
        public int? SecondPartyId { get; set; }

        /// <summary>
        /// Tax amount received. Only applies to tax related transactions
        /// </summary>
        /// <value>Tax amount received. Only applies to tax related transactions</value>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public double? Tax { get; set; }

        /// <summary>
        /// The corporation ID receiving any tax paid. Only applies to tax related transactions
        /// </summary>
        /// <value>The corporation ID receiving any tax paid. Only applies to tax related transactions</value>
        [DataMember(Name="tax_receiver_id", EmitDefaultValue=false)]
        public int? TaxReceiverId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdWalletJournal200Ok {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  ContextId: ").Append(ContextId).Append("\n");
            sb.Append("  ContextIdType: ").Append(ContextIdType).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FirstPartyId: ").Append(FirstPartyId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  RefType: ").Append(RefType).Append("\n");
            sb.Append("  SecondPartyId: ").Append(SecondPartyId).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  TaxReceiverId: ").Append(TaxReceiverId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdWalletJournal200Ok);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdWalletJournal200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdWalletJournal200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdWalletJournal200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.ContextId == input.ContextId ||
                    (this.ContextId != null &&
                    this.ContextId.Equals(input.ContextId))
                ) && 
                (
                    this.ContextIdType == input.ContextIdType ||
                    (this.ContextIdType != null &&
                    this.ContextIdType.Equals(input.ContextIdType))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FirstPartyId == input.FirstPartyId ||
                    (this.FirstPartyId != null &&
                    this.FirstPartyId.Equals(input.FirstPartyId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.RefType == input.RefType ||
                    (this.RefType != null &&
                    this.RefType.Equals(input.RefType))
                ) && 
                (
                    this.SecondPartyId == input.SecondPartyId ||
                    (this.SecondPartyId != null &&
                    this.SecondPartyId.Equals(input.SecondPartyId))
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) && 
                (
                    this.TaxReceiverId == input.TaxReceiverId ||
                    (this.TaxReceiverId != null &&
                    this.TaxReceiverId.Equals(input.TaxReceiverId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.ContextId != null)
                    hashCode = hashCode * 59 + this.ContextId.GetHashCode();
                if (this.ContextIdType != null)
                    hashCode = hashCode * 59 + this.ContextIdType.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.FirstPartyId != null)
                    hashCode = hashCode * 59 + this.FirstPartyId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.RefType != null)
                    hashCode = hashCode * 59 + this.RefType.GetHashCode();
                if (this.SecondPartyId != null)
                    hashCode = hashCode * 59 + this.SecondPartyId.GetHashCode();
                if (this.Tax != null)
                    hashCode = hashCode * 59 + this.Tax.GetHashCode();
                if (this.TaxReceiverId != null)
                    hashCode = hashCode * 59 + this.TaxReceiverId.GetHashCode();
                return hashCode;
            }
        }
    }

}
