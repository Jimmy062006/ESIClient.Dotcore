/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ESIClient.Client;
using ESIClient.Model;

namespace ESIClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a character&#39;s wallet balance
        /// </summary>
        /// <remarks>
        /// Returns a character&#39;s wallet balance  - --  This route is cached for up to 120 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>double?</returns>
        double? GetCharactersCharacterIdWallet (int? characterId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get a character&#39;s wallet balance
        /// </summary>
        /// <remarks>
        /// Returns a character&#39;s wallet balance  - --  This route is cached for up to 120 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of double?</returns>
        ApiResponse<double?> GetCharactersCharacterIdWalletWithHttpInfo (int? characterId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Get character wallet journal
        /// </summary>
        /// <remarks>
        /// Retrieve character wallet journal  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdWalletJournal200Ok&gt;</returns>
        List<GetCharactersCharacterIdWalletJournal200Ok> GetCharactersCharacterIdWalletJournal (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get character wallet journal
        /// </summary>
        /// <remarks>
        /// Retrieve character wallet journal  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdWalletJournal200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdWalletJournal200Ok>> GetCharactersCharacterIdWalletJournalWithHttpInfo (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Get wallet transactions
        /// </summary>
        /// <remarks>
        /// Get wallet transactions of a character  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show transactions happened before the one referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdWalletTransactions200Ok&gt;</returns>
        List<GetCharactersCharacterIdWalletTransactions200Ok> GetCharactersCharacterIdWalletTransactions (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get wallet transactions
        /// </summary>
        /// <remarks>
        /// Get wallet transactions of a character  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show transactions happened before the one referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdWalletTransactions200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdWalletTransactions200Ok>> GetCharactersCharacterIdWalletTransactionsWithHttpInfo (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Returns a corporation&#39;s wallet balance
        /// </summary>
        /// <remarks>
        /// Get a corporation&#39;s wallets  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdWallets200Ok&gt;</returns>
        List<GetCorporationsCorporationIdWallets200Ok> GetCorporationsCorporationIdWallets (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Returns a corporation&#39;s wallet balance
        /// </summary>
        /// <remarks>
        /// Get a corporation&#39;s wallets  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdWallets200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdWallets200Ok>> GetCorporationsCorporationIdWalletsWithHttpInfo (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Get corporation wallet journal
        /// </summary>
        /// <remarks>
        /// Retrieve corporation wallet journal  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdWalletsDivisionJournal200Ok&gt;</returns>
        List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok> GetCorporationsCorporationIdWalletsDivisionJournal (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get corporation wallet journal
        /// </summary>
        /// <remarks>
        /// Retrieve corporation wallet journal  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdWalletsDivisionJournal200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>> GetCorporationsCorporationIdWalletsDivisionJournalWithHttpInfo (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Get corporation wallet transactions
        /// </summary>
        /// <remarks>
        /// Get wallet transactions of a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdWalletsDivisionTransactions200Ok&gt;</returns>
        List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok> GetCorporationsCorporationIdWalletsDivisionTransactions (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get corporation wallet transactions
        /// </summary>
        /// <remarks>
        /// Get wallet transactions of a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdWalletsDivisionTransactions200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>> GetCorporationsCorporationIdWalletsDivisionTransactionsWithHttpInfo (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a character&#39;s wallet balance
        /// </summary>
        /// <remarks>
        /// Returns a character&#39;s wallet balance  - --  This route is cached for up to 120 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of double?</returns>
        System.Threading.Tasks.Task<double?> GetCharactersCharacterIdWalletAsync (int? characterId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get a character&#39;s wallet balance
        /// </summary>
        /// <remarks>
        /// Returns a character&#39;s wallet balance  - --  This route is cached for up to 120 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (double?)</returns>
        System.Threading.Tasks.Task<ApiResponse<double?>> GetCharactersCharacterIdWalletAsyncWithHttpInfo (int? characterId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Get character wallet journal
        /// </summary>
        /// <remarks>
        /// Retrieve character wallet journal  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdWalletJournal200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdWalletJournal200Ok>> GetCharactersCharacterIdWalletJournalAsync (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get character wallet journal
        /// </summary>
        /// <remarks>
        /// Retrieve character wallet journal  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdWalletJournal200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdWalletJournal200Ok>>> GetCharactersCharacterIdWalletJournalAsyncWithHttpInfo (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Get wallet transactions
        /// </summary>
        /// <remarks>
        /// Get wallet transactions of a character  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show transactions happened before the one referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdWalletTransactions200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdWalletTransactions200Ok>> GetCharactersCharacterIdWalletTransactionsAsync (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get wallet transactions
        /// </summary>
        /// <remarks>
        /// Get wallet transactions of a character  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show transactions happened before the one referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdWalletTransactions200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdWalletTransactions200Ok>>> GetCharactersCharacterIdWalletTransactionsAsyncWithHttpInfo (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Returns a corporation&#39;s wallet balance
        /// </summary>
        /// <remarks>
        /// Get a corporation&#39;s wallets  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdWallets200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdWallets200Ok>> GetCorporationsCorporationIdWalletsAsync (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Returns a corporation&#39;s wallet balance
        /// </summary>
        /// <remarks>
        /// Get a corporation&#39;s wallets  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdWallets200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdWallets200Ok>>> GetCorporationsCorporationIdWalletsAsyncWithHttpInfo (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Get corporation wallet journal
        /// </summary>
        /// <remarks>
        /// Retrieve corporation wallet journal  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdWalletsDivisionJournal200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>> GetCorporationsCorporationIdWalletsDivisionJournalAsync (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get corporation wallet journal
        /// </summary>
        /// <remarks>
        /// Retrieve corporation wallet journal  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdWalletsDivisionJournal200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>>> GetCorporationsCorporationIdWalletsDivisionJournalAsyncWithHttpInfo (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Get corporation wallet transactions
        /// </summary>
        /// <remarks>
        /// Get wallet transactions of a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdWalletsDivisionTransactions200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>> GetCorporationsCorporationIdWalletsDivisionTransactionsAsync (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get corporation wallet transactions
        /// </summary>
        /// <remarks>
        /// Get wallet transactions of a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdWalletsDivisionTransactions200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>>> GetCorporationsCorporationIdWalletsDivisionTransactionsAsyncWithHttpInfo (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WalletApi : IWalletApi
    {
        private ESIClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletApi(String basePath)
        {
            this.Configuration = new ESIClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ESIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WalletApi(ESIClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ESIClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ESIClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESIClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a character&#39;s wallet balance Returns a character&#39;s wallet balance  - --  This route is cached for up to 120 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>double?</returns>
        public double? GetCharactersCharacterIdWallet (int? characterId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<double?> localVarResponse = GetCharactersCharacterIdWalletWithHttpInfo(characterId, datasource, token, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a character&#39;s wallet balance Returns a character&#39;s wallet balance  - --  This route is cached for up to 120 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of double?</returns>
        public ApiResponse< double? > GetCharactersCharacterIdWalletWithHttpInfo (int? characterId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling WalletApi->GetCharactersCharacterIdWallet");

            var localVarPath = "/v1/characters/{character_id}/wallet/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<double?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (double?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(double?)));
        }

        /// <summary>
        /// Get a character&#39;s wallet balance Returns a character&#39;s wallet balance  - --  This route is cached for up to 120 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of double?</returns>
        public async System.Threading.Tasks.Task<double?> GetCharactersCharacterIdWalletAsync (int? characterId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<double?> localVarResponse = await GetCharactersCharacterIdWalletAsyncWithHttpInfo(characterId, datasource, token, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a character&#39;s wallet balance Returns a character&#39;s wallet balance  - --  This route is cached for up to 120 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (double?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<double?>> GetCharactersCharacterIdWalletAsyncWithHttpInfo (int? characterId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling WalletApi->GetCharactersCharacterIdWallet");

            var localVarPath = "/v1/characters/{character_id}/wallet/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<double?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (double?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(double?)));
        }

        /// <summary>
        /// Get character wallet journal Retrieve character wallet journal  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdWalletJournal200Ok&gt;</returns>
        public List<GetCharactersCharacterIdWalletJournal200Ok> GetCharactersCharacterIdWalletJournal (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCharactersCharacterIdWalletJournal200Ok>> localVarResponse = GetCharactersCharacterIdWalletJournalWithHttpInfo(characterId, datasource, fromId, token, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get character wallet journal Retrieve character wallet journal  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdWalletJournal200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdWalletJournal200Ok> > GetCharactersCharacterIdWalletJournalWithHttpInfo (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling WalletApi->GetCharactersCharacterIdWalletJournal");

            var localVarPath = "/v3/characters/{character_id}/wallet/journal/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (fromId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_id", fromId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdWalletJournal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdWalletJournal200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdWalletJournal200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdWalletJournal200Ok>)));
        }

        /// <summary>
        /// Get character wallet journal Retrieve character wallet journal  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdWalletJournal200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdWalletJournal200Ok>> GetCharactersCharacterIdWalletJournalAsync (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCharactersCharacterIdWalletJournal200Ok>> localVarResponse = await GetCharactersCharacterIdWalletJournalAsyncWithHttpInfo(characterId, datasource, fromId, token, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get character wallet journal Retrieve character wallet journal  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdWalletJournal200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdWalletJournal200Ok>>> GetCharactersCharacterIdWalletJournalAsyncWithHttpInfo (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling WalletApi->GetCharactersCharacterIdWalletJournal");

            var localVarPath = "/v3/characters/{character_id}/wallet/journal/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (fromId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_id", fromId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdWalletJournal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdWalletJournal200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdWalletJournal200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdWalletJournal200Ok>)));
        }

        /// <summary>
        /// Get wallet transactions Get wallet transactions of a character  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show transactions happened before the one referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdWalletTransactions200Ok&gt;</returns>
        public List<GetCharactersCharacterIdWalletTransactions200Ok> GetCharactersCharacterIdWalletTransactions (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCharactersCharacterIdWalletTransactions200Ok>> localVarResponse = GetCharactersCharacterIdWalletTransactionsWithHttpInfo(characterId, datasource, fromId, token, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get wallet transactions Get wallet transactions of a character  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show transactions happened before the one referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdWalletTransactions200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdWalletTransactions200Ok> > GetCharactersCharacterIdWalletTransactionsWithHttpInfo (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling WalletApi->GetCharactersCharacterIdWalletTransactions");

            var localVarPath = "/v1/characters/{character_id}/wallet/transactions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (fromId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_id", fromId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdWalletTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdWalletTransactions200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdWalletTransactions200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdWalletTransactions200Ok>)));
        }

        /// <summary>
        /// Get wallet transactions Get wallet transactions of a character  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show transactions happened before the one referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdWalletTransactions200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdWalletTransactions200Ok>> GetCharactersCharacterIdWalletTransactionsAsync (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCharactersCharacterIdWalletTransactions200Ok>> localVarResponse = await GetCharactersCharacterIdWalletTransactionsAsyncWithHttpInfo(characterId, datasource, fromId, token, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get wallet transactions Get wallet transactions of a character  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show transactions happened before the one referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdWalletTransactions200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdWalletTransactions200Ok>>> GetCharactersCharacterIdWalletTransactionsAsyncWithHttpInfo (int? characterId, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling WalletApi->GetCharactersCharacterIdWalletTransactions");

            var localVarPath = "/v1/characters/{character_id}/wallet/transactions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (fromId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_id", fromId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdWalletTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdWalletTransactions200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdWalletTransactions200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdWalletTransactions200Ok>)));
        }

        /// <summary>
        /// Returns a corporation&#39;s wallet balance Get a corporation&#39;s wallets  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdWallets200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdWallets200Ok> GetCorporationsCorporationIdWallets (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdWallets200Ok>> localVarResponse = GetCorporationsCorporationIdWalletsWithHttpInfo(corporationId, datasource, token, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a corporation&#39;s wallet balance Get a corporation&#39;s wallets  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdWallets200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdWallets200Ok> > GetCorporationsCorporationIdWalletsWithHttpInfo (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling WalletApi->GetCorporationsCorporationIdWallets");

            var localVarPath = "/v1/corporations/{corporation_id}/wallets/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdWallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdWallets200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdWallets200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdWallets200Ok>)));
        }

        /// <summary>
        /// Returns a corporation&#39;s wallet balance Get a corporation&#39;s wallets  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdWallets200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdWallets200Ok>> GetCorporationsCorporationIdWalletsAsync (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdWallets200Ok>> localVarResponse = await GetCorporationsCorporationIdWalletsAsyncWithHttpInfo(corporationId, datasource, token, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a corporation&#39;s wallet balance Get a corporation&#39;s wallets  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdWallets200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdWallets200Ok>>> GetCorporationsCorporationIdWalletsAsyncWithHttpInfo (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling WalletApi->GetCorporationsCorporationIdWallets");

            var localVarPath = "/v1/corporations/{corporation_id}/wallets/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdWallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdWallets200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdWallets200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdWallets200Ok>)));
        }

        /// <summary>
        /// Get corporation wallet journal Retrieve corporation wallet journal  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdWalletsDivisionJournal200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok> GetCorporationsCorporationIdWalletsDivisionJournal (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>> localVarResponse = GetCorporationsCorporationIdWalletsDivisionJournalWithHttpInfo(corporationId, division, datasource, fromId, token, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation wallet journal Retrieve corporation wallet journal  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdWalletsDivisionJournal200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok> > GetCorporationsCorporationIdWalletsDivisionJournalWithHttpInfo (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling WalletApi->GetCorporationsCorporationIdWalletsDivisionJournal");
            // verify the required parameter 'division' is set
            if (division == null)
                throw new ApiException(400, "Missing required parameter 'division' when calling WalletApi->GetCorporationsCorporationIdWalletsDivisionJournal");

            var localVarPath = "/v2/corporations/{corporation_id}/wallets/{division}/journal/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (division != null) localVarPathParams.Add("division", this.Configuration.ApiClient.ParameterToString(division)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (fromId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_id", fromId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdWalletsDivisionJournal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>)));
        }

        /// <summary>
        /// Get corporation wallet journal Retrieve corporation wallet journal  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdWalletsDivisionJournal200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>> GetCorporationsCorporationIdWalletsDivisionJournalAsync (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>> localVarResponse = await GetCorporationsCorporationIdWalletsDivisionJournalAsyncWithHttpInfo(corporationId, division, datasource, fromId, token, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation wallet journal Retrieve corporation wallet journal  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdWalletsDivisionJournal200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>>> GetCorporationsCorporationIdWalletsDivisionJournalAsyncWithHttpInfo (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling WalletApi->GetCorporationsCorporationIdWalletsDivisionJournal");
            // verify the required parameter 'division' is set
            if (division == null)
                throw new ApiException(400, "Missing required parameter 'division' when calling WalletApi->GetCorporationsCorporationIdWalletsDivisionJournal");

            var localVarPath = "/v2/corporations/{corporation_id}/wallets/{division}/journal/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (division != null) localVarPathParams.Add("division", this.Configuration.ApiClient.ParameterToString(division)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (fromId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_id", fromId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdWalletsDivisionJournal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>)));
        }

        /// <summary>
        /// Get corporation wallet transactions Get wallet transactions of a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdWalletsDivisionTransactions200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok> GetCorporationsCorporationIdWalletsDivisionTransactions (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>> localVarResponse = GetCorporationsCorporationIdWalletsDivisionTransactionsWithHttpInfo(corporationId, division, datasource, fromId, token, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation wallet transactions Get wallet transactions of a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdWalletsDivisionTransactions200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok> > GetCorporationsCorporationIdWalletsDivisionTransactionsWithHttpInfo (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling WalletApi->GetCorporationsCorporationIdWalletsDivisionTransactions");
            // verify the required parameter 'division' is set
            if (division == null)
                throw new ApiException(400, "Missing required parameter 'division' when calling WalletApi->GetCorporationsCorporationIdWalletsDivisionTransactions");

            var localVarPath = "/v1/corporations/{corporation_id}/wallets/{division}/transactions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (division != null) localVarPathParams.Add("division", this.Configuration.ApiClient.ParameterToString(division)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (fromId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_id", fromId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdWalletsDivisionTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>)));
        }

        /// <summary>
        /// Get corporation wallet transactions Get wallet transactions of a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdWalletsDivisionTransactions200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>> GetCorporationsCorporationIdWalletsDivisionTransactionsAsync (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>> localVarResponse = await GetCorporationsCorporationIdWalletsDivisionTransactionsAsyncWithHttpInfo(corporationId, division, datasource, fromId, token, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation wallet transactions Get wallet transactions of a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="division">Wallet key of the division to fetch journals from</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="fromId">Only show journal entries happened before the transaction referenced by this id (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdWalletsDivisionTransactions200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>>> GetCorporationsCorporationIdWalletsDivisionTransactionsAsyncWithHttpInfo (int? corporationId, int? division, string datasource = null, long? fromId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling WalletApi->GetCorporationsCorporationIdWalletsDivisionTransactions");
            // verify the required parameter 'division' is set
            if (division == null)
                throw new ApiException(400, "Missing required parameter 'division' when calling WalletApi->GetCorporationsCorporationIdWalletsDivisionTransactions");

            var localVarPath = "/v1/corporations/{corporation_id}/wallets/{division}/transactions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (division != null) localVarPathParams.Add("division", this.Configuration.ApiClient.ParameterToString(division)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (fromId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_id", fromId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdWalletsDivisionTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>)));
        }

    }
}
