/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ESIClient.Client;
using ESIClient.Model;

namespace ESIClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKillmailsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get character kills and losses
        /// </summary>
        /// <remarks>
        /// Return a list of character&#39;s recent kills and losses  - --  This route is cached for up to 120 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxCount">How many killmails to return at maximum (optional, default to 50)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this.  (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdKillmailsRecent200Ok&gt;</returns>
        List<GetCharactersCharacterIdKillmailsRecent200Ok> GetCharactersCharacterIdKillmailsRecent (int? characterId, string datasource = null, int? maxCount = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get character kills and losses
        /// </summary>
        /// <remarks>
        /// Return a list of character&#39;s recent kills and losses  - --  This route is cached for up to 120 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxCount">How many killmails to return at maximum (optional, default to 50)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this.  (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdKillmailsRecent200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdKillmailsRecent200Ok>> GetCharactersCharacterIdKillmailsRecentWithHttpInfo (int? characterId, string datasource = null, int? maxCount = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Get corporation kills and losses
        /// </summary>
        /// <remarks>
        /// Get a list of corporation&#39;s recent kills and losses  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdKillmailsRecent200Ok&gt;</returns>
        List<GetCorporationsCorporationIdKillmailsRecent200Ok> GetCorporationsCorporationIdKillmailsRecent (int? corporationId, string datasource = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get corporation kills and losses
        /// </summary>
        /// <remarks>
        /// Get a list of corporation&#39;s recent kills and losses  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdKillmailsRecent200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdKillmailsRecent200Ok>> GetCorporationsCorporationIdKillmailsRecentWithHttpInfo (int? corporationId, string datasource = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Get a single killmail
        /// </summary>
        /// <remarks>
        /// Return a single killmail from its ID and hash  - --  This route is cached for up to 1209600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="killmailHash">The killmail hash for verification</param>
        /// <param name="killmailId">The killmail ID to be queried</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>GetKillmailsKillmailIdKillmailHashOk</returns>
        GetKillmailsKillmailIdKillmailHashOk GetKillmailsKillmailIdKillmailHash (string killmailHash, int? killmailId, string datasource = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get a single killmail
        /// </summary>
        /// <remarks>
        /// Return a single killmail from its ID and hash  - --  This route is cached for up to 1209600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="killmailHash">The killmail hash for verification</param>
        /// <param name="killmailId">The killmail ID to be queried</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of GetKillmailsKillmailIdKillmailHashOk</returns>
        ApiResponse<GetKillmailsKillmailIdKillmailHashOk> GetKillmailsKillmailIdKillmailHashWithHttpInfo (string killmailHash, int? killmailId, string datasource = null, string userAgent = null, string xUserAgent = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get character kills and losses
        /// </summary>
        /// <remarks>
        /// Return a list of character&#39;s recent kills and losses  - --  This route is cached for up to 120 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxCount">How many killmails to return at maximum (optional, default to 50)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this.  (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdKillmailsRecent200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdKillmailsRecent200Ok>> GetCharactersCharacterIdKillmailsRecentAsync (int? characterId, string datasource = null, int? maxCount = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get character kills and losses
        /// </summary>
        /// <remarks>
        /// Return a list of character&#39;s recent kills and losses  - --  This route is cached for up to 120 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxCount">How many killmails to return at maximum (optional, default to 50)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this.  (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdKillmailsRecent200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdKillmailsRecent200Ok>>> GetCharactersCharacterIdKillmailsRecentAsyncWithHttpInfo (int? characterId, string datasource = null, int? maxCount = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Get corporation kills and losses
        /// </summary>
        /// <remarks>
        /// Get a list of corporation&#39;s recent kills and losses  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdKillmailsRecent200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdKillmailsRecent200Ok>> GetCorporationsCorporationIdKillmailsRecentAsync (int? corporationId, string datasource = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get corporation kills and losses
        /// </summary>
        /// <remarks>
        /// Get a list of corporation&#39;s recent kills and losses  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdKillmailsRecent200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdKillmailsRecent200Ok>>> GetCorporationsCorporationIdKillmailsRecentAsyncWithHttpInfo (int? corporationId, string datasource = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Get a single killmail
        /// </summary>
        /// <remarks>
        /// Return a single killmail from its ID and hash  - --  This route is cached for up to 1209600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="killmailHash">The killmail hash for verification</param>
        /// <param name="killmailId">The killmail ID to be queried</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of GetKillmailsKillmailIdKillmailHashOk</returns>
        System.Threading.Tasks.Task<GetKillmailsKillmailIdKillmailHashOk> GetKillmailsKillmailIdKillmailHashAsync (string killmailHash, int? killmailId, string datasource = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Get a single killmail
        /// </summary>
        /// <remarks>
        /// Return a single killmail from its ID and hash  - --  This route is cached for up to 1209600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="killmailHash">The killmail hash for verification</param>
        /// <param name="killmailId">The killmail ID to be queried</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (GetKillmailsKillmailIdKillmailHashOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetKillmailsKillmailIdKillmailHashOk>> GetKillmailsKillmailIdKillmailHashAsyncWithHttpInfo (string killmailHash, int? killmailId, string datasource = null, string userAgent = null, string xUserAgent = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KillmailsApi : IKillmailsApi
    {
        private ESIClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KillmailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KillmailsApi(String basePath)
        {
            this.Configuration = new ESIClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ESIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KillmailsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KillmailsApi(ESIClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ESIClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ESIClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESIClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get character kills and losses Return a list of character&#39;s recent kills and losses  - --  This route is cached for up to 120 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxCount">How many killmails to return at maximum (optional, default to 50)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this.  (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdKillmailsRecent200Ok&gt;</returns>
        public List<GetCharactersCharacterIdKillmailsRecent200Ok> GetCharactersCharacterIdKillmailsRecent (int? characterId, string datasource = null, int? maxCount = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCharactersCharacterIdKillmailsRecent200Ok>> localVarResponse = GetCharactersCharacterIdKillmailsRecentWithHttpInfo(characterId, datasource, maxCount, maxKillId, token, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get character kills and losses Return a list of character&#39;s recent kills and losses  - --  This route is cached for up to 120 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxCount">How many killmails to return at maximum (optional, default to 50)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this.  (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdKillmailsRecent200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdKillmailsRecent200Ok> > GetCharactersCharacterIdKillmailsRecentWithHttpInfo (int? characterId, string datasource = null, int? maxCount = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling KillmailsApi->GetCharactersCharacterIdKillmailsRecent");

            var localVarPath = "/v1/characters/{character_id}/killmails/recent/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (maxCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_count", maxCount)); // query parameter
            if (maxKillId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_kill_id", maxKillId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdKillmailsRecent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdKillmailsRecent200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdKillmailsRecent200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdKillmailsRecent200Ok>)));
        }

        /// <summary>
        /// Get character kills and losses Return a list of character&#39;s recent kills and losses  - --  This route is cached for up to 120 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxCount">How many killmails to return at maximum (optional, default to 50)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this.  (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdKillmailsRecent200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdKillmailsRecent200Ok>> GetCharactersCharacterIdKillmailsRecentAsync (int? characterId, string datasource = null, int? maxCount = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCharactersCharacterIdKillmailsRecent200Ok>> localVarResponse = await GetCharactersCharacterIdKillmailsRecentAsyncWithHttpInfo(characterId, datasource, maxCount, maxKillId, token, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get character kills and losses Return a list of character&#39;s recent kills and losses  - --  This route is cached for up to 120 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxCount">How many killmails to return at maximum (optional, default to 50)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this.  (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdKillmailsRecent200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdKillmailsRecent200Ok>>> GetCharactersCharacterIdKillmailsRecentAsyncWithHttpInfo (int? characterId, string datasource = null, int? maxCount = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling KillmailsApi->GetCharactersCharacterIdKillmailsRecent");

            var localVarPath = "/v1/characters/{character_id}/killmails/recent/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (maxCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_count", maxCount)); // query parameter
            if (maxKillId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_kill_id", maxKillId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdKillmailsRecent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdKillmailsRecent200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdKillmailsRecent200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdKillmailsRecent200Ok>)));
        }

        /// <summary>
        /// Get corporation kills and losses Get a list of corporation&#39;s recent kills and losses  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdKillmailsRecent200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdKillmailsRecent200Ok> GetCorporationsCorporationIdKillmailsRecent (int? corporationId, string datasource = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdKillmailsRecent200Ok>> localVarResponse = GetCorporationsCorporationIdKillmailsRecentWithHttpInfo(corporationId, datasource, maxKillId, token, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation kills and losses Get a list of corporation&#39;s recent kills and losses  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdKillmailsRecent200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdKillmailsRecent200Ok> > GetCorporationsCorporationIdKillmailsRecentWithHttpInfo (int? corporationId, string datasource = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling KillmailsApi->GetCorporationsCorporationIdKillmailsRecent");

            var localVarPath = "/v1/corporations/{corporation_id}/killmails/recent/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (maxKillId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_kill_id", maxKillId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdKillmailsRecent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdKillmailsRecent200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdKillmailsRecent200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdKillmailsRecent200Ok>)));
        }

        /// <summary>
        /// Get corporation kills and losses Get a list of corporation&#39;s recent kills and losses  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdKillmailsRecent200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdKillmailsRecent200Ok>> GetCorporationsCorporationIdKillmailsRecentAsync (int? corporationId, string datasource = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdKillmailsRecent200Ok>> localVarResponse = await GetCorporationsCorporationIdKillmailsRecentAsyncWithHttpInfo(corporationId, datasource, maxKillId, token, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation kills and losses Get a list of corporation&#39;s recent kills and losses  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): Director
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="maxKillId">Only return killmails with ID smaller than this (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdKillmailsRecent200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdKillmailsRecent200Ok>>> GetCorporationsCorporationIdKillmailsRecentAsyncWithHttpInfo (int? corporationId, string datasource = null, int? maxKillId = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling KillmailsApi->GetCorporationsCorporationIdKillmailsRecent");

            var localVarPath = "/v1/corporations/{corporation_id}/killmails/recent/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (maxKillId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_kill_id", maxKillId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdKillmailsRecent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdKillmailsRecent200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdKillmailsRecent200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdKillmailsRecent200Ok>)));
        }

        /// <summary>
        /// Get a single killmail Return a single killmail from its ID and hash  - --  This route is cached for up to 1209600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="killmailHash">The killmail hash for verification</param>
        /// <param name="killmailId">The killmail ID to be queried</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>GetKillmailsKillmailIdKillmailHashOk</returns>
        public GetKillmailsKillmailIdKillmailHashOk GetKillmailsKillmailIdKillmailHash (string killmailHash, int? killmailId, string datasource = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<GetKillmailsKillmailIdKillmailHashOk> localVarResponse = GetKillmailsKillmailIdKillmailHashWithHttpInfo(killmailHash, killmailId, datasource, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single killmail Return a single killmail from its ID and hash  - --  This route is cached for up to 1209600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="killmailHash">The killmail hash for verification</param>
        /// <param name="killmailId">The killmail ID to be queried</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of GetKillmailsKillmailIdKillmailHashOk</returns>
        public ApiResponse< GetKillmailsKillmailIdKillmailHashOk > GetKillmailsKillmailIdKillmailHashWithHttpInfo (string killmailHash, int? killmailId, string datasource = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'killmailHash' is set
            if (killmailHash == null)
                throw new ApiException(400, "Missing required parameter 'killmailHash' when calling KillmailsApi->GetKillmailsKillmailIdKillmailHash");
            // verify the required parameter 'killmailId' is set
            if (killmailId == null)
                throw new ApiException(400, "Missing required parameter 'killmailId' when calling KillmailsApi->GetKillmailsKillmailIdKillmailHash");

            var localVarPath = "/v1/killmails/{killmail_id}/{killmail_hash}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (killmailHash != null) localVarPathParams.Add("killmail_hash", this.Configuration.ApiClient.ParameterToString(killmailHash)); // path parameter
            if (killmailId != null) localVarPathParams.Add("killmail_id", this.Configuration.ApiClient.ParameterToString(killmailId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKillmailsKillmailIdKillmailHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetKillmailsKillmailIdKillmailHashOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetKillmailsKillmailIdKillmailHashOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetKillmailsKillmailIdKillmailHashOk)));
        }

        /// <summary>
        /// Get a single killmail Return a single killmail from its ID and hash  - --  This route is cached for up to 1209600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="killmailHash">The killmail hash for verification</param>
        /// <param name="killmailId">The killmail ID to be queried</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of GetKillmailsKillmailIdKillmailHashOk</returns>
        public async System.Threading.Tasks.Task<GetKillmailsKillmailIdKillmailHashOk> GetKillmailsKillmailIdKillmailHashAsync (string killmailHash, int? killmailId, string datasource = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<GetKillmailsKillmailIdKillmailHashOk> localVarResponse = await GetKillmailsKillmailIdKillmailHashAsyncWithHttpInfo(killmailHash, killmailId, datasource, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single killmail Return a single killmail from its ID and hash  - --  This route is cached for up to 1209600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="killmailHash">The killmail hash for verification</param>
        /// <param name="killmailId">The killmail ID to be queried</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (GetKillmailsKillmailIdKillmailHashOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetKillmailsKillmailIdKillmailHashOk>> GetKillmailsKillmailIdKillmailHashAsyncWithHttpInfo (string killmailHash, int? killmailId, string datasource = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'killmailHash' is set
            if (killmailHash == null)
                throw new ApiException(400, "Missing required parameter 'killmailHash' when calling KillmailsApi->GetKillmailsKillmailIdKillmailHash");
            // verify the required parameter 'killmailId' is set
            if (killmailId == null)
                throw new ApiException(400, "Missing required parameter 'killmailId' when calling KillmailsApi->GetKillmailsKillmailIdKillmailHash");

            var localVarPath = "/v1/killmails/{killmail_id}/{killmail_hash}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (killmailHash != null) localVarPathParams.Add("killmail_hash", this.Configuration.ApiClient.ParameterToString(killmailHash)); // path parameter
            if (killmailId != null) localVarPathParams.Add("killmail_id", this.Configuration.ApiClient.ParameterToString(killmailId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKillmailsKillmailIdKillmailHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetKillmailsKillmailIdKillmailHashOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetKillmailsKillmailIdKillmailHashOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetKillmailsKillmailIdKillmailHashOk)));
        }

    }
}
