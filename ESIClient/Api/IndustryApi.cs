/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ESIClient.Client;
using ESIClient.Model;

namespace ESIClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIndustryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List character industry jobs
        /// </summary>
        /// <remarks>
        /// List industry jobs placed by a character  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed character industry jobs as well (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdIndustryJobs200Ok&gt;</returns>
        List<GetCharactersCharacterIdIndustryJobs200Ok> GetCharactersCharacterIdIndustryJobs (int? characterId, string datasource = null, bool? includeCompleted = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// List character industry jobs
        /// </summary>
        /// <remarks>
        /// List industry jobs placed by a character  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed character industry jobs as well (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdIndustryJobs200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdIndustryJobs200Ok>> GetCharactersCharacterIdIndustryJobsWithHttpInfo (int? characterId, string datasource = null, bool? includeCompleted = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Character mining ledger
        /// </summary>
        /// <remarks>
        /// Paginated record of all mining done by a character for the past 30 days  - --  This route is cached for up to 600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdMining200Ok&gt;</returns>
        List<GetCharactersCharacterIdMining200Ok> GetCharactersCharacterIdMining (int? characterId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Character mining ledger
        /// </summary>
        /// <remarks>
        /// Paginated record of all mining done by a character for the past 30 days  - --  This route is cached for up to 600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdMining200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdMining200Ok>> GetCharactersCharacterIdMiningWithHttpInfo (int? characterId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Moon extraction timers
        /// </summary>
        /// <remarks>
        /// Extraction timers for all moon chunks being extracted by refineries belonging to a corporation.  - --  This route is cached for up to 1800 seconds  - -- Requires one of the following EVE corporation role(s): Structure_manager
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationCorporationIdMiningExtractions200Ok&gt;</returns>
        List<GetCorporationCorporationIdMiningExtractions200Ok> GetCorporationCorporationIdMiningExtractions (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Moon extraction timers
        /// </summary>
        /// <remarks>
        /// Extraction timers for all moon chunks being extracted by refineries belonging to a corporation.  - --  This route is cached for up to 1800 seconds  - -- Requires one of the following EVE corporation role(s): Structure_manager
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationCorporationIdMiningExtractions200Ok&gt;</returns>
        ApiResponse<List<GetCorporationCorporationIdMiningExtractions200Ok>> GetCorporationCorporationIdMiningExtractionsWithHttpInfo (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Corporation mining observers
        /// </summary>
        /// <remarks>
        /// Paginated list of all entities capable of observing and recording mining for a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationCorporationIdMiningObservers200Ok&gt;</returns>
        List<GetCorporationCorporationIdMiningObservers200Ok> GetCorporationCorporationIdMiningObservers (int? corporationId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Corporation mining observers
        /// </summary>
        /// <remarks>
        /// Paginated list of all entities capable of observing and recording mining for a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationCorporationIdMiningObservers200Ok&gt;</returns>
        ApiResponse<List<GetCorporationCorporationIdMiningObservers200Ok>> GetCorporationCorporationIdMiningObserversWithHttpInfo (int? corporationId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Observed corporation mining
        /// </summary>
        /// <remarks>
        /// Paginated record of all mining seen by an observer  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="observerId">A mining observer id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationCorporationIdMiningObserversObserverId200Ok&gt;</returns>
        List<GetCorporationCorporationIdMiningObserversObserverId200Ok> GetCorporationCorporationIdMiningObserversObserverId (int? corporationId, long? observerId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Observed corporation mining
        /// </summary>
        /// <remarks>
        /// Paginated record of all mining seen by an observer  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="observerId">A mining observer id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationCorporationIdMiningObserversObserverId200Ok&gt;</returns>
        ApiResponse<List<GetCorporationCorporationIdMiningObserversObserverId200Ok>> GetCorporationCorporationIdMiningObserversObserverIdWithHttpInfo (int? corporationId, long? observerId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// List corporation industry jobs
        /// </summary>
        /// <remarks>
        /// List industry jobs run by a corporation  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): FactoryManager
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed industry jobs as well (optional, default to false)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdIndustryJobs200Ok&gt;</returns>
        List<GetCorporationsCorporationIdIndustryJobs200Ok> GetCorporationsCorporationIdIndustryJobs (int? corporationId, string datasource = null, bool? includeCompleted = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// List corporation industry jobs
        /// </summary>
        /// <remarks>
        /// List industry jobs run by a corporation  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): FactoryManager
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed industry jobs as well (optional, default to false)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdIndustryJobs200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdIndustryJobs200Ok>> GetCorporationsCorporationIdIndustryJobsWithHttpInfo (int? corporationId, string datasource = null, bool? includeCompleted = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// List industry facilities
        /// </summary>
        /// <remarks>
        /// Return a list of industry facilities  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetIndustryFacilities200Ok&gt;</returns>
        List<GetIndustryFacilities200Ok> GetIndustryFacilities (string datasource = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// List industry facilities
        /// </summary>
        /// <remarks>
        /// Return a list of industry facilities  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetIndustryFacilities200Ok&gt;</returns>
        ApiResponse<List<GetIndustryFacilities200Ok>> GetIndustryFacilitiesWithHttpInfo (string datasource = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// List solar system cost indices
        /// </summary>
        /// <remarks>
        /// Return cost indices for solar systems  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetIndustrySystems200Ok&gt;</returns>
        List<GetIndustrySystems200Ok> GetIndustrySystems (string datasource = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// List solar system cost indices
        /// </summary>
        /// <remarks>
        /// Return cost indices for solar systems  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetIndustrySystems200Ok&gt;</returns>
        ApiResponse<List<GetIndustrySystems200Ok>> GetIndustrySystemsWithHttpInfo (string datasource = null, string userAgent = null, string xUserAgent = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List character industry jobs
        /// </summary>
        /// <remarks>
        /// List industry jobs placed by a character  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed character industry jobs as well (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdIndustryJobs200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdIndustryJobs200Ok>> GetCharactersCharacterIdIndustryJobsAsync (int? characterId, string datasource = null, bool? includeCompleted = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// List character industry jobs
        /// </summary>
        /// <remarks>
        /// List industry jobs placed by a character  - --  This route is cached for up to 300 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed character industry jobs as well (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdIndustryJobs200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdIndustryJobs200Ok>>> GetCharactersCharacterIdIndustryJobsAsyncWithHttpInfo (int? characterId, string datasource = null, bool? includeCompleted = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Character mining ledger
        /// </summary>
        /// <remarks>
        /// Paginated record of all mining done by a character for the past 30 days  - --  This route is cached for up to 600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdMining200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdMining200Ok>> GetCharactersCharacterIdMiningAsync (int? characterId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Character mining ledger
        /// </summary>
        /// <remarks>
        /// Paginated record of all mining done by a character for the past 30 days  - --  This route is cached for up to 600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdMining200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdMining200Ok>>> GetCharactersCharacterIdMiningAsyncWithHttpInfo (int? characterId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Moon extraction timers
        /// </summary>
        /// <remarks>
        /// Extraction timers for all moon chunks being extracted by refineries belonging to a corporation.  - --  This route is cached for up to 1800 seconds  - -- Requires one of the following EVE corporation role(s): Structure_manager
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationCorporationIdMiningExtractions200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationCorporationIdMiningExtractions200Ok>> GetCorporationCorporationIdMiningExtractionsAsync (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Moon extraction timers
        /// </summary>
        /// <remarks>
        /// Extraction timers for all moon chunks being extracted by refineries belonging to a corporation.  - --  This route is cached for up to 1800 seconds  - -- Requires one of the following EVE corporation role(s): Structure_manager
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationCorporationIdMiningExtractions200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationCorporationIdMiningExtractions200Ok>>> GetCorporationCorporationIdMiningExtractionsAsyncWithHttpInfo (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Corporation mining observers
        /// </summary>
        /// <remarks>
        /// Paginated list of all entities capable of observing and recording mining for a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationCorporationIdMiningObservers200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationCorporationIdMiningObservers200Ok>> GetCorporationCorporationIdMiningObserversAsync (int? corporationId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Corporation mining observers
        /// </summary>
        /// <remarks>
        /// Paginated list of all entities capable of observing and recording mining for a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationCorporationIdMiningObservers200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationCorporationIdMiningObservers200Ok>>> GetCorporationCorporationIdMiningObserversAsyncWithHttpInfo (int? corporationId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// Observed corporation mining
        /// </summary>
        /// <remarks>
        /// Paginated record of all mining seen by an observer  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="observerId">A mining observer id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationCorporationIdMiningObserversObserverId200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationCorporationIdMiningObserversObserverId200Ok>> GetCorporationCorporationIdMiningObserversObserverIdAsync (int? corporationId, long? observerId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// Observed corporation mining
        /// </summary>
        /// <remarks>
        /// Paginated record of all mining seen by an observer  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="observerId">A mining observer id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationCorporationIdMiningObserversObserverId200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationCorporationIdMiningObserversObserverId200Ok>>> GetCorporationCorporationIdMiningObserversObserverIdAsyncWithHttpInfo (int? corporationId, long? observerId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// List corporation industry jobs
        /// </summary>
        /// <remarks>
        /// List industry jobs run by a corporation  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): FactoryManager
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed industry jobs as well (optional, default to false)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdIndustryJobs200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdIndustryJobs200Ok>> GetCorporationsCorporationIdIndustryJobsAsync (int? corporationId, string datasource = null, bool? includeCompleted = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// List corporation industry jobs
        /// </summary>
        /// <remarks>
        /// List industry jobs run by a corporation  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): FactoryManager
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed industry jobs as well (optional, default to false)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdIndustryJobs200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdIndustryJobs200Ok>>> GetCorporationsCorporationIdIndustryJobsAsyncWithHttpInfo (int? corporationId, string datasource = null, bool? includeCompleted = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// List industry facilities
        /// </summary>
        /// <remarks>
        /// Return a list of industry facilities  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetIndustryFacilities200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetIndustryFacilities200Ok>> GetIndustryFacilitiesAsync (string datasource = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// List industry facilities
        /// </summary>
        /// <remarks>
        /// Return a list of industry facilities  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetIndustryFacilities200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetIndustryFacilities200Ok>>> GetIndustryFacilitiesAsyncWithHttpInfo (string datasource = null, string userAgent = null, string xUserAgent = null);
        /// <summary>
        /// List solar system cost indices
        /// </summary>
        /// <remarks>
        /// Return cost indices for solar systems  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetIndustrySystems200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetIndustrySystems200Ok>> GetIndustrySystemsAsync (string datasource = null, string userAgent = null, string xUserAgent = null);

        /// <summary>
        /// List solar system cost indices
        /// </summary>
        /// <remarks>
        /// Return cost indices for solar systems  - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetIndustrySystems200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetIndustrySystems200Ok>>> GetIndustrySystemsAsyncWithHttpInfo (string datasource = null, string userAgent = null, string xUserAgent = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IndustryApi : IIndustryApi
    {
        private ESIClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IndustryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IndustryApi(String basePath)
        {
            this.Configuration = new ESIClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ESIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndustryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IndustryApi(ESIClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ESIClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ESIClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESIClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List character industry jobs List industry jobs placed by a character  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed character industry jobs as well (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdIndustryJobs200Ok&gt;</returns>
        public List<GetCharactersCharacterIdIndustryJobs200Ok> GetCharactersCharacterIdIndustryJobs (int? characterId, string datasource = null, bool? includeCompleted = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCharactersCharacterIdIndustryJobs200Ok>> localVarResponse = GetCharactersCharacterIdIndustryJobsWithHttpInfo(characterId, datasource, includeCompleted, token, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List character industry jobs List industry jobs placed by a character  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed character industry jobs as well (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdIndustryJobs200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdIndustryJobs200Ok> > GetCharactersCharacterIdIndustryJobsWithHttpInfo (int? characterId, string datasource = null, bool? includeCompleted = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling IndustryApi->GetCharactersCharacterIdIndustryJobs");

            var localVarPath = "/v1/characters/{character_id}/industry/jobs/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (includeCompleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_completed", includeCompleted)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdIndustryJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdIndustryJobs200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdIndustryJobs200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdIndustryJobs200Ok>)));
        }

        /// <summary>
        /// List character industry jobs List industry jobs placed by a character  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed character industry jobs as well (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdIndustryJobs200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdIndustryJobs200Ok>> GetCharactersCharacterIdIndustryJobsAsync (int? characterId, string datasource = null, bool? includeCompleted = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCharactersCharacterIdIndustryJobs200Ok>> localVarResponse = await GetCharactersCharacterIdIndustryJobsAsyncWithHttpInfo(characterId, datasource, includeCompleted, token, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List character industry jobs List industry jobs placed by a character  - --  This route is cached for up to 300 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed character industry jobs as well (optional)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdIndustryJobs200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdIndustryJobs200Ok>>> GetCharactersCharacterIdIndustryJobsAsyncWithHttpInfo (int? characterId, string datasource = null, bool? includeCompleted = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling IndustryApi->GetCharactersCharacterIdIndustryJobs");

            var localVarPath = "/v1/characters/{character_id}/industry/jobs/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (includeCompleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_completed", includeCompleted)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdIndustryJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdIndustryJobs200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdIndustryJobs200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdIndustryJobs200Ok>)));
        }

        /// <summary>
        /// Character mining ledger Paginated record of all mining done by a character for the past 30 days  - --  This route is cached for up to 600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCharactersCharacterIdMining200Ok&gt;</returns>
        public List<GetCharactersCharacterIdMining200Ok> GetCharactersCharacterIdMining (int? characterId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCharactersCharacterIdMining200Ok>> localVarResponse = GetCharactersCharacterIdMiningWithHttpInfo(characterId, datasource, page, token, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Character mining ledger Paginated record of all mining done by a character for the past 30 days  - --  This route is cached for up to 600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdMining200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdMining200Ok> > GetCharactersCharacterIdMiningWithHttpInfo (int? characterId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling IndustryApi->GetCharactersCharacterIdMining");

            var localVarPath = "/v1/characters/{character_id}/mining/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdMining", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdMining200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdMining200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdMining200Ok>)));
        }

        /// <summary>
        /// Character mining ledger Paginated record of all mining done by a character for the past 30 days  - --  This route is cached for up to 600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdMining200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdMining200Ok>> GetCharactersCharacterIdMiningAsync (int? characterId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCharactersCharacterIdMining200Ok>> localVarResponse = await GetCharactersCharacterIdMiningAsyncWithHttpInfo(characterId, datasource, page, token, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Character mining ledger Paginated record of all mining done by a character for the past 30 days  - --  This route is cached for up to 600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdMining200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdMining200Ok>>> GetCharactersCharacterIdMiningAsyncWithHttpInfo (int? characterId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling IndustryApi->GetCharactersCharacterIdMining");

            var localVarPath = "/v1/characters/{character_id}/mining/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("character_id", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdMining", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdMining200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdMining200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdMining200Ok>)));
        }

        /// <summary>
        /// Moon extraction timers Extraction timers for all moon chunks being extracted by refineries belonging to a corporation.  - --  This route is cached for up to 1800 seconds  - -- Requires one of the following EVE corporation role(s): Structure_manager
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationCorporationIdMiningExtractions200Ok&gt;</returns>
        public List<GetCorporationCorporationIdMiningExtractions200Ok> GetCorporationCorporationIdMiningExtractions (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationCorporationIdMiningExtractions200Ok>> localVarResponse = GetCorporationCorporationIdMiningExtractionsWithHttpInfo(corporationId, datasource, token, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Moon extraction timers Extraction timers for all moon chunks being extracted by refineries belonging to a corporation.  - --  This route is cached for up to 1800 seconds  - -- Requires one of the following EVE corporation role(s): Structure_manager
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationCorporationIdMiningExtractions200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationCorporationIdMiningExtractions200Ok> > GetCorporationCorporationIdMiningExtractionsWithHttpInfo (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling IndustryApi->GetCorporationCorporationIdMiningExtractions");

            var localVarPath = "/v1/corporation/{corporation_id}/mining/extractions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationCorporationIdMiningExtractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationCorporationIdMiningExtractions200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationCorporationIdMiningExtractions200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationCorporationIdMiningExtractions200Ok>)));
        }

        /// <summary>
        /// Moon extraction timers Extraction timers for all moon chunks being extracted by refineries belonging to a corporation.  - --  This route is cached for up to 1800 seconds  - -- Requires one of the following EVE corporation role(s): Structure_manager
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationCorporationIdMiningExtractions200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationCorporationIdMiningExtractions200Ok>> GetCorporationCorporationIdMiningExtractionsAsync (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationCorporationIdMiningExtractions200Ok>> localVarResponse = await GetCorporationCorporationIdMiningExtractionsAsyncWithHttpInfo(corporationId, datasource, token, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Moon extraction timers Extraction timers for all moon chunks being extracted by refineries belonging to a corporation.  - --  This route is cached for up to 1800 seconds  - -- Requires one of the following EVE corporation role(s): Structure_manager
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationCorporationIdMiningExtractions200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationCorporationIdMiningExtractions200Ok>>> GetCorporationCorporationIdMiningExtractionsAsyncWithHttpInfo (int? corporationId, string datasource = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling IndustryApi->GetCorporationCorporationIdMiningExtractions");

            var localVarPath = "/v1/corporation/{corporation_id}/mining/extractions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationCorporationIdMiningExtractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationCorporationIdMiningExtractions200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationCorporationIdMiningExtractions200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationCorporationIdMiningExtractions200Ok>)));
        }

        /// <summary>
        /// Corporation mining observers Paginated list of all entities capable of observing and recording mining for a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationCorporationIdMiningObservers200Ok&gt;</returns>
        public List<GetCorporationCorporationIdMiningObservers200Ok> GetCorporationCorporationIdMiningObservers (int? corporationId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationCorporationIdMiningObservers200Ok>> localVarResponse = GetCorporationCorporationIdMiningObserversWithHttpInfo(corporationId, datasource, page, token, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Corporation mining observers Paginated list of all entities capable of observing and recording mining for a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationCorporationIdMiningObservers200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationCorporationIdMiningObservers200Ok> > GetCorporationCorporationIdMiningObserversWithHttpInfo (int? corporationId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling IndustryApi->GetCorporationCorporationIdMiningObservers");

            var localVarPath = "/v1/corporation/{corporation_id}/mining/observers/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationCorporationIdMiningObservers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationCorporationIdMiningObservers200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationCorporationIdMiningObservers200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationCorporationIdMiningObservers200Ok>)));
        }

        /// <summary>
        /// Corporation mining observers Paginated list of all entities capable of observing and recording mining for a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationCorporationIdMiningObservers200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationCorporationIdMiningObservers200Ok>> GetCorporationCorporationIdMiningObserversAsync (int? corporationId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationCorporationIdMiningObservers200Ok>> localVarResponse = await GetCorporationCorporationIdMiningObserversAsyncWithHttpInfo(corporationId, datasource, page, token, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Corporation mining observers Paginated list of all entities capable of observing and recording mining for a corporation  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationCorporationIdMiningObservers200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationCorporationIdMiningObservers200Ok>>> GetCorporationCorporationIdMiningObserversAsyncWithHttpInfo (int? corporationId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling IndustryApi->GetCorporationCorporationIdMiningObservers");

            var localVarPath = "/v1/corporation/{corporation_id}/mining/observers/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationCorporationIdMiningObservers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationCorporationIdMiningObservers200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationCorporationIdMiningObservers200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationCorporationIdMiningObservers200Ok>)));
        }

        /// <summary>
        /// Observed corporation mining Paginated record of all mining seen by an observer  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="observerId">A mining observer id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationCorporationIdMiningObserversObserverId200Ok&gt;</returns>
        public List<GetCorporationCorporationIdMiningObserversObserverId200Ok> GetCorporationCorporationIdMiningObserversObserverId (int? corporationId, long? observerId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationCorporationIdMiningObserversObserverId200Ok>> localVarResponse = GetCorporationCorporationIdMiningObserversObserverIdWithHttpInfo(corporationId, observerId, datasource, page, token, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Observed corporation mining Paginated record of all mining seen by an observer  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="observerId">A mining observer id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationCorporationIdMiningObserversObserverId200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationCorporationIdMiningObserversObserverId200Ok> > GetCorporationCorporationIdMiningObserversObserverIdWithHttpInfo (int? corporationId, long? observerId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling IndustryApi->GetCorporationCorporationIdMiningObserversObserverId");
            // verify the required parameter 'observerId' is set
            if (observerId == null)
                throw new ApiException(400, "Missing required parameter 'observerId' when calling IndustryApi->GetCorporationCorporationIdMiningObserversObserverId");

            var localVarPath = "/v1/corporation/{corporation_id}/mining/observers/{observer_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (observerId != null) localVarPathParams.Add("observer_id", this.Configuration.ApiClient.ParameterToString(observerId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationCorporationIdMiningObserversObserverId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationCorporationIdMiningObserversObserverId200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationCorporationIdMiningObserversObserverId200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationCorporationIdMiningObserversObserverId200Ok>)));
        }

        /// <summary>
        /// Observed corporation mining Paginated record of all mining seen by an observer  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="observerId">A mining observer id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationCorporationIdMiningObserversObserverId200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationCorporationIdMiningObserversObserverId200Ok>> GetCorporationCorporationIdMiningObserversObserverIdAsync (int? corporationId, long? observerId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationCorporationIdMiningObserversObserverId200Ok>> localVarResponse = await GetCorporationCorporationIdMiningObserversObserverIdAsyncWithHttpInfo(corporationId, observerId, datasource, page, token, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Observed corporation mining Paginated record of all mining seen by an observer  - --  This route is cached for up to 3600 seconds  - -- Requires one of the following EVE corporation role(s): Accountant
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="observerId">A mining observer id</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationCorporationIdMiningObserversObserverId200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationCorporationIdMiningObserversObserverId200Ok>>> GetCorporationCorporationIdMiningObserversObserverIdAsyncWithHttpInfo (int? corporationId, long? observerId, string datasource = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling IndustryApi->GetCorporationCorporationIdMiningObserversObserverId");
            // verify the required parameter 'observerId' is set
            if (observerId == null)
                throw new ApiException(400, "Missing required parameter 'observerId' when calling IndustryApi->GetCorporationCorporationIdMiningObserversObserverId");

            var localVarPath = "/v1/corporation/{corporation_id}/mining/observers/{observer_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (observerId != null) localVarPathParams.Add("observer_id", this.Configuration.ApiClient.ParameterToString(observerId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationCorporationIdMiningObserversObserverId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationCorporationIdMiningObserversObserverId200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationCorporationIdMiningObserversObserverId200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationCorporationIdMiningObserversObserverId200Ok>)));
        }

        /// <summary>
        /// List corporation industry jobs List industry jobs run by a corporation  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): FactoryManager
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed industry jobs as well (optional, default to false)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdIndustryJobs200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdIndustryJobs200Ok> GetCorporationsCorporationIdIndustryJobs (int? corporationId, string datasource = null, bool? includeCompleted = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdIndustryJobs200Ok>> localVarResponse = GetCorporationsCorporationIdIndustryJobsWithHttpInfo(corporationId, datasource, includeCompleted, page, token, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List corporation industry jobs List industry jobs run by a corporation  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): FactoryManager
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed industry jobs as well (optional, default to false)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdIndustryJobs200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdIndustryJobs200Ok> > GetCorporationsCorporationIdIndustryJobsWithHttpInfo (int? corporationId, string datasource = null, bool? includeCompleted = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling IndustryApi->GetCorporationsCorporationIdIndustryJobs");

            var localVarPath = "/v1/corporations/{corporation_id}/industry/jobs/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (includeCompleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_completed", includeCompleted)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdIndustryJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdIndustryJobs200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdIndustryJobs200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdIndustryJobs200Ok>)));
        }

        /// <summary>
        /// List corporation industry jobs List industry jobs run by a corporation  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): FactoryManager
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed industry jobs as well (optional, default to false)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdIndustryJobs200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdIndustryJobs200Ok>> GetCorporationsCorporationIdIndustryJobsAsync (int? corporationId, string datasource = null, bool? includeCompleted = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdIndustryJobs200Ok>> localVarResponse = await GetCorporationsCorporationIdIndustryJobsAsyncWithHttpInfo(corporationId, datasource, includeCompleted, page, token, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List corporation industry jobs List industry jobs run by a corporation  - --  This route is cached for up to 300 seconds  - -- Requires one of the following EVE corporation role(s): FactoryManager
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="includeCompleted">Whether retrieve completed industry jobs as well (optional, default to false)</param>
        /// <param name="page">Which page of results to return (optional, default to 1)</param>
        /// <param name="token">Access token to use if unable to set a header (optional)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdIndustryJobs200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdIndustryJobs200Ok>>> GetCorporationsCorporationIdIndustryJobsAsyncWithHttpInfo (int? corporationId, string datasource = null, bool? includeCompleted = null, int? page = null, string token = null, string userAgent = null, string xUserAgent = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling IndustryApi->GetCorporationsCorporationIdIndustryJobs");

            var localVarPath = "/v1/corporations/{corporation_id}/industry/jobs/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (corporationId != null) localVarPathParams.Add("corporation_id", this.Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (includeCompleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_completed", includeCompleted)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdIndustryJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdIndustryJobs200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdIndustryJobs200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdIndustryJobs200Ok>)));
        }

        /// <summary>
        /// List industry facilities Return a list of industry facilities  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetIndustryFacilities200Ok&gt;</returns>
        public List<GetIndustryFacilities200Ok> GetIndustryFacilities (string datasource = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetIndustryFacilities200Ok>> localVarResponse = GetIndustryFacilitiesWithHttpInfo(datasource, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List industry facilities Return a list of industry facilities  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetIndustryFacilities200Ok&gt;</returns>
        public ApiResponse< List<GetIndustryFacilities200Ok> > GetIndustryFacilitiesWithHttpInfo (string datasource = null, string userAgent = null, string xUserAgent = null)
        {

            var localVarPath = "/v1/industry/facilities/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIndustryFacilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetIndustryFacilities200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetIndustryFacilities200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetIndustryFacilities200Ok>)));
        }

        /// <summary>
        /// List industry facilities Return a list of industry facilities  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetIndustryFacilities200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetIndustryFacilities200Ok>> GetIndustryFacilitiesAsync (string datasource = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetIndustryFacilities200Ok>> localVarResponse = await GetIndustryFacilitiesAsyncWithHttpInfo(datasource, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List industry facilities Return a list of industry facilities  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetIndustryFacilities200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetIndustryFacilities200Ok>>> GetIndustryFacilitiesAsyncWithHttpInfo (string datasource = null, string userAgent = null, string xUserAgent = null)
        {

            var localVarPath = "/v1/industry/facilities/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIndustryFacilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetIndustryFacilities200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetIndustryFacilities200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetIndustryFacilities200Ok>)));
        }

        /// <summary>
        /// List solar system cost indices Return cost indices for solar systems  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>List&lt;GetIndustrySystems200Ok&gt;</returns>
        public List<GetIndustrySystems200Ok> GetIndustrySystems (string datasource = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetIndustrySystems200Ok>> localVarResponse = GetIndustrySystemsWithHttpInfo(datasource, userAgent, xUserAgent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List solar system cost indices Return cost indices for solar systems  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>ApiResponse of List&lt;GetIndustrySystems200Ok&gt;</returns>
        public ApiResponse< List<GetIndustrySystems200Ok> > GetIndustrySystemsWithHttpInfo (string datasource = null, string userAgent = null, string xUserAgent = null)
        {

            var localVarPath = "/v1/industry/systems/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIndustrySystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetIndustrySystems200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetIndustrySystems200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetIndustrySystems200Ok>)));
        }

        /// <summary>
        /// List solar system cost indices Return cost indices for solar systems  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of List&lt;GetIndustrySystems200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetIndustrySystems200Ok>> GetIndustrySystemsAsync (string datasource = null, string userAgent = null, string xUserAgent = null)
        {
             ApiResponse<List<GetIndustrySystems200Ok>> localVarResponse = await GetIndustrySystemsAsyncWithHttpInfo(datasource, userAgent, xUserAgent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List solar system cost indices Return cost indices for solar systems  - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <param name="userAgent">Client identifier, takes precedence over headers (optional)</param>
        /// <param name="xUserAgent">Client identifier, takes precedence over User-Agent (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetIndustrySystems200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetIndustrySystems200Ok>>> GetIndustrySystemsAsyncWithHttpInfo (string datasource = null, string userAgent = null, string xUserAgent = null)
        {

            var localVarPath = "/v1/industry/systems/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datasource", datasource)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (xUserAgent != null) localVarHeaderParams.Add("X-User-Agent", this.Configuration.ApiClient.ParameterToString(xUserAgent)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIndustrySystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetIndustrySystems200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetIndustrySystems200Ok>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetIndustrySystems200Ok>)));
        }

    }
}
