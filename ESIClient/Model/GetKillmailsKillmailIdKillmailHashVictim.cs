/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ESIClient.Client.SwaggerDateConverter;

namespace ESIClient.Model
{
    /// <summary>
    /// victim object
    /// </summary>
    [DataContract]
    public partial class GetKillmailsKillmailIdKillmailHashVictim :  IEquatable<GetKillmailsKillmailIdKillmailHashVictim>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetKillmailsKillmailIdKillmailHashVictim" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetKillmailsKillmailIdKillmailHashVictim() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetKillmailsKillmailIdKillmailHashVictim" /> class.
        /// </summary>
        /// <param name="characterId">character_id integer.</param>
        /// <param name="corporationId">corporation_id integer.</param>
        /// <param name="allianceId">alliance_id integer.</param>
        /// <param name="factionId">faction_id integer.</param>
        /// <param name="damageTaken">How much total damage was taken by the victim  (required).</param>
        /// <param name="shipTypeId">The ship that the victim was piloting and was destroyed  (required).</param>
        /// <param name="items">items array.</param>
        /// <param name="position">position.</param>
        public GetKillmailsKillmailIdKillmailHashVictim(int? characterId = default(int?), int? corporationId = default(int?), int? allianceId = default(int?), int? factionId = default(int?), int? damageTaken = default(int?), int? shipTypeId = default(int?), List<GetKillmailsKillmailIdKillmailHashItem1> items = default(List<GetKillmailsKillmailIdKillmailHashItem1>), GetKillmailsKillmailIdKillmailHashPosition position = default(GetKillmailsKillmailIdKillmailHashPosition))
        {
            // to ensure "damageTaken" is required (not null)
            if (damageTaken == null)
            {
                throw new InvalidDataException("damageTaken is a required property for GetKillmailsKillmailIdKillmailHashVictim and cannot be null");
            }
            else
            {
                this.DamageTaken = damageTaken;
            }
            // to ensure "shipTypeId" is required (not null)
            if (shipTypeId == null)
            {
                throw new InvalidDataException("shipTypeId is a required property for GetKillmailsKillmailIdKillmailHashVictim and cannot be null");
            }
            else
            {
                this.ShipTypeId = shipTypeId;
            }
            this.CharacterId = characterId;
            this.CorporationId = corporationId;
            this.AllianceId = allianceId;
            this.FactionId = factionId;
            this.Items = items;
            this.Position = position;
        }
        
        /// <summary>
        /// character_id integer
        /// </summary>
        /// <value>character_id integer</value>
        [DataMember(Name="character_id", EmitDefaultValue=false)]
        public int? CharacterId { get; set; }

        /// <summary>
        /// corporation_id integer
        /// </summary>
        /// <value>corporation_id integer</value>
        [DataMember(Name="corporation_id", EmitDefaultValue=false)]
        public int? CorporationId { get; set; }

        /// <summary>
        /// alliance_id integer
        /// </summary>
        /// <value>alliance_id integer</value>
        [DataMember(Name="alliance_id", EmitDefaultValue=false)]
        public int? AllianceId { get; set; }

        /// <summary>
        /// faction_id integer
        /// </summary>
        /// <value>faction_id integer</value>
        [DataMember(Name="faction_id", EmitDefaultValue=false)]
        public int? FactionId { get; set; }

        /// <summary>
        /// How much total damage was taken by the victim 
        /// </summary>
        /// <value>How much total damage was taken by the victim </value>
        [DataMember(Name="damage_taken", EmitDefaultValue=false)]
        public int? DamageTaken { get; set; }

        /// <summary>
        /// The ship that the victim was piloting and was destroyed 
        /// </summary>
        /// <value>The ship that the victim was piloting and was destroyed </value>
        [DataMember(Name="ship_type_id", EmitDefaultValue=false)]
        public int? ShipTypeId { get; set; }

        /// <summary>
        /// items array
        /// </summary>
        /// <value>items array</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<GetKillmailsKillmailIdKillmailHashItem1> Items { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public GetKillmailsKillmailIdKillmailHashPosition Position { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetKillmailsKillmailIdKillmailHashVictim {\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  CorporationId: ").Append(CorporationId).Append("\n");
            sb.Append("  AllianceId: ").Append(AllianceId).Append("\n");
            sb.Append("  FactionId: ").Append(FactionId).Append("\n");
            sb.Append("  DamageTaken: ").Append(DamageTaken).Append("\n");
            sb.Append("  ShipTypeId: ").Append(ShipTypeId).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetKillmailsKillmailIdKillmailHashVictim);
        }

        /// <summary>
        /// Returns true if GetKillmailsKillmailIdKillmailHashVictim instances are equal
        /// </summary>
        /// <param name="input">Instance of GetKillmailsKillmailIdKillmailHashVictim to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetKillmailsKillmailIdKillmailHashVictim input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CharacterId == input.CharacterId ||
                    (this.CharacterId != null &&
                    this.CharacterId.Equals(input.CharacterId))
                ) && 
                (
                    this.CorporationId == input.CorporationId ||
                    (this.CorporationId != null &&
                    this.CorporationId.Equals(input.CorporationId))
                ) && 
                (
                    this.AllianceId == input.AllianceId ||
                    (this.AllianceId != null &&
                    this.AllianceId.Equals(input.AllianceId))
                ) && 
                (
                    this.FactionId == input.FactionId ||
                    (this.FactionId != null &&
                    this.FactionId.Equals(input.FactionId))
                ) && 
                (
                    this.DamageTaken == input.DamageTaken ||
                    (this.DamageTaken != null &&
                    this.DamageTaken.Equals(input.DamageTaken))
                ) && 
                (
                    this.ShipTypeId == input.ShipTypeId ||
                    (this.ShipTypeId != null &&
                    this.ShipTypeId.Equals(input.ShipTypeId))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CharacterId != null)
                    hashCode = hashCode * 59 + this.CharacterId.GetHashCode();
                if (this.CorporationId != null)
                    hashCode = hashCode * 59 + this.CorporationId.GetHashCode();
                if (this.AllianceId != null)
                    hashCode = hashCode * 59 + this.AllianceId.GetHashCode();
                if (this.FactionId != null)
                    hashCode = hashCode * 59 + this.FactionId.GetHashCode();
                if (this.DamageTaken != null)
                    hashCode = hashCode * 59 + this.DamageTaken.GetHashCode();
                if (this.ShipTypeId != null)
                    hashCode = hashCode * 59 + this.ShipTypeId.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
