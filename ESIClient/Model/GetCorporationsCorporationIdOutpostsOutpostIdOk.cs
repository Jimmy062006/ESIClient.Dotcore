/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ESIClient.Client.SwaggerDateConverter;

namespace ESIClient.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationsCorporationIdOutpostsOutpostIdOk :  IEquatable<GetCorporationsCorporationIdOutpostsOutpostIdOk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdOutpostsOutpostIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationsCorporationIdOutpostsOutpostIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdOutpostsOutpostIdOk" /> class.
        /// </summary>
        /// <param name="ownerId">The entity that owns the station (e.g. the entity whose logo is on the station services bar) (required).</param>
        /// <param name="systemId">The ID of the solar system the outpost rests in (required).</param>
        /// <param name="dockingCostPerShipVolume">docking_cost_per_ship_volume number (required).</param>
        /// <param name="officeRentalCost">office_rental_cost integer (required).</param>
        /// <param name="typeId">The type ID of the given outpost (required).</param>
        /// <param name="reprocessingEfficiency">reprocessing_efficiency number (required).</param>
        /// <param name="reprocessingStationTake">reprocessing_station_take number (required).</param>
        /// <param name="standingOwnerId">The owner ID that sets the ability for someone to dock based on standings. (required).</param>
        /// <param name="coordinates">coordinates (required).</param>
        /// <param name="services">A list of services the given outpost provides (required).</param>
        public GetCorporationsCorporationIdOutpostsOutpostIdOk(int? ownerId = default(int?), int? systemId = default(int?), float? dockingCostPerShipVolume = default(float?), long? officeRentalCost = default(long?), int? typeId = default(int?), float? reprocessingEfficiency = default(float?), float? reprocessingStationTake = default(float?), int? standingOwnerId = default(int?), GetCorporationsCorporationIdOutpostsOutpostIdCoordinates coordinates = default(GetCorporationsCorporationIdOutpostsOutpostIdCoordinates), List<GetCorporationsCorporationIdOutpostsOutpostIdService> services = default(List<GetCorporationsCorporationIdOutpostsOutpostIdService>))
        {
            // to ensure "ownerId" is required (not null)
            if (ownerId == null)
            {
                throw new InvalidDataException("ownerId is a required property for GetCorporationsCorporationIdOutpostsOutpostIdOk and cannot be null");
            }
            else
            {
                this.OwnerId = ownerId;
            }
            // to ensure "systemId" is required (not null)
            if (systemId == null)
            {
                throw new InvalidDataException("systemId is a required property for GetCorporationsCorporationIdOutpostsOutpostIdOk and cannot be null");
            }
            else
            {
                this.SystemId = systemId;
            }
            // to ensure "dockingCostPerShipVolume" is required (not null)
            if (dockingCostPerShipVolume == null)
            {
                throw new InvalidDataException("dockingCostPerShipVolume is a required property for GetCorporationsCorporationIdOutpostsOutpostIdOk and cannot be null");
            }
            else
            {
                this.DockingCostPerShipVolume = dockingCostPerShipVolume;
            }
            // to ensure "officeRentalCost" is required (not null)
            if (officeRentalCost == null)
            {
                throw new InvalidDataException("officeRentalCost is a required property for GetCorporationsCorporationIdOutpostsOutpostIdOk and cannot be null");
            }
            else
            {
                this.OfficeRentalCost = officeRentalCost;
            }
            // to ensure "typeId" is required (not null)
            if (typeId == null)
            {
                throw new InvalidDataException("typeId is a required property for GetCorporationsCorporationIdOutpostsOutpostIdOk and cannot be null");
            }
            else
            {
                this.TypeId = typeId;
            }
            // to ensure "reprocessingEfficiency" is required (not null)
            if (reprocessingEfficiency == null)
            {
                throw new InvalidDataException("reprocessingEfficiency is a required property for GetCorporationsCorporationIdOutpostsOutpostIdOk and cannot be null");
            }
            else
            {
                this.ReprocessingEfficiency = reprocessingEfficiency;
            }
            // to ensure "reprocessingStationTake" is required (not null)
            if (reprocessingStationTake == null)
            {
                throw new InvalidDataException("reprocessingStationTake is a required property for GetCorporationsCorporationIdOutpostsOutpostIdOk and cannot be null");
            }
            else
            {
                this.ReprocessingStationTake = reprocessingStationTake;
            }
            // to ensure "standingOwnerId" is required (not null)
            if (standingOwnerId == null)
            {
                throw new InvalidDataException("standingOwnerId is a required property for GetCorporationsCorporationIdOutpostsOutpostIdOk and cannot be null");
            }
            else
            {
                this.StandingOwnerId = standingOwnerId;
            }
            // to ensure "coordinates" is required (not null)
            if (coordinates == null)
            {
                throw new InvalidDataException("coordinates is a required property for GetCorporationsCorporationIdOutpostsOutpostIdOk and cannot be null");
            }
            else
            {
                this.Coordinates = coordinates;
            }
            // to ensure "services" is required (not null)
            if (services == null)
            {
                throw new InvalidDataException("services is a required property for GetCorporationsCorporationIdOutpostsOutpostIdOk and cannot be null");
            }
            else
            {
                this.Services = services;
            }
        }
        
        /// <summary>
        /// The entity that owns the station (e.g. the entity whose logo is on the station services bar)
        /// </summary>
        /// <value>The entity that owns the station (e.g. the entity whose logo is on the station services bar)</value>
        [DataMember(Name="owner_id", EmitDefaultValue=false)]
        public int? OwnerId { get; set; }

        /// <summary>
        /// The ID of the solar system the outpost rests in
        /// </summary>
        /// <value>The ID of the solar system the outpost rests in</value>
        [DataMember(Name="system_id", EmitDefaultValue=false)]
        public int? SystemId { get; set; }

        /// <summary>
        /// docking_cost_per_ship_volume number
        /// </summary>
        /// <value>docking_cost_per_ship_volume number</value>
        [DataMember(Name="docking_cost_per_ship_volume", EmitDefaultValue=false)]
        public float? DockingCostPerShipVolume { get; set; }

        /// <summary>
        /// office_rental_cost integer
        /// </summary>
        /// <value>office_rental_cost integer</value>
        [DataMember(Name="office_rental_cost", EmitDefaultValue=false)]
        public long? OfficeRentalCost { get; set; }

        /// <summary>
        /// The type ID of the given outpost
        /// </summary>
        /// <value>The type ID of the given outpost</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// reprocessing_efficiency number
        /// </summary>
        /// <value>reprocessing_efficiency number</value>
        [DataMember(Name="reprocessing_efficiency", EmitDefaultValue=false)]
        public float? ReprocessingEfficiency { get; set; }

        /// <summary>
        /// reprocessing_station_take number
        /// </summary>
        /// <value>reprocessing_station_take number</value>
        [DataMember(Name="reprocessing_station_take", EmitDefaultValue=false)]
        public float? ReprocessingStationTake { get; set; }

        /// <summary>
        /// The owner ID that sets the ability for someone to dock based on standings.
        /// </summary>
        /// <value>The owner ID that sets the ability for someone to dock based on standings.</value>
        [DataMember(Name="standing_owner_id", EmitDefaultValue=false)]
        public int? StandingOwnerId { get; set; }

        /// <summary>
        /// Gets or Sets Coordinates
        /// </summary>
        [DataMember(Name="coordinates", EmitDefaultValue=false)]
        public GetCorporationsCorporationIdOutpostsOutpostIdCoordinates Coordinates { get; set; }

        /// <summary>
        /// A list of services the given outpost provides
        /// </summary>
        /// <value>A list of services the given outpost provides</value>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<GetCorporationsCorporationIdOutpostsOutpostIdService> Services { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationsCorporationIdOutpostsOutpostIdOk {\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  DockingCostPerShipVolume: ").Append(DockingCostPerShipVolume).Append("\n");
            sb.Append("  OfficeRentalCost: ").Append(OfficeRentalCost).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  ReprocessingEfficiency: ").Append(ReprocessingEfficiency).Append("\n");
            sb.Append("  ReprocessingStationTake: ").Append(ReprocessingStationTake).Append("\n");
            sb.Append("  StandingOwnerId: ").Append(StandingOwnerId).Append("\n");
            sb.Append("  Coordinates: ").Append(Coordinates).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationsCorporationIdOutpostsOutpostIdOk);
        }

        /// <summary>
        /// Returns true if GetCorporationsCorporationIdOutpostsOutpostIdOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationsCorporationIdOutpostsOutpostIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationsCorporationIdOutpostsOutpostIdOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.DockingCostPerShipVolume == input.DockingCostPerShipVolume ||
                    (this.DockingCostPerShipVolume != null &&
                    this.DockingCostPerShipVolume.Equals(input.DockingCostPerShipVolume))
                ) && 
                (
                    this.OfficeRentalCost == input.OfficeRentalCost ||
                    (this.OfficeRentalCost != null &&
                    this.OfficeRentalCost.Equals(input.OfficeRentalCost))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.ReprocessingEfficiency == input.ReprocessingEfficiency ||
                    (this.ReprocessingEfficiency != null &&
                    this.ReprocessingEfficiency.Equals(input.ReprocessingEfficiency))
                ) && 
                (
                    this.ReprocessingStationTake == input.ReprocessingStationTake ||
                    (this.ReprocessingStationTake != null &&
                    this.ReprocessingStationTake.Equals(input.ReprocessingStationTake))
                ) && 
                (
                    this.StandingOwnerId == input.StandingOwnerId ||
                    (this.StandingOwnerId != null &&
                    this.StandingOwnerId.Equals(input.StandingOwnerId))
                ) && 
                (
                    this.Coordinates == input.Coordinates ||
                    (this.Coordinates != null &&
                    this.Coordinates.Equals(input.Coordinates))
                ) && 
                (
                    this.Services == input.Services ||
                    this.Services != null &&
                    this.Services.SequenceEqual(input.Services)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.DockingCostPerShipVolume != null)
                    hashCode = hashCode * 59 + this.DockingCostPerShipVolume.GetHashCode();
                if (this.OfficeRentalCost != null)
                    hashCode = hashCode * 59 + this.OfficeRentalCost.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                if (this.ReprocessingEfficiency != null)
                    hashCode = hashCode * 59 + this.ReprocessingEfficiency.GetHashCode();
                if (this.ReprocessingStationTake != null)
                    hashCode = hashCode * 59 + this.ReprocessingStationTake.GetHashCode();
                if (this.StandingOwnerId != null)
                    hashCode = hashCode * 59 + this.StandingOwnerId.GetHashCode();
                if (this.Coordinates != null)
                    hashCode = hashCode * 59 + this.Coordinates.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
