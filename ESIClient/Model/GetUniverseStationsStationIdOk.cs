/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ESIClient.Client.SwaggerDateConverter;

namespace ESIClient.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetUniverseStationsStationIdOk :  IEquatable<GetUniverseStationsStationIdOk>, IValidatableObject
    {
        /// <summary>
        /// service string
        /// </summary>
        /// <value>service string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServicesEnum
        {
            
            /// <summary>
            /// Enum BountyMissions for value: bounty-missions
            /// </summary>
            [EnumMember(Value = "bounty-missions")]
            BountyMissions = 1,
            
            /// <summary>
            /// Enum AssasinationMissions for value: assasination-missions
            /// </summary>
            [EnumMember(Value = "assasination-missions")]
            AssasinationMissions = 2,
            
            /// <summary>
            /// Enum CourierMissions for value: courier-missions
            /// </summary>
            [EnumMember(Value = "courier-missions")]
            CourierMissions = 3,
            
            /// <summary>
            /// Enum Interbus for value: interbus
            /// </summary>
            [EnumMember(Value = "interbus")]
            Interbus = 4,
            
            /// <summary>
            /// Enum ReprocessingPlant for value: reprocessing-plant
            /// </summary>
            [EnumMember(Value = "reprocessing-plant")]
            ReprocessingPlant = 5,
            
            /// <summary>
            /// Enum Refinery for value: refinery
            /// </summary>
            [EnumMember(Value = "refinery")]
            Refinery = 6,
            
            /// <summary>
            /// Enum Market for value: market
            /// </summary>
            [EnumMember(Value = "market")]
            Market = 7,
            
            /// <summary>
            /// Enum BlackMarket for value: black-market
            /// </summary>
            [EnumMember(Value = "black-market")]
            BlackMarket = 8,
            
            /// <summary>
            /// Enum StockExchange for value: stock-exchange
            /// </summary>
            [EnumMember(Value = "stock-exchange")]
            StockExchange = 9,
            
            /// <summary>
            /// Enum Cloning for value: cloning
            /// </summary>
            [EnumMember(Value = "cloning")]
            Cloning = 10,
            
            /// <summary>
            /// Enum Surgery for value: surgery
            /// </summary>
            [EnumMember(Value = "surgery")]
            Surgery = 11,
            
            /// <summary>
            /// Enum DnaTherapy for value: dna-therapy
            /// </summary>
            [EnumMember(Value = "dna-therapy")]
            DnaTherapy = 12,
            
            /// <summary>
            /// Enum RepairFacilities for value: repair-facilities
            /// </summary>
            [EnumMember(Value = "repair-facilities")]
            RepairFacilities = 13,
            
            /// <summary>
            /// Enum Factory for value: factory
            /// </summary>
            [EnumMember(Value = "factory")]
            Factory = 14,
            
            /// <summary>
            /// Enum Labratory for value: labratory
            /// </summary>
            [EnumMember(Value = "labratory")]
            Labratory = 15,
            
            /// <summary>
            /// Enum Gambling for value: gambling
            /// </summary>
            [EnumMember(Value = "gambling")]
            Gambling = 16,
            
            /// <summary>
            /// Enum Fitting for value: fitting
            /// </summary>
            [EnumMember(Value = "fitting")]
            Fitting = 17,
            
            /// <summary>
            /// Enum Paintshop for value: paintshop
            /// </summary>
            [EnumMember(Value = "paintshop")]
            Paintshop = 18,
            
            /// <summary>
            /// Enum News for value: news
            /// </summary>
            [EnumMember(Value = "news")]
            News = 19,
            
            /// <summary>
            /// Enum Storage for value: storage
            /// </summary>
            [EnumMember(Value = "storage")]
            Storage = 20,
            
            /// <summary>
            /// Enum Insurance for value: insurance
            /// </summary>
            [EnumMember(Value = "insurance")]
            Insurance = 21,
            
            /// <summary>
            /// Enum Docking for value: docking
            /// </summary>
            [EnumMember(Value = "docking")]
            Docking = 22,
            
            /// <summary>
            /// Enum OfficeRental for value: office-rental
            /// </summary>
            [EnumMember(Value = "office-rental")]
            OfficeRental = 23,
            
            /// <summary>
            /// Enum JumpCloneFacility for value: jump-clone-facility
            /// </summary>
            [EnumMember(Value = "jump-clone-facility")]
            JumpCloneFacility = 24,
            
            /// <summary>
            /// Enum LoyaltyPointStore for value: loyalty-point-store
            /// </summary>
            [EnumMember(Value = "loyalty-point-store")]
            LoyaltyPointStore = 25,
            
            /// <summary>
            /// Enum NavyOffices for value: navy-offices
            /// </summary>
            [EnumMember(Value = "navy-offices")]
            NavyOffices = 26,
            
            /// <summary>
            /// Enum SecurityOffices for value: security-offices
            /// </summary>
            [EnumMember(Value = "security-offices")]
            SecurityOffices = 27
        }


        /// <summary>
        /// services array
        /// </summary>
        /// <value>services array</value>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<ServicesEnum> Services { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseStationsStationIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetUniverseStationsStationIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseStationsStationIdOk" /> class.
        /// </summary>
        /// <param name="stationId">station_id integer (required).</param>
        /// <param name="name">name string (required).</param>
        /// <param name="owner">ID of the corporation that controls this station.</param>
        /// <param name="typeId">type_id integer (required).</param>
        /// <param name="raceId">race_id integer.</param>
        /// <param name="position">position (required).</param>
        /// <param name="systemId">The solar system this station is in (required).</param>
        /// <param name="reprocessingEfficiency">reprocessing_efficiency number (required).</param>
        /// <param name="reprocessingStationsTake">reprocessing_stations_take number (required).</param>
        /// <param name="maxDockableShipVolume">max_dockable_ship_volume number (required).</param>
        /// <param name="officeRentalCost">office_rental_cost number (required).</param>
        /// <param name="services">services array (required).</param>
        public GetUniverseStationsStationIdOk(int? stationId = default(int?), string name = default(string), int? owner = default(int?), int? typeId = default(int?), int? raceId = default(int?), GetUniverseStationsStationIdPosition position = default(GetUniverseStationsStationIdPosition), int? systemId = default(int?), float? reprocessingEfficiency = default(float?), float? reprocessingStationsTake = default(float?), float? maxDockableShipVolume = default(float?), float? officeRentalCost = default(float?), List<ServicesEnum> services = default(List<ServicesEnum>))
        {
            // to ensure "stationId" is required (not null)
            if (stationId == null)
            {
                throw new InvalidDataException("stationId is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.StationId = stationId;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "typeId" is required (not null)
            if (typeId == null)
            {
                throw new InvalidDataException("typeId is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.TypeId = typeId;
            }
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new InvalidDataException("position is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.Position = position;
            }
            // to ensure "systemId" is required (not null)
            if (systemId == null)
            {
                throw new InvalidDataException("systemId is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.SystemId = systemId;
            }
            // to ensure "reprocessingEfficiency" is required (not null)
            if (reprocessingEfficiency == null)
            {
                throw new InvalidDataException("reprocessingEfficiency is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.ReprocessingEfficiency = reprocessingEfficiency;
            }
            // to ensure "reprocessingStationsTake" is required (not null)
            if (reprocessingStationsTake == null)
            {
                throw new InvalidDataException("reprocessingStationsTake is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.ReprocessingStationsTake = reprocessingStationsTake;
            }
            // to ensure "maxDockableShipVolume" is required (not null)
            if (maxDockableShipVolume == null)
            {
                throw new InvalidDataException("maxDockableShipVolume is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.MaxDockableShipVolume = maxDockableShipVolume;
            }
            // to ensure "officeRentalCost" is required (not null)
            if (officeRentalCost == null)
            {
                throw new InvalidDataException("officeRentalCost is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.OfficeRentalCost = officeRentalCost;
            }
            // to ensure "services" is required (not null)
            if (services == null)
            {
                throw new InvalidDataException("services is a required property for GetUniverseStationsStationIdOk and cannot be null");
            }
            else
            {
                this.Services = services;
            }
            this.Owner = owner;
            this.RaceId = raceId;
        }
        
        /// <summary>
        /// station_id integer
        /// </summary>
        /// <value>station_id integer</value>
        [DataMember(Name="station_id", EmitDefaultValue=false)]
        public int? StationId { get; set; }

        /// <summary>
        /// name string
        /// </summary>
        /// <value>name string</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// ID of the corporation that controls this station
        /// </summary>
        /// <value>ID of the corporation that controls this station</value>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public int? Owner { get; set; }

        /// <summary>
        /// type_id integer
        /// </summary>
        /// <value>type_id integer</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// race_id integer
        /// </summary>
        /// <value>race_id integer</value>
        [DataMember(Name="race_id", EmitDefaultValue=false)]
        public int? RaceId { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public GetUniverseStationsStationIdPosition Position { get; set; }

        /// <summary>
        /// The solar system this station is in
        /// </summary>
        /// <value>The solar system this station is in</value>
        [DataMember(Name="system_id", EmitDefaultValue=false)]
        public int? SystemId { get; set; }

        /// <summary>
        /// reprocessing_efficiency number
        /// </summary>
        /// <value>reprocessing_efficiency number</value>
        [DataMember(Name="reprocessing_efficiency", EmitDefaultValue=false)]
        public float? ReprocessingEfficiency { get; set; }

        /// <summary>
        /// reprocessing_stations_take number
        /// </summary>
        /// <value>reprocessing_stations_take number</value>
        [DataMember(Name="reprocessing_stations_take", EmitDefaultValue=false)]
        public float? ReprocessingStationsTake { get; set; }

        /// <summary>
        /// max_dockable_ship_volume number
        /// </summary>
        /// <value>max_dockable_ship_volume number</value>
        [DataMember(Name="max_dockable_ship_volume", EmitDefaultValue=false)]
        public float? MaxDockableShipVolume { get; set; }

        /// <summary>
        /// office_rental_cost number
        /// </summary>
        /// <value>office_rental_cost number</value>
        [DataMember(Name="office_rental_cost", EmitDefaultValue=false)]
        public float? OfficeRentalCost { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUniverseStationsStationIdOk {\n");
            sb.Append("  StationId: ").Append(StationId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  RaceId: ").Append(RaceId).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  ReprocessingEfficiency: ").Append(ReprocessingEfficiency).Append("\n");
            sb.Append("  ReprocessingStationsTake: ").Append(ReprocessingStationsTake).Append("\n");
            sb.Append("  MaxDockableShipVolume: ").Append(MaxDockableShipVolume).Append("\n");
            sb.Append("  OfficeRentalCost: ").Append(OfficeRentalCost).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUniverseStationsStationIdOk);
        }

        /// <summary>
        /// Returns true if GetUniverseStationsStationIdOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUniverseStationsStationIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUniverseStationsStationIdOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StationId == input.StationId ||
                    (this.StationId != null &&
                    this.StationId.Equals(input.StationId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.RaceId == input.RaceId ||
                    (this.RaceId != null &&
                    this.RaceId.Equals(input.RaceId))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                ) && 
                (
                    this.ReprocessingEfficiency == input.ReprocessingEfficiency ||
                    (this.ReprocessingEfficiency != null &&
                    this.ReprocessingEfficiency.Equals(input.ReprocessingEfficiency))
                ) && 
                (
                    this.ReprocessingStationsTake == input.ReprocessingStationsTake ||
                    (this.ReprocessingStationsTake != null &&
                    this.ReprocessingStationsTake.Equals(input.ReprocessingStationsTake))
                ) && 
                (
                    this.MaxDockableShipVolume == input.MaxDockableShipVolume ||
                    (this.MaxDockableShipVolume != null &&
                    this.MaxDockableShipVolume.Equals(input.MaxDockableShipVolume))
                ) && 
                (
                    this.OfficeRentalCost == input.OfficeRentalCost ||
                    (this.OfficeRentalCost != null &&
                    this.OfficeRentalCost.Equals(input.OfficeRentalCost))
                ) && 
                (
                    this.Services == input.Services ||
                    this.Services != null &&
                    this.Services.SequenceEqual(input.Services)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StationId != null)
                    hashCode = hashCode * 59 + this.StationId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                if (this.RaceId != null)
                    hashCode = hashCode * 59 + this.RaceId.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                if (this.ReprocessingEfficiency != null)
                    hashCode = hashCode * 59 + this.ReprocessingEfficiency.GetHashCode();
                if (this.ReprocessingStationsTake != null)
                    hashCode = hashCode * 59 + this.ReprocessingStationsTake.GetHashCode();
                if (this.MaxDockableShipVolume != null)
                    hashCode = hashCode * 59 + this.MaxDockableShipVolume.GetHashCode();
                if (this.OfficeRentalCost != null)
                    hashCode = hashCode * 59 + this.OfficeRentalCost.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
