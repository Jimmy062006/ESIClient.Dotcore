/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ESIClient.Client.SwaggerDateConverter;

namespace ESIClient.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdMailLabelsOk :  IEquatable<GetCharactersCharacterIdMailLabelsOk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdMailLabelsOk" /> class.
        /// </summary>
        /// <param name="totalUnreadCount">total_unread_count integer.</param>
        /// <param name="labels">labels array.</param>
        public GetCharactersCharacterIdMailLabelsOk(int? totalUnreadCount = default(int?), List<GetCharactersCharacterIdMailLabelsLabel> labels = default(List<GetCharactersCharacterIdMailLabelsLabel>))
        {
            this.TotalUnreadCount = totalUnreadCount;
            this.Labels = labels;
        }
        
        /// <summary>
        /// total_unread_count integer
        /// </summary>
        /// <value>total_unread_count integer</value>
        [DataMember(Name="total_unread_count", EmitDefaultValue=false)]
        public int? TotalUnreadCount { get; set; }

        /// <summary>
        /// labels array
        /// </summary>
        /// <value>labels array</value>
        [DataMember(Name="labels", EmitDefaultValue=false)]
        public List<GetCharactersCharacterIdMailLabelsLabel> Labels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdMailLabelsOk {\n");
            sb.Append("  TotalUnreadCount: ").Append(TotalUnreadCount).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdMailLabelsOk);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdMailLabelsOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdMailLabelsOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdMailLabelsOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalUnreadCount == input.TotalUnreadCount ||
                    (this.TotalUnreadCount != null &&
                    this.TotalUnreadCount.Equals(input.TotalUnreadCount))
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalUnreadCount != null)
                    hashCode = hashCode * 59 + this.TotalUnreadCount.GetHashCode();
                if (this.Labels != null)
                    hashCode = hashCode * 59 + this.Labels.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TotalUnreadCount (int?) minimum
            if(this.TotalUnreadCount < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalUnreadCount, must be a value greater than or equal to 0.", new [] { "TotalUnreadCount" });
            }

            yield break;
        }
    }

}
