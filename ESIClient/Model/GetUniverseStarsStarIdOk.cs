/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ESIClient.Client.SwaggerDateConverter;

namespace ESIClient.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetUniverseStarsStarIdOk :  IEquatable<GetUniverseStarsStarIdOk>, IValidatableObject
    {
        /// <summary>
        /// spectral_class string
        /// </summary>
        /// <value>spectral_class string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SpectralClassEnum
        {
            
            /// <summary>
            /// Enum K2V for value: K2 V
            /// </summary>
            [EnumMember(Value = "K2 V")]
            K2V = 1,
            
            /// <summary>
            /// Enum K4V for value: K4 V
            /// </summary>
            [EnumMember(Value = "K4 V")]
            K4V = 2,
            
            /// <summary>
            /// Enum G2V for value: G2 V
            /// </summary>
            [EnumMember(Value = "G2 V")]
            G2V = 3,
            
            /// <summary>
            /// Enum G8V for value: G8 V
            /// </summary>
            [EnumMember(Value = "G8 V")]
            G8V = 4,
            
            /// <summary>
            /// Enum M7V for value: M7 V
            /// </summary>
            [EnumMember(Value = "M7 V")]
            M7V = 5,
            
            /// <summary>
            /// Enum K7V for value: K7 V
            /// </summary>
            [EnumMember(Value = "K7 V")]
            K7V = 6,
            
            /// <summary>
            /// Enum M2V for value: M2 V
            /// </summary>
            [EnumMember(Value = "M2 V")]
            M2V = 7,
            
            /// <summary>
            /// Enum K5V for value: K5 V
            /// </summary>
            [EnumMember(Value = "K5 V")]
            K5V = 8,
            
            /// <summary>
            /// Enum M3V for value: M3 V
            /// </summary>
            [EnumMember(Value = "M3 V")]
            M3V = 9,
            
            /// <summary>
            /// Enum G0V for value: G0 V
            /// </summary>
            [EnumMember(Value = "G0 V")]
            G0V = 10,
            
            /// <summary>
            /// Enum G7V for value: G7 V
            /// </summary>
            [EnumMember(Value = "G7 V")]
            G7V = 11,
            
            /// <summary>
            /// Enum G3V for value: G3 V
            /// </summary>
            [EnumMember(Value = "G3 V")]
            G3V = 12,
            
            /// <summary>
            /// Enum F9V for value: F9 V
            /// </summary>
            [EnumMember(Value = "F9 V")]
            F9V = 13,
            
            /// <summary>
            /// Enum G5V for value: G5 V
            /// </summary>
            [EnumMember(Value = "G5 V")]
            G5V = 14,
            
            /// <summary>
            /// Enum F6V for value: F6 V
            /// </summary>
            [EnumMember(Value = "F6 V")]
            F6V = 15,
            
            /// <summary>
            /// Enum K8V for value: K8 V
            /// </summary>
            [EnumMember(Value = "K8 V")]
            K8V = 16,
            
            /// <summary>
            /// Enum K9V for value: K9 V
            /// </summary>
            [EnumMember(Value = "K9 V")]
            K9V = 17,
            
            /// <summary>
            /// Enum K6V for value: K6 V
            /// </summary>
            [EnumMember(Value = "K6 V")]
            K6V = 18,
            
            /// <summary>
            /// Enum G9V for value: G9 V
            /// </summary>
            [EnumMember(Value = "G9 V")]
            G9V = 19,
            
            /// <summary>
            /// Enum G6V for value: G6 V
            /// </summary>
            [EnumMember(Value = "G6 V")]
            G6V = 20,
            
            /// <summary>
            /// Enum G4VI for value: G4 VI
            /// </summary>
            [EnumMember(Value = "G4 VI")]
            G4VI = 21,
            
            /// <summary>
            /// Enum G4V for value: G4 V
            /// </summary>
            [EnumMember(Value = "G4 V")]
            G4V = 22,
            
            /// <summary>
            /// Enum F8V for value: F8 V
            /// </summary>
            [EnumMember(Value = "F8 V")]
            F8V = 23,
            
            /// <summary>
            /// Enum F2V for value: F2 V
            /// </summary>
            [EnumMember(Value = "F2 V")]
            F2V = 24,
            
            /// <summary>
            /// Enum F1V for value: F1 V
            /// </summary>
            [EnumMember(Value = "F1 V")]
            F1V = 25,
            
            /// <summary>
            /// Enum K3V for value: K3 V
            /// </summary>
            [EnumMember(Value = "K3 V")]
            K3V = 26,
            
            /// <summary>
            /// Enum F0VI for value: F0 VI
            /// </summary>
            [EnumMember(Value = "F0 VI")]
            F0VI = 27,
            
            /// <summary>
            /// Enum G1VI for value: G1 VI
            /// </summary>
            [EnumMember(Value = "G1 VI")]
            G1VI = 28,
            
            /// <summary>
            /// Enum G0VI for value: G0 VI
            /// </summary>
            [EnumMember(Value = "G0 VI")]
            G0VI = 29,
            
            /// <summary>
            /// Enum K1V for value: K1 V
            /// </summary>
            [EnumMember(Value = "K1 V")]
            K1V = 30,
            
            /// <summary>
            /// Enum M4V for value: M4 V
            /// </summary>
            [EnumMember(Value = "M4 V")]
            M4V = 31,
            
            /// <summary>
            /// Enum M1V for value: M1 V
            /// </summary>
            [EnumMember(Value = "M1 V")]
            M1V = 32,
            
            /// <summary>
            /// Enum M6V for value: M6 V
            /// </summary>
            [EnumMember(Value = "M6 V")]
            M6V = 33,
            
            /// <summary>
            /// Enum M0V for value: M0 V
            /// </summary>
            [EnumMember(Value = "M0 V")]
            M0V = 34,
            
            /// <summary>
            /// Enum K2IV for value: K2 IV
            /// </summary>
            [EnumMember(Value = "K2 IV")]
            K2IV = 35,
            
            /// <summary>
            /// Enum G2VI for value: G2 VI
            /// </summary>
            [EnumMember(Value = "G2 VI")]
            G2VI = 36,
            
            /// <summary>
            /// Enum K0V for value: K0 V
            /// </summary>
            [EnumMember(Value = "K0 V")]
            K0V = 37,
            
            /// <summary>
            /// Enum K5IV for value: K5 IV
            /// </summary>
            [EnumMember(Value = "K5 IV")]
            K5IV = 38,
            
            /// <summary>
            /// Enum F5VI for value: F5 VI
            /// </summary>
            [EnumMember(Value = "F5 VI")]
            F5VI = 39,
            
            /// <summary>
            /// Enum G6VI for value: G6 VI
            /// </summary>
            [EnumMember(Value = "G6 VI")]
            G6VI = 40,
            
            /// <summary>
            /// Enum F6VI for value: F6 VI
            /// </summary>
            [EnumMember(Value = "F6 VI")]
            F6VI = 41,
            
            /// <summary>
            /// Enum F2IV for value: F2 IV
            /// </summary>
            [EnumMember(Value = "F2 IV")]
            F2IV = 42,
            
            /// <summary>
            /// Enum G3VI for value: G3 VI
            /// </summary>
            [EnumMember(Value = "G3 VI")]
            G3VI = 43,
            
            /// <summary>
            /// Enum M8V for value: M8 V
            /// </summary>
            [EnumMember(Value = "M8 V")]
            M8V = 44,
            
            /// <summary>
            /// Enum F1VI for value: F1 VI
            /// </summary>
            [EnumMember(Value = "F1 VI")]
            F1VI = 45,
            
            /// <summary>
            /// Enum K1IV for value: K1 IV
            /// </summary>
            [EnumMember(Value = "K1 IV")]
            K1IV = 46,
            
            /// <summary>
            /// Enum F7V for value: F7 V
            /// </summary>
            [EnumMember(Value = "F7 V")]
            F7V = 47,
            
            /// <summary>
            /// Enum G5VI for value: G5 VI
            /// </summary>
            [EnumMember(Value = "G5 VI")]
            G5VI = 48,
            
            /// <summary>
            /// Enum M5V for value: M5 V
            /// </summary>
            [EnumMember(Value = "M5 V")]
            M5V = 49,
            
            /// <summary>
            /// Enum G7VI for value: G7 VI
            /// </summary>
            [EnumMember(Value = "G7 VI")]
            G7VI = 50,
            
            /// <summary>
            /// Enum F5V for value: F5 V
            /// </summary>
            [EnumMember(Value = "F5 V")]
            F5V = 51,
            
            /// <summary>
            /// Enum F4VI for value: F4 VI
            /// </summary>
            [EnumMember(Value = "F4 VI")]
            F4VI = 52,
            
            /// <summary>
            /// Enum F8VI for value: F8 VI
            /// </summary>
            [EnumMember(Value = "F8 VI")]
            F8VI = 53,
            
            /// <summary>
            /// Enum K3IV for value: K3 IV
            /// </summary>
            [EnumMember(Value = "K3 IV")]
            K3IV = 54,
            
            /// <summary>
            /// Enum F4IV for value: F4 IV
            /// </summary>
            [EnumMember(Value = "F4 IV")]
            F4IV = 55,
            
            /// <summary>
            /// Enum F0V for value: F0 V
            /// </summary>
            [EnumMember(Value = "F0 V")]
            F0V = 56,
            
            /// <summary>
            /// Enum G7IV for value: G7 IV
            /// </summary>
            [EnumMember(Value = "G7 IV")]
            G7IV = 57,
            
            /// <summary>
            /// Enum G8VI for value: G8 VI
            /// </summary>
            [EnumMember(Value = "G8 VI")]
            G8VI = 58,
            
            /// <summary>
            /// Enum F2VI for value: F2 VI
            /// </summary>
            [EnumMember(Value = "F2 VI")]
            F2VI = 59,
            
            /// <summary>
            /// Enum F4V for value: F4 V
            /// </summary>
            [EnumMember(Value = "F4 V")]
            F4V = 60,
            
            /// <summary>
            /// Enum F7VI for value: F7 VI
            /// </summary>
            [EnumMember(Value = "F7 VI")]
            F7VI = 61,
            
            /// <summary>
            /// Enum F3V for value: F3 V
            /// </summary>
            [EnumMember(Value = "F3 V")]
            F3V = 62,
            
            /// <summary>
            /// Enum G1V for value: G1 V
            /// </summary>
            [EnumMember(Value = "G1 V")]
            G1V = 63,
            
            /// <summary>
            /// Enum G9VI for value: G9 VI
            /// </summary>
            [EnumMember(Value = "G9 VI")]
            G9VI = 64,
            
            /// <summary>
            /// Enum F3IV for value: F3 IV
            /// </summary>
            [EnumMember(Value = "F3 IV")]
            F3IV = 65,
            
            /// <summary>
            /// Enum F9VI for value: F9 VI
            /// </summary>
            [EnumMember(Value = "F9 VI")]
            F9VI = 66,
            
            /// <summary>
            /// Enum M9V for value: M9 V
            /// </summary>
            [EnumMember(Value = "M9 V")]
            M9V = 67,
            
            /// <summary>
            /// Enum K0IV for value: K0 IV
            /// </summary>
            [EnumMember(Value = "K0 IV")]
            K0IV = 68,
            
            /// <summary>
            /// Enum F1IV for value: F1 IV
            /// </summary>
            [EnumMember(Value = "F1 IV")]
            F1IV = 69,
            
            /// <summary>
            /// Enum G4IV for value: G4 IV
            /// </summary>
            [EnumMember(Value = "G4 IV")]
            G4IV = 70,
            
            /// <summary>
            /// Enum F3VI for value: F3 VI
            /// </summary>
            [EnumMember(Value = "F3 VI")]
            F3VI = 71,
            
            /// <summary>
            /// Enum K4IV for value: K4 IV
            /// </summary>
            [EnumMember(Value = "K4 IV")]
            K4IV = 72,
            
            /// <summary>
            /// Enum G5IV for value: G5 IV
            /// </summary>
            [EnumMember(Value = "G5 IV")]
            G5IV = 73,
            
            /// <summary>
            /// Enum G3IV for value: G3 IV
            /// </summary>
            [EnumMember(Value = "G3 IV")]
            G3IV = 74,
            
            /// <summary>
            /// Enum G1IV for value: G1 IV
            /// </summary>
            [EnumMember(Value = "G1 IV")]
            G1IV = 75,
            
            /// <summary>
            /// Enum K7IV for value: K7 IV
            /// </summary>
            [EnumMember(Value = "K7 IV")]
            K7IV = 76,
            
            /// <summary>
            /// Enum G0IV for value: G0 IV
            /// </summary>
            [EnumMember(Value = "G0 IV")]
            G0IV = 77,
            
            /// <summary>
            /// Enum K6IV for value: K6 IV
            /// </summary>
            [EnumMember(Value = "K6 IV")]
            K6IV = 78,
            
            /// <summary>
            /// Enum K9IV for value: K9 IV
            /// </summary>
            [EnumMember(Value = "K9 IV")]
            K9IV = 79,
            
            /// <summary>
            /// Enum G2IV for value: G2 IV
            /// </summary>
            [EnumMember(Value = "G2 IV")]
            G2IV = 80,
            
            /// <summary>
            /// Enum F9IV for value: F9 IV
            /// </summary>
            [EnumMember(Value = "F9 IV")]
            F9IV = 81,
            
            /// <summary>
            /// Enum F0IV for value: F0 IV
            /// </summary>
            [EnumMember(Value = "F0 IV")]
            F0IV = 82,
            
            /// <summary>
            /// Enum K8IV for value: K8 IV
            /// </summary>
            [EnumMember(Value = "K8 IV")]
            K8IV = 83,
            
            /// <summary>
            /// Enum G8IV for value: G8 IV
            /// </summary>
            [EnumMember(Value = "G8 IV")]
            G8IV = 84,
            
            /// <summary>
            /// Enum F6IV for value: F6 IV
            /// </summary>
            [EnumMember(Value = "F6 IV")]
            F6IV = 85,
            
            /// <summary>
            /// Enum F5IV for value: F5 IV
            /// </summary>
            [EnumMember(Value = "F5 IV")]
            F5IV = 86,
            
            /// <summary>
            /// Enum A0 for value: A0
            /// </summary>
            [EnumMember(Value = "A0")]
            A0 = 87,
            
            /// <summary>
            /// Enum A0IV for value: A0IV
            /// </summary>
            [EnumMember(Value = "A0IV")]
            A0IV = 88,
            
            /// <summary>
            /// Enum A0IV2 for value: A0IV2
            /// </summary>
            [EnumMember(Value = "A0IV2")]
            A0IV2 = 89
        }

        /// <summary>
        /// spectral_class string
        /// </summary>
        /// <value>spectral_class string</value>
        [DataMember(Name="spectral_class", EmitDefaultValue=false)]
        public SpectralClassEnum SpectralClass { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseStarsStarIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetUniverseStarsStarIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseStarsStarIdOk" /> class.
        /// </summary>
        /// <param name="name">name string (required).</param>
        /// <param name="solarSystemId">solar_system_id integer (required).</param>
        /// <param name="typeId">type_id integer (required).</param>
        /// <param name="age">Age of star in years (required).</param>
        /// <param name="luminosity">luminosity number (required).</param>
        /// <param name="radius">radius integer (required).</param>
        /// <param name="spectralClass">spectral_class string (required).</param>
        /// <param name="temperature">temperature integer (required).</param>
        public GetUniverseStarsStarIdOk(string name = default(string), int? solarSystemId = default(int?), int? typeId = default(int?), long? age = default(long?), float? luminosity = default(float?), long? radius = default(long?), SpectralClassEnum spectralClass = default(SpectralClassEnum), int? temperature = default(int?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "solarSystemId" is required (not null)
            if (solarSystemId == null)
            {
                throw new InvalidDataException("solarSystemId is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.SolarSystemId = solarSystemId;
            }
            // to ensure "typeId" is required (not null)
            if (typeId == null)
            {
                throw new InvalidDataException("typeId is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.TypeId = typeId;
            }
            // to ensure "age" is required (not null)
            if (age == null)
            {
                throw new InvalidDataException("age is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.Age = age;
            }
            // to ensure "luminosity" is required (not null)
            if (luminosity == null)
            {
                throw new InvalidDataException("luminosity is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.Luminosity = luminosity;
            }
            // to ensure "radius" is required (not null)
            if (radius == null)
            {
                throw new InvalidDataException("radius is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.Radius = radius;
            }
            // to ensure "spectralClass" is required (not null)
            if (spectralClass == null)
            {
                throw new InvalidDataException("spectralClass is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.SpectralClass = spectralClass;
            }
            // to ensure "temperature" is required (not null)
            if (temperature == null)
            {
                throw new InvalidDataException("temperature is a required property for GetUniverseStarsStarIdOk and cannot be null");
            }
            else
            {
                this.Temperature = temperature;
            }
        }
        
        /// <summary>
        /// name string
        /// </summary>
        /// <value>name string</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// solar_system_id integer
        /// </summary>
        /// <value>solar_system_id integer</value>
        [DataMember(Name="solar_system_id", EmitDefaultValue=false)]
        public int? SolarSystemId { get; set; }

        /// <summary>
        /// type_id integer
        /// </summary>
        /// <value>type_id integer</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// Age of star in years
        /// </summary>
        /// <value>Age of star in years</value>
        [DataMember(Name="age", EmitDefaultValue=false)]
        public long? Age { get; set; }

        /// <summary>
        /// luminosity number
        /// </summary>
        /// <value>luminosity number</value>
        [DataMember(Name="luminosity", EmitDefaultValue=false)]
        public float? Luminosity { get; set; }

        /// <summary>
        /// radius integer
        /// </summary>
        /// <value>radius integer</value>
        [DataMember(Name="radius", EmitDefaultValue=false)]
        public long? Radius { get; set; }


        /// <summary>
        /// temperature integer
        /// </summary>
        /// <value>temperature integer</value>
        [DataMember(Name="temperature", EmitDefaultValue=false)]
        public int? Temperature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUniverseStarsStarIdOk {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SolarSystemId: ").Append(SolarSystemId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  Luminosity: ").Append(Luminosity).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("  SpectralClass: ").Append(SpectralClass).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUniverseStarsStarIdOk);
        }

        /// <summary>
        /// Returns true if GetUniverseStarsStarIdOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUniverseStarsStarIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUniverseStarsStarIdOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SolarSystemId == input.SolarSystemId ||
                    (this.SolarSystemId != null &&
                    this.SolarSystemId.Equals(input.SolarSystemId))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.Age == input.Age ||
                    (this.Age != null &&
                    this.Age.Equals(input.Age))
                ) && 
                (
                    this.Luminosity == input.Luminosity ||
                    (this.Luminosity != null &&
                    this.Luminosity.Equals(input.Luminosity))
                ) && 
                (
                    this.Radius == input.Radius ||
                    (this.Radius != null &&
                    this.Radius.Equals(input.Radius))
                ) && 
                (
                    this.SpectralClass == input.SpectralClass ||
                    (this.SpectralClass != null &&
                    this.SpectralClass.Equals(input.SpectralClass))
                ) && 
                (
                    this.Temperature == input.Temperature ||
                    (this.Temperature != null &&
                    this.Temperature.Equals(input.Temperature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SolarSystemId != null)
                    hashCode = hashCode * 59 + this.SolarSystemId.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                if (this.Age != null)
                    hashCode = hashCode * 59 + this.Age.GetHashCode();
                if (this.Luminosity != null)
                    hashCode = hashCode * 59 + this.Luminosity.GetHashCode();
                if (this.Radius != null)
                    hashCode = hashCode * 59 + this.Radius.GetHashCode();
                if (this.SpectralClass != null)
                    hashCode = hashCode * 59 + this.SpectralClass.GetHashCode();
                if (this.Temperature != null)
                    hashCode = hashCode * 59 + this.Temperature.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
