/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ESIClient.Client.SwaggerDateConverter;

namespace ESIClient.Model
{
    /// <summary>
    /// item object
    /// </summary>
    [DataContract]
    public partial class PostCharactersCharacterIdFittingsItem :  IEquatable<PostCharactersCharacterIdFittingsItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostCharactersCharacterIdFittingsItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostCharactersCharacterIdFittingsItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostCharactersCharacterIdFittingsItem" /> class.
        /// </summary>
        /// <param name="typeId">type_id integer (required).</param>
        /// <param name="flag">flag integer (required).</param>
        /// <param name="quantity">quantity integer (required).</param>
        public PostCharactersCharacterIdFittingsItem(int? typeId = default(int?), int? flag = default(int?), int? quantity = default(int?))
        {
            // to ensure "typeId" is required (not null)
            if (typeId == null)
            {
                throw new InvalidDataException("typeId is a required property for PostCharactersCharacterIdFittingsItem and cannot be null");
            }
            else
            {
                this.TypeId = typeId;
            }
            // to ensure "flag" is required (not null)
            if (flag == null)
            {
                throw new InvalidDataException("flag is a required property for PostCharactersCharacterIdFittingsItem and cannot be null");
            }
            else
            {
                this.Flag = flag;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for PostCharactersCharacterIdFittingsItem and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
        }
        
        /// <summary>
        /// type_id integer
        /// </summary>
        /// <value>type_id integer</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// flag integer
        /// </summary>
        /// <value>flag integer</value>
        [DataMember(Name="flag", EmitDefaultValue=false)]
        public int? Flag { get; set; }

        /// <summary>
        /// quantity integer
        /// </summary>
        /// <value>quantity integer</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostCharactersCharacterIdFittingsItem {\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  Flag: ").Append(Flag).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostCharactersCharacterIdFittingsItem);
        }

        /// <summary>
        /// Returns true if PostCharactersCharacterIdFittingsItem instances are equal
        /// </summary>
        /// <param name="input">Instance of PostCharactersCharacterIdFittingsItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostCharactersCharacterIdFittingsItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.Flag == input.Flag ||
                    (this.Flag != null &&
                    this.Flag.Equals(input.Flag))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                if (this.Flag != null)
                    hashCode = hashCode * 59 + this.Flag.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
