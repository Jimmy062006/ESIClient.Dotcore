/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ESIClient.Client.SwaggerDateConverter;

namespace ESIClient.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetUniverseGraphicsGraphicIdOk :  IEquatable<GetUniverseGraphicsGraphicIdOk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseGraphicsGraphicIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetUniverseGraphicsGraphicIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseGraphicsGraphicIdOk" /> class.
        /// </summary>
        /// <param name="graphicId">graphic_id integer (required).</param>
        /// <param name="graphicFile">graphic_file string.</param>
        /// <param name="sofRaceName">sof_race_name string.</param>
        /// <param name="sofFationName">sof_fation_name string.</param>
        /// <param name="sofDna">sof_dna string.</param>
        /// <param name="sofHullName">sof_hull_name string.</param>
        /// <param name="collisionFile">collision_file string.</param>
        /// <param name="iconFolder">icon_folder string.</param>
        public GetUniverseGraphicsGraphicIdOk(int? graphicId = default(int?), string graphicFile = default(string), string sofRaceName = default(string), string sofFationName = default(string), string sofDna = default(string), string sofHullName = default(string), string collisionFile = default(string), string iconFolder = default(string))
        {
            // to ensure "graphicId" is required (not null)
            if (graphicId == null)
            {
                throw new InvalidDataException("graphicId is a required property for GetUniverseGraphicsGraphicIdOk and cannot be null");
            }
            else
            {
                this.GraphicId = graphicId;
            }
            this.GraphicFile = graphicFile;
            this.SofRaceName = sofRaceName;
            this.SofFationName = sofFationName;
            this.SofDna = sofDna;
            this.SofHullName = sofHullName;
            this.CollisionFile = collisionFile;
            this.IconFolder = iconFolder;
        }
        
        /// <summary>
        /// graphic_id integer
        /// </summary>
        /// <value>graphic_id integer</value>
        [DataMember(Name="graphic_id", EmitDefaultValue=false)]
        public int? GraphicId { get; set; }

        /// <summary>
        /// graphic_file string
        /// </summary>
        /// <value>graphic_file string</value>
        [DataMember(Name="graphic_file", EmitDefaultValue=false)]
        public string GraphicFile { get; set; }

        /// <summary>
        /// sof_race_name string
        /// </summary>
        /// <value>sof_race_name string</value>
        [DataMember(Name="sof_race_name", EmitDefaultValue=false)]
        public string SofRaceName { get; set; }

        /// <summary>
        /// sof_fation_name string
        /// </summary>
        /// <value>sof_fation_name string</value>
        [DataMember(Name="sof_fation_name", EmitDefaultValue=false)]
        public string SofFationName { get; set; }

        /// <summary>
        /// sof_dna string
        /// </summary>
        /// <value>sof_dna string</value>
        [DataMember(Name="sof_dna", EmitDefaultValue=false)]
        public string SofDna { get; set; }

        /// <summary>
        /// sof_hull_name string
        /// </summary>
        /// <value>sof_hull_name string</value>
        [DataMember(Name="sof_hull_name", EmitDefaultValue=false)]
        public string SofHullName { get; set; }

        /// <summary>
        /// collision_file string
        /// </summary>
        /// <value>collision_file string</value>
        [DataMember(Name="collision_file", EmitDefaultValue=false)]
        public string CollisionFile { get; set; }

        /// <summary>
        /// icon_folder string
        /// </summary>
        /// <value>icon_folder string</value>
        [DataMember(Name="icon_folder", EmitDefaultValue=false)]
        public string IconFolder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUniverseGraphicsGraphicIdOk {\n");
            sb.Append("  GraphicId: ").Append(GraphicId).Append("\n");
            sb.Append("  GraphicFile: ").Append(GraphicFile).Append("\n");
            sb.Append("  SofRaceName: ").Append(SofRaceName).Append("\n");
            sb.Append("  SofFationName: ").Append(SofFationName).Append("\n");
            sb.Append("  SofDna: ").Append(SofDna).Append("\n");
            sb.Append("  SofHullName: ").Append(SofHullName).Append("\n");
            sb.Append("  CollisionFile: ").Append(CollisionFile).Append("\n");
            sb.Append("  IconFolder: ").Append(IconFolder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUniverseGraphicsGraphicIdOk);
        }

        /// <summary>
        /// Returns true if GetUniverseGraphicsGraphicIdOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUniverseGraphicsGraphicIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUniverseGraphicsGraphicIdOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GraphicId == input.GraphicId ||
                    (this.GraphicId != null &&
                    this.GraphicId.Equals(input.GraphicId))
                ) && 
                (
                    this.GraphicFile == input.GraphicFile ||
                    (this.GraphicFile != null &&
                    this.GraphicFile.Equals(input.GraphicFile))
                ) && 
                (
                    this.SofRaceName == input.SofRaceName ||
                    (this.SofRaceName != null &&
                    this.SofRaceName.Equals(input.SofRaceName))
                ) && 
                (
                    this.SofFationName == input.SofFationName ||
                    (this.SofFationName != null &&
                    this.SofFationName.Equals(input.SofFationName))
                ) && 
                (
                    this.SofDna == input.SofDna ||
                    (this.SofDna != null &&
                    this.SofDna.Equals(input.SofDna))
                ) && 
                (
                    this.SofHullName == input.SofHullName ||
                    (this.SofHullName != null &&
                    this.SofHullName.Equals(input.SofHullName))
                ) && 
                (
                    this.CollisionFile == input.CollisionFile ||
                    (this.CollisionFile != null &&
                    this.CollisionFile.Equals(input.CollisionFile))
                ) && 
                (
                    this.IconFolder == input.IconFolder ||
                    (this.IconFolder != null &&
                    this.IconFolder.Equals(input.IconFolder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GraphicId != null)
                    hashCode = hashCode * 59 + this.GraphicId.GetHashCode();
                if (this.GraphicFile != null)
                    hashCode = hashCode * 59 + this.GraphicFile.GetHashCode();
                if (this.SofRaceName != null)
                    hashCode = hashCode * 59 + this.SofRaceName.GetHashCode();
                if (this.SofFationName != null)
                    hashCode = hashCode * 59 + this.SofFationName.GetHashCode();
                if (this.SofDna != null)
                    hashCode = hashCode * 59 + this.SofDna.GetHashCode();
                if (this.SofHullName != null)
                    hashCode = hashCode * 59 + this.SofHullName.GetHashCode();
                if (this.CollisionFile != null)
                    hashCode = hashCode * 59 + this.CollisionFile.GetHashCode();
                if (this.IconFolder != null)
                    hashCode = hashCode * 59 + this.IconFolder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
