/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ESIClient.Client.SwaggerDateConverter;

namespace ESIClient.Model
{
    /// <summary>
    /// new_schedule object
    /// </summary>
    [DataContract]
    public partial class PutCorporationsCorporationIdStructuresStructureIdNewSchedule :  IEquatable<PutCorporationsCorporationIdStructuresStructureIdNewSchedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PutCorporationsCorporationIdStructuresStructureIdNewSchedule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PutCorporationsCorporationIdStructuresStructureIdNewSchedule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PutCorporationsCorporationIdStructuresStructureIdNewSchedule" /> class.
        /// </summary>
        /// <param name="day">Day of the week, zero-indexed to Monday (required).</param>
        /// <param name="hour">Hour of the day evetime, zero-indexed to midnight (required).</param>
        public PutCorporationsCorporationIdStructuresStructureIdNewSchedule(int? day = default(int?), int? hour = default(int?))
        {
            // to ensure "day" is required (not null)
            if (day == null)
            {
                throw new InvalidDataException("day is a required property for PutCorporationsCorporationIdStructuresStructureIdNewSchedule and cannot be null");
            }
            else
            {
                this.Day = day;
            }
            // to ensure "hour" is required (not null)
            if (hour == null)
            {
                throw new InvalidDataException("hour is a required property for PutCorporationsCorporationIdStructuresStructureIdNewSchedule and cannot be null");
            }
            else
            {
                this.Hour = hour;
            }
        }
        
        /// <summary>
        /// Day of the week, zero-indexed to Monday
        /// </summary>
        /// <value>Day of the week, zero-indexed to Monday</value>
        [DataMember(Name="day", EmitDefaultValue=false)]
        public int? Day { get; set; }

        /// <summary>
        /// Hour of the day evetime, zero-indexed to midnight
        /// </summary>
        /// <value>Hour of the day evetime, zero-indexed to midnight</value>
        [DataMember(Name="hour", EmitDefaultValue=false)]
        public int? Hour { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PutCorporationsCorporationIdStructuresStructureIdNewSchedule {\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Hour: ").Append(Hour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PutCorporationsCorporationIdStructuresStructureIdNewSchedule);
        }

        /// <summary>
        /// Returns true if PutCorporationsCorporationIdStructuresStructureIdNewSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of PutCorporationsCorporationIdStructuresStructureIdNewSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PutCorporationsCorporationIdStructuresStructureIdNewSchedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.Hour == input.Hour ||
                    (this.Hour != null &&
                    this.Hour.Equals(input.Hour))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Day != null)
                    hashCode = hashCode * 59 + this.Day.GetHashCode();
                if (this.Hour != null)
                    hashCode = hashCode * 59 + this.Hour.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Day (int?) maximum
            if(this.Day > (int?)6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Day, must be a value less than or equal to 6.", new [] { "Day" });
            }

            // Day (int?) minimum
            if(this.Day < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Day, must be a value greater than or equal to 0.", new [] { "Day" });
            }

            // Hour (int?) maximum
            if(this.Hour > (int?)23)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hour, must be a value less than or equal to 23.", new [] { "Hour" });
            }

            // Hour (int?) minimum
            if(this.Hour < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hour, must be a value greater than or equal to 0.", new [] { "Hour" });
            }

            yield break;
        }
    }

}
