/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ESIClient.Client.SwaggerDateConverter;

namespace ESIClient.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdContacts200Ok :  IEquatable<GetCharactersCharacterIdContacts200Ok>, IValidatableObject
    {
        /// <summary>
        /// contact_type string
        /// </summary>
        /// <value>contact_type string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContactTypeEnum
        {
            
            /// <summary>
            /// Enum Character for value: character
            /// </summary>
            [EnumMember(Value = "character")]
            Character = 1,
            
            /// <summary>
            /// Enum Corporation for value: corporation
            /// </summary>
            [EnumMember(Value = "corporation")]
            Corporation = 2,
            
            /// <summary>
            /// Enum Alliance for value: alliance
            /// </summary>
            [EnumMember(Value = "alliance")]
            Alliance = 3,
            
            /// <summary>
            /// Enum Faction for value: faction
            /// </summary>
            [EnumMember(Value = "faction")]
            Faction = 4
        }

        /// <summary>
        /// contact_type string
        /// </summary>
        /// <value>contact_type string</value>
        [DataMember(Name="contact_type", EmitDefaultValue=false)]
        public ContactTypeEnum ContactType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdContacts200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdContacts200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdContacts200Ok" /> class.
        /// </summary>
        /// <param name="standing">Standing of the contact (required).</param>
        /// <param name="contactType">contact_type string (required).</param>
        /// <param name="contactId">contact_id integer (required).</param>
        /// <param name="isWatched">Whether this contact is being watched.</param>
        /// <param name="isBlocked">Whether this contact is in the blocked list. Note a missing value denotes unknown, not true or false.</param>
        /// <param name="labelId">Custom label of the contact.</param>
        public GetCharactersCharacterIdContacts200Ok(float? standing = default(float?), ContactTypeEnum contactType = default(ContactTypeEnum), int? contactId = default(int?), bool? isWatched = default(bool?), bool? isBlocked = default(bool?), long? labelId = default(long?))
        {
            // to ensure "standing" is required (not null)
            if (standing == null)
            {
                throw new InvalidDataException("standing is a required property for GetCharactersCharacterIdContacts200Ok and cannot be null");
            }
            else
            {
                this.Standing = standing;
            }
            // to ensure "contactType" is required (not null)
            if (contactType == null)
            {
                throw new InvalidDataException("contactType is a required property for GetCharactersCharacterIdContacts200Ok and cannot be null");
            }
            else
            {
                this.ContactType = contactType;
            }
            // to ensure "contactId" is required (not null)
            if (contactId == null)
            {
                throw new InvalidDataException("contactId is a required property for GetCharactersCharacterIdContacts200Ok and cannot be null");
            }
            else
            {
                this.ContactId = contactId;
            }
            this.IsWatched = isWatched;
            this.IsBlocked = isBlocked;
            this.LabelId = labelId;
        }
        
        /// <summary>
        /// Standing of the contact
        /// </summary>
        /// <value>Standing of the contact</value>
        [DataMember(Name="standing", EmitDefaultValue=false)]
        public float? Standing { get; set; }


        /// <summary>
        /// contact_id integer
        /// </summary>
        /// <value>contact_id integer</value>
        [DataMember(Name="contact_id", EmitDefaultValue=false)]
        public int? ContactId { get; set; }

        /// <summary>
        /// Whether this contact is being watched
        /// </summary>
        /// <value>Whether this contact is being watched</value>
        [DataMember(Name="is_watched", EmitDefaultValue=false)]
        public bool? IsWatched { get; set; }

        /// <summary>
        /// Whether this contact is in the blocked list. Note a missing value denotes unknown, not true or false
        /// </summary>
        /// <value>Whether this contact is in the blocked list. Note a missing value denotes unknown, not true or false</value>
        [DataMember(Name="is_blocked", EmitDefaultValue=false)]
        public bool? IsBlocked { get; set; }

        /// <summary>
        /// Custom label of the contact
        /// </summary>
        /// <value>Custom label of the contact</value>
        [DataMember(Name="label_id", EmitDefaultValue=false)]
        public long? LabelId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdContacts200Ok {\n");
            sb.Append("  Standing: ").Append(Standing).Append("\n");
            sb.Append("  ContactType: ").Append(ContactType).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  IsWatched: ").Append(IsWatched).Append("\n");
            sb.Append("  IsBlocked: ").Append(IsBlocked).Append("\n");
            sb.Append("  LabelId: ").Append(LabelId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdContacts200Ok);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdContacts200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdContacts200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdContacts200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Standing == input.Standing ||
                    (this.Standing != null &&
                    this.Standing.Equals(input.Standing))
                ) && 
                (
                    this.ContactType == input.ContactType ||
                    (this.ContactType != null &&
                    this.ContactType.Equals(input.ContactType))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.IsWatched == input.IsWatched ||
                    (this.IsWatched != null &&
                    this.IsWatched.Equals(input.IsWatched))
                ) && 
                (
                    this.IsBlocked == input.IsBlocked ||
                    (this.IsBlocked != null &&
                    this.IsBlocked.Equals(input.IsBlocked))
                ) && 
                (
                    this.LabelId == input.LabelId ||
                    (this.LabelId != null &&
                    this.LabelId.Equals(input.LabelId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Standing != null)
                    hashCode = hashCode * 59 + this.Standing.GetHashCode();
                if (this.ContactType != null)
                    hashCode = hashCode * 59 + this.ContactType.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.IsWatched != null)
                    hashCode = hashCode * 59 + this.IsWatched.GetHashCode();
                if (this.IsBlocked != null)
                    hashCode = hashCode * 59 + this.IsBlocked.GetHashCode();
                if (this.LabelId != null)
                    hashCode = hashCode * 59 + this.LabelId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
