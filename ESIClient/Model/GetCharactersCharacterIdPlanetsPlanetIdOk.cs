/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ESIClient.Client.SwaggerDateConverter;

namespace ESIClient.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdPlanetsPlanetIdOk :  IEquatable<GetCharactersCharacterIdPlanetsPlanetIdOk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdPlanetsPlanetIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdPlanetsPlanetIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdPlanetsPlanetIdOk" /> class.
        /// </summary>
        /// <param name="links">links array (required).</param>
        /// <param name="pins">pins array (required).</param>
        /// <param name="routes">routes array (required).</param>
        public GetCharactersCharacterIdPlanetsPlanetIdOk(List<GetCharactersCharacterIdPlanetsPlanetIdLink> links = default(List<GetCharactersCharacterIdPlanetsPlanetIdLink>), List<GetCharactersCharacterIdPlanetsPlanetIdPin> pins = default(List<GetCharactersCharacterIdPlanetsPlanetIdPin>), List<GetCharactersCharacterIdPlanetsPlanetIdRoute> routes = default(List<GetCharactersCharacterIdPlanetsPlanetIdRoute>))
        {
            // to ensure "links" is required (not null)
            if (links == null)
            {
                throw new InvalidDataException("links is a required property for GetCharactersCharacterIdPlanetsPlanetIdOk and cannot be null");
            }
            else
            {
                this.Links = links;
            }
            // to ensure "pins" is required (not null)
            if (pins == null)
            {
                throw new InvalidDataException("pins is a required property for GetCharactersCharacterIdPlanetsPlanetIdOk and cannot be null");
            }
            else
            {
                this.Pins = pins;
            }
            // to ensure "routes" is required (not null)
            if (routes == null)
            {
                throw new InvalidDataException("routes is a required property for GetCharactersCharacterIdPlanetsPlanetIdOk and cannot be null");
            }
            else
            {
                this.Routes = routes;
            }
        }
        
        /// <summary>
        /// links array
        /// </summary>
        /// <value>links array</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<GetCharactersCharacterIdPlanetsPlanetIdLink> Links { get; set; }

        /// <summary>
        /// pins array
        /// </summary>
        /// <value>pins array</value>
        [DataMember(Name="pins", EmitDefaultValue=false)]
        public List<GetCharactersCharacterIdPlanetsPlanetIdPin> Pins { get; set; }

        /// <summary>
        /// routes array
        /// </summary>
        /// <value>routes array</value>
        [DataMember(Name="routes", EmitDefaultValue=false)]
        public List<GetCharactersCharacterIdPlanetsPlanetIdRoute> Routes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdPlanetsPlanetIdOk {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Pins: ").Append(Pins).Append("\n");
            sb.Append("  Routes: ").Append(Routes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdPlanetsPlanetIdOk);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdPlanetsPlanetIdOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdPlanetsPlanetIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdPlanetsPlanetIdOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.Pins == input.Pins ||
                    this.Pins != null &&
                    this.Pins.SequenceEqual(input.Pins)
                ) && 
                (
                    this.Routes == input.Routes ||
                    this.Routes != null &&
                    this.Routes.SequenceEqual(input.Routes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Pins != null)
                    hashCode = hashCode * 59 + this.Pins.GetHashCode();
                if (this.Routes != null)
                    hashCode = hashCode * 59 + this.Routes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
