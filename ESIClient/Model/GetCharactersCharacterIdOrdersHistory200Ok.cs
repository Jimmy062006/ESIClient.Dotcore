/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ESIClient.Client.SwaggerDateConverter;

namespace ESIClient.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdOrdersHistory200Ok :  IEquatable<GetCharactersCharacterIdOrdersHistory200Ok>, IValidatableObject
    {
        /// <summary>
        /// Valid order range, numbers are ranges in jumps
        /// </summary>
        /// <value>Valid order range, numbers are ranges in jumps</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RangeEnum
        {
            
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,
            
            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 2,
            
            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 3,
            
            /// <summary>
            /// Enum _20 for value: 20
            /// </summary>
            [EnumMember(Value = "20")]
            _20 = 4,
            
            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 5,
            
            /// <summary>
            /// Enum _30 for value: 30
            /// </summary>
            [EnumMember(Value = "30")]
            _30 = 6,
            
            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 7,
            
            /// <summary>
            /// Enum _40 for value: 40
            /// </summary>
            [EnumMember(Value = "40")]
            _40 = 8,
            
            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 9,
            
            /// <summary>
            /// Enum Region for value: region
            /// </summary>
            [EnumMember(Value = "region")]
            Region = 10,
            
            /// <summary>
            /// Enum Solarsystem for value: solarsystem
            /// </summary>
            [EnumMember(Value = "solarsystem")]
            Solarsystem = 11,
            
            /// <summary>
            /// Enum Station for value: station
            /// </summary>
            [EnumMember(Value = "station")]
            Station = 12
        }

        /// <summary>
        /// Valid order range, numbers are ranges in jumps
        /// </summary>
        /// <value>Valid order range, numbers are ranges in jumps</value>
        [DataMember(Name="range", EmitDefaultValue=false)]
        public RangeEnum Range { get; set; }
        /// <summary>
        /// Current order state
        /// </summary>
        /// <value>Current order state</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 1,
            
            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 2
        }

        /// <summary>
        /// Current order state
        /// </summary>
        /// <value>Current order state</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdOrdersHistory200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdOrdersHistory200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdOrdersHistory200Ok" /> class.
        /// </summary>
        /// <param name="orderId">Unique order ID (required).</param>
        /// <param name="typeId">The type ID of the item transacted in this order (required).</param>
        /// <param name="regionId">ID of the region where order was placed (required).</param>
        /// <param name="locationId">ID of the location where order was placed (required).</param>
        /// <param name="range">Valid order range, numbers are ranges in jumps (required).</param>
        /// <param name="price">Cost per unit for this order (required).</param>
        /// <param name="volumeTotal">Quantity of items required or offered at time order was placed (required).</param>
        /// <param name="volumeRemain">Quantity of items still required or offered (required).</param>
        /// <param name="issued">Date and time when this order was issued (required).</param>
        /// <param name="isBuyOrder">True if the order is a bid (buy) order.</param>
        /// <param name="minVolume">For buy orders, the minimum quantity that will be accepted in a matching sell order.</param>
        /// <param name="escrow">For buy orders, the amount of ISK in escrow.</param>
        /// <param name="duration">Number of days the order was valid for (starting from the issued date). An order expires at time issued + duration (required).</param>
        /// <param name="state">Current order state (required).</param>
        /// <param name="isCorporation">Signifies whether the buy/sell order was placed on behalf of a corporation. (required).</param>
        public GetCharactersCharacterIdOrdersHistory200Ok(long? orderId = default(long?), int? typeId = default(int?), int? regionId = default(int?), long? locationId = default(long?), RangeEnum range = default(RangeEnum), double? price = default(double?), int? volumeTotal = default(int?), int? volumeRemain = default(int?), DateTime? issued = default(DateTime?), bool? isBuyOrder = default(bool?), int? minVolume = default(int?), double? escrow = default(double?), int? duration = default(int?), StateEnum state = default(StateEnum), bool? isCorporation = default(bool?))
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new InvalidDataException("orderId is a required property for GetCharactersCharacterIdOrdersHistory200Ok and cannot be null");
            }
            else
            {
                this.OrderId = orderId;
            }
            // to ensure "typeId" is required (not null)
            if (typeId == null)
            {
                throw new InvalidDataException("typeId is a required property for GetCharactersCharacterIdOrdersHistory200Ok and cannot be null");
            }
            else
            {
                this.TypeId = typeId;
            }
            // to ensure "regionId" is required (not null)
            if (regionId == null)
            {
                throw new InvalidDataException("regionId is a required property for GetCharactersCharacterIdOrdersHistory200Ok and cannot be null");
            }
            else
            {
                this.RegionId = regionId;
            }
            // to ensure "locationId" is required (not null)
            if (locationId == null)
            {
                throw new InvalidDataException("locationId is a required property for GetCharactersCharacterIdOrdersHistory200Ok and cannot be null");
            }
            else
            {
                this.LocationId = locationId;
            }
            // to ensure "range" is required (not null)
            if (range == null)
            {
                throw new InvalidDataException("range is a required property for GetCharactersCharacterIdOrdersHistory200Ok and cannot be null");
            }
            else
            {
                this.Range = range;
            }
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new InvalidDataException("price is a required property for GetCharactersCharacterIdOrdersHistory200Ok and cannot be null");
            }
            else
            {
                this.Price = price;
            }
            // to ensure "volumeTotal" is required (not null)
            if (volumeTotal == null)
            {
                throw new InvalidDataException("volumeTotal is a required property for GetCharactersCharacterIdOrdersHistory200Ok and cannot be null");
            }
            else
            {
                this.VolumeTotal = volumeTotal;
            }
            // to ensure "volumeRemain" is required (not null)
            if (volumeRemain == null)
            {
                throw new InvalidDataException("volumeRemain is a required property for GetCharactersCharacterIdOrdersHistory200Ok and cannot be null");
            }
            else
            {
                this.VolumeRemain = volumeRemain;
            }
            // to ensure "issued" is required (not null)
            if (issued == null)
            {
                throw new InvalidDataException("issued is a required property for GetCharactersCharacterIdOrdersHistory200Ok and cannot be null");
            }
            else
            {
                this.Issued = issued;
            }
            // to ensure "duration" is required (not null)
            if (duration == null)
            {
                throw new InvalidDataException("duration is a required property for GetCharactersCharacterIdOrdersHistory200Ok and cannot be null");
            }
            else
            {
                this.Duration = duration;
            }
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for GetCharactersCharacterIdOrdersHistory200Ok and cannot be null");
            }
            else
            {
                this.State = state;
            }
            // to ensure "isCorporation" is required (not null)
            if (isCorporation == null)
            {
                throw new InvalidDataException("isCorporation is a required property for GetCharactersCharacterIdOrdersHistory200Ok and cannot be null");
            }
            else
            {
                this.IsCorporation = isCorporation;
            }
            this.IsBuyOrder = isBuyOrder;
            this.MinVolume = minVolume;
            this.Escrow = escrow;
        }
        
        /// <summary>
        /// Unique order ID
        /// </summary>
        /// <value>Unique order ID</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public long? OrderId { get; set; }

        /// <summary>
        /// The type ID of the item transacted in this order
        /// </summary>
        /// <value>The type ID of the item transacted in this order</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// ID of the region where order was placed
        /// </summary>
        /// <value>ID of the region where order was placed</value>
        [DataMember(Name="region_id", EmitDefaultValue=false)]
        public int? RegionId { get; set; }

        /// <summary>
        /// ID of the location where order was placed
        /// </summary>
        /// <value>ID of the location where order was placed</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public long? LocationId { get; set; }


        /// <summary>
        /// Cost per unit for this order
        /// </summary>
        /// <value>Cost per unit for this order</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Quantity of items required or offered at time order was placed
        /// </summary>
        /// <value>Quantity of items required or offered at time order was placed</value>
        [DataMember(Name="volume_total", EmitDefaultValue=false)]
        public int? VolumeTotal { get; set; }

        /// <summary>
        /// Quantity of items still required or offered
        /// </summary>
        /// <value>Quantity of items still required or offered</value>
        [DataMember(Name="volume_remain", EmitDefaultValue=false)]
        public int? VolumeRemain { get; set; }

        /// <summary>
        /// Date and time when this order was issued
        /// </summary>
        /// <value>Date and time when this order was issued</value>
        [DataMember(Name="issued", EmitDefaultValue=false)]
        public DateTime? Issued { get; set; }

        /// <summary>
        /// True if the order is a bid (buy) order
        /// </summary>
        /// <value>True if the order is a bid (buy) order</value>
        [DataMember(Name="is_buy_order", EmitDefaultValue=false)]
        public bool? IsBuyOrder { get; set; }

        /// <summary>
        /// For buy orders, the minimum quantity that will be accepted in a matching sell order
        /// </summary>
        /// <value>For buy orders, the minimum quantity that will be accepted in a matching sell order</value>
        [DataMember(Name="min_volume", EmitDefaultValue=false)]
        public int? MinVolume { get; set; }

        /// <summary>
        /// For buy orders, the amount of ISK in escrow
        /// </summary>
        /// <value>For buy orders, the amount of ISK in escrow</value>
        [DataMember(Name="escrow", EmitDefaultValue=false)]
        public double? Escrow { get; set; }

        /// <summary>
        /// Number of days the order was valid for (starting from the issued date). An order expires at time issued + duration
        /// </summary>
        /// <value>Number of days the order was valid for (starting from the issued date). An order expires at time issued + duration</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }


        /// <summary>
        /// Signifies whether the buy/sell order was placed on behalf of a corporation.
        /// </summary>
        /// <value>Signifies whether the buy/sell order was placed on behalf of a corporation.</value>
        [DataMember(Name="is_corporation", EmitDefaultValue=false)]
        public bool? IsCorporation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdOrdersHistory200Ok {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  VolumeTotal: ").Append(VolumeTotal).Append("\n");
            sb.Append("  VolumeRemain: ").Append(VolumeRemain).Append("\n");
            sb.Append("  Issued: ").Append(Issued).Append("\n");
            sb.Append("  IsBuyOrder: ").Append(IsBuyOrder).Append("\n");
            sb.Append("  MinVolume: ").Append(MinVolume).Append("\n");
            sb.Append("  Escrow: ").Append(Escrow).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  IsCorporation: ").Append(IsCorporation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdOrdersHistory200Ok);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdOrdersHistory200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdOrdersHistory200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdOrdersHistory200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.RegionId == input.RegionId ||
                    (this.RegionId != null &&
                    this.RegionId.Equals(input.RegionId))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.VolumeTotal == input.VolumeTotal ||
                    (this.VolumeTotal != null &&
                    this.VolumeTotal.Equals(input.VolumeTotal))
                ) && 
                (
                    this.VolumeRemain == input.VolumeRemain ||
                    (this.VolumeRemain != null &&
                    this.VolumeRemain.Equals(input.VolumeRemain))
                ) && 
                (
                    this.Issued == input.Issued ||
                    (this.Issued != null &&
                    this.Issued.Equals(input.Issued))
                ) && 
                (
                    this.IsBuyOrder == input.IsBuyOrder ||
                    (this.IsBuyOrder != null &&
                    this.IsBuyOrder.Equals(input.IsBuyOrder))
                ) && 
                (
                    this.MinVolume == input.MinVolume ||
                    (this.MinVolume != null &&
                    this.MinVolume.Equals(input.MinVolume))
                ) && 
                (
                    this.Escrow == input.Escrow ||
                    (this.Escrow != null &&
                    this.Escrow.Equals(input.Escrow))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.IsCorporation == input.IsCorporation ||
                    (this.IsCorporation != null &&
                    this.IsCorporation.Equals(input.IsCorporation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                if (this.RegionId != null)
                    hashCode = hashCode * 59 + this.RegionId.GetHashCode();
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.Range != null)
                    hashCode = hashCode * 59 + this.Range.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.VolumeTotal != null)
                    hashCode = hashCode * 59 + this.VolumeTotal.GetHashCode();
                if (this.VolumeRemain != null)
                    hashCode = hashCode * 59 + this.VolumeRemain.GetHashCode();
                if (this.Issued != null)
                    hashCode = hashCode * 59 + this.Issued.GetHashCode();
                if (this.IsBuyOrder != null)
                    hashCode = hashCode * 59 + this.IsBuyOrder.GetHashCode();
                if (this.MinVolume != null)
                    hashCode = hashCode * 59 + this.MinVolume.GetHashCode();
                if (this.Escrow != null)
                    hashCode = hashCode * 59 + this.Escrow.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.IsCorporation != null)
                    hashCode = hashCode * 59 + this.IsCorporation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
