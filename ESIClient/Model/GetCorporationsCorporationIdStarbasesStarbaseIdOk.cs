/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ESIClient.Client.SwaggerDateConverter;

namespace ESIClient.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationsCorporationIdStarbasesStarbaseIdOk :  IEquatable<GetCorporationsCorporationIdStarbasesStarbaseIdOk>, IValidatableObject
    {
        /// <summary>
        /// Who can view the starbase (POS)&#39;s fule bay. Characters either need to have required role or belong to the starbase (POS) owner&#39;s corporation or alliance, as described by the enum, all other access settings follows the same scheme
        /// </summary>
        /// <value>Who can view the starbase (POS)&#39;s fule bay. Characters either need to have required role or belong to the starbase (POS) owner&#39;s corporation or alliance, as described by the enum, all other access settings follows the same scheme</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FuelBayViewEnum
        {
            
            /// <summary>
            /// Enum Alliancemember for value: alliance_member
            /// </summary>
            [EnumMember(Value = "alliance_member")]
            Alliancemember = 1,
            
            /// <summary>
            /// Enum Configstarbaseequipmentrole for value: config_starbase_equipment_role
            /// </summary>
            [EnumMember(Value = "config_starbase_equipment_role")]
            Configstarbaseequipmentrole = 2,
            
            /// <summary>
            /// Enum Corporationmember for value: corporation_member
            /// </summary>
            [EnumMember(Value = "corporation_member")]
            Corporationmember = 3,
            
            /// <summary>
            /// Enum Starbasefueltechnicianrole for value: starbase_fuel_technician_role
            /// </summary>
            [EnumMember(Value = "starbase_fuel_technician_role")]
            Starbasefueltechnicianrole = 4
        }

        /// <summary>
        /// Who can view the starbase (POS)&#39;s fule bay. Characters either need to have required role or belong to the starbase (POS) owner&#39;s corporation or alliance, as described by the enum, all other access settings follows the same scheme
        /// </summary>
        /// <value>Who can view the starbase (POS)&#39;s fule bay. Characters either need to have required role or belong to the starbase (POS) owner&#39;s corporation or alliance, as described by the enum, all other access settings follows the same scheme</value>
        [DataMember(Name="fuel_bay_view", EmitDefaultValue=false)]
        public FuelBayViewEnum FuelBayView { get; set; }
        /// <summary>
        /// Who can take fuel blocks out of the starbase (POS)&#39;s fuel bay
        /// </summary>
        /// <value>Who can take fuel blocks out of the starbase (POS)&#39;s fuel bay</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FuelBayTakeEnum
        {
            
            /// <summary>
            /// Enum Alliancemember for value: alliance_member
            /// </summary>
            [EnumMember(Value = "alliance_member")]
            Alliancemember = 1,
            
            /// <summary>
            /// Enum Configstarbaseequipmentrole for value: config_starbase_equipment_role
            /// </summary>
            [EnumMember(Value = "config_starbase_equipment_role")]
            Configstarbaseequipmentrole = 2,
            
            /// <summary>
            /// Enum Corporationmember for value: corporation_member
            /// </summary>
            [EnumMember(Value = "corporation_member")]
            Corporationmember = 3,
            
            /// <summary>
            /// Enum Starbasefueltechnicianrole for value: starbase_fuel_technician_role
            /// </summary>
            [EnumMember(Value = "starbase_fuel_technician_role")]
            Starbasefueltechnicianrole = 4
        }

        /// <summary>
        /// Who can take fuel blocks out of the starbase (POS)&#39;s fuel bay
        /// </summary>
        /// <value>Who can take fuel blocks out of the starbase (POS)&#39;s fuel bay</value>
        [DataMember(Name="fuel_bay_take", EmitDefaultValue=false)]
        public FuelBayTakeEnum FuelBayTake { get; set; }
        /// <summary>
        /// Who can anchor starbase (POS) and its structures
        /// </summary>
        /// <value>Who can anchor starbase (POS) and its structures</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AnchorEnum
        {
            
            /// <summary>
            /// Enum Alliancemember for value: alliance_member
            /// </summary>
            [EnumMember(Value = "alliance_member")]
            Alliancemember = 1,
            
            /// <summary>
            /// Enum Configstarbaseequipmentrole for value: config_starbase_equipment_role
            /// </summary>
            [EnumMember(Value = "config_starbase_equipment_role")]
            Configstarbaseequipmentrole = 2,
            
            /// <summary>
            /// Enum Corporationmember for value: corporation_member
            /// </summary>
            [EnumMember(Value = "corporation_member")]
            Corporationmember = 3,
            
            /// <summary>
            /// Enum Starbasefueltechnicianrole for value: starbase_fuel_technician_role
            /// </summary>
            [EnumMember(Value = "starbase_fuel_technician_role")]
            Starbasefueltechnicianrole = 4
        }

        /// <summary>
        /// Who can anchor starbase (POS) and its structures
        /// </summary>
        /// <value>Who can anchor starbase (POS) and its structures</value>
        [DataMember(Name="anchor", EmitDefaultValue=false)]
        public AnchorEnum Anchor { get; set; }
        /// <summary>
        /// Who can unanchor starbase (POS) and its structures
        /// </summary>
        /// <value>Who can unanchor starbase (POS) and its structures</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnanchorEnum
        {
            
            /// <summary>
            /// Enum Alliancemember for value: alliance_member
            /// </summary>
            [EnumMember(Value = "alliance_member")]
            Alliancemember = 1,
            
            /// <summary>
            /// Enum Configstarbaseequipmentrole for value: config_starbase_equipment_role
            /// </summary>
            [EnumMember(Value = "config_starbase_equipment_role")]
            Configstarbaseequipmentrole = 2,
            
            /// <summary>
            /// Enum Corporationmember for value: corporation_member
            /// </summary>
            [EnumMember(Value = "corporation_member")]
            Corporationmember = 3,
            
            /// <summary>
            /// Enum Starbasefueltechnicianrole for value: starbase_fuel_technician_role
            /// </summary>
            [EnumMember(Value = "starbase_fuel_technician_role")]
            Starbasefueltechnicianrole = 4
        }

        /// <summary>
        /// Who can unanchor starbase (POS) and its structures
        /// </summary>
        /// <value>Who can unanchor starbase (POS) and its structures</value>
        [DataMember(Name="unanchor", EmitDefaultValue=false)]
        public UnanchorEnum Unanchor { get; set; }
        /// <summary>
        /// Who can online starbase (POS) and its structures
        /// </summary>
        /// <value>Who can online starbase (POS) and its structures</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OnlineEnum
        {
            
            /// <summary>
            /// Enum Alliancemember for value: alliance_member
            /// </summary>
            [EnumMember(Value = "alliance_member")]
            Alliancemember = 1,
            
            /// <summary>
            /// Enum Configstarbaseequipmentrole for value: config_starbase_equipment_role
            /// </summary>
            [EnumMember(Value = "config_starbase_equipment_role")]
            Configstarbaseequipmentrole = 2,
            
            /// <summary>
            /// Enum Corporationmember for value: corporation_member
            /// </summary>
            [EnumMember(Value = "corporation_member")]
            Corporationmember = 3,
            
            /// <summary>
            /// Enum Starbasefueltechnicianrole for value: starbase_fuel_technician_role
            /// </summary>
            [EnumMember(Value = "starbase_fuel_technician_role")]
            Starbasefueltechnicianrole = 4
        }

        /// <summary>
        /// Who can online starbase (POS) and its structures
        /// </summary>
        /// <value>Who can online starbase (POS) and its structures</value>
        [DataMember(Name="online", EmitDefaultValue=false)]
        public OnlineEnum Online { get; set; }
        /// <summary>
        /// Who can offline starbase (POS) and its structures
        /// </summary>
        /// <value>Who can offline starbase (POS) and its structures</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OfflineEnum
        {
            
            /// <summary>
            /// Enum Alliancemember for value: alliance_member
            /// </summary>
            [EnumMember(Value = "alliance_member")]
            Alliancemember = 1,
            
            /// <summary>
            /// Enum Configstarbaseequipmentrole for value: config_starbase_equipment_role
            /// </summary>
            [EnumMember(Value = "config_starbase_equipment_role")]
            Configstarbaseequipmentrole = 2,
            
            /// <summary>
            /// Enum Corporationmember for value: corporation_member
            /// </summary>
            [EnumMember(Value = "corporation_member")]
            Corporationmember = 3,
            
            /// <summary>
            /// Enum Starbasefueltechnicianrole for value: starbase_fuel_technician_role
            /// </summary>
            [EnumMember(Value = "starbase_fuel_technician_role")]
            Starbasefueltechnicianrole = 4
        }

        /// <summary>
        /// Who can offline starbase (POS) and its structures
        /// </summary>
        /// <value>Who can offline starbase (POS) and its structures</value>
        [DataMember(Name="offline", EmitDefaultValue=false)]
        public OfflineEnum Offline { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdStarbasesStarbaseIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationsCorporationIdStarbasesStarbaseIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdStarbasesStarbaseIdOk" /> class.
        /// </summary>
        /// <param name="fuelBayView">Who can view the starbase (POS)&#39;s fule bay. Characters either need to have required role or belong to the starbase (POS) owner&#39;s corporation or alliance, as described by the enum, all other access settings follows the same scheme (required).</param>
        /// <param name="fuelBayTake">Who can take fuel blocks out of the starbase (POS)&#39;s fuel bay (required).</param>
        /// <param name="anchor">Who can anchor starbase (POS) and its structures (required).</param>
        /// <param name="unanchor">Who can unanchor starbase (POS) and its structures (required).</param>
        /// <param name="online">Who can online starbase (POS) and its structures (required).</param>
        /// <param name="offline">Who can offline starbase (POS) and its structures (required).</param>
        /// <param name="allowCorporationMembers">allow_corporation_members boolean (required).</param>
        /// <param name="allowAllianceMembers">allow_alliance_members boolean (required).</param>
        /// <param name="useAllianceStandings">True if the starbase (POS) is using alliance standings, otherwise using corporation&#39;s (required).</param>
        /// <param name="attackStandingThreshold">Starbase (POS) will attack if target&#39;s standing is lower than this value.</param>
        /// <param name="attackSecurityStatusThreshold">Starbase (POS) will attack if target&#39;s security standing is lower than this value.</param>
        /// <param name="attackIfOtherSecurityStatusDropping">attack_if_other_security_status_dropping boolean (required).</param>
        /// <param name="attackIfAtWar">attack_if_at_war boolean (required).</param>
        /// <param name="fuels">Fuel blocks and other things that will be consumed when operating a starbase (POS).</param>
        public GetCorporationsCorporationIdStarbasesStarbaseIdOk(FuelBayViewEnum fuelBayView = default(FuelBayViewEnum), FuelBayTakeEnum fuelBayTake = default(FuelBayTakeEnum), AnchorEnum anchor = default(AnchorEnum), UnanchorEnum unanchor = default(UnanchorEnum), OnlineEnum online = default(OnlineEnum), OfflineEnum offline = default(OfflineEnum), bool? allowCorporationMembers = default(bool?), bool? allowAllianceMembers = default(bool?), bool? useAllianceStandings = default(bool?), float? attackStandingThreshold = default(float?), float? attackSecurityStatusThreshold = default(float?), bool? attackIfOtherSecurityStatusDropping = default(bool?), bool? attackIfAtWar = default(bool?), List<GetCorporationsCorporationIdStarbasesStarbaseIdFuel> fuels = default(List<GetCorporationsCorporationIdStarbasesStarbaseIdFuel>))
        {
            // to ensure "fuelBayView" is required (not null)
            if (fuelBayView == null)
            {
                throw new InvalidDataException("fuelBayView is a required property for GetCorporationsCorporationIdStarbasesStarbaseIdOk and cannot be null");
            }
            else
            {
                this.FuelBayView = fuelBayView;
            }
            // to ensure "fuelBayTake" is required (not null)
            if (fuelBayTake == null)
            {
                throw new InvalidDataException("fuelBayTake is a required property for GetCorporationsCorporationIdStarbasesStarbaseIdOk and cannot be null");
            }
            else
            {
                this.FuelBayTake = fuelBayTake;
            }
            // to ensure "anchor" is required (not null)
            if (anchor == null)
            {
                throw new InvalidDataException("anchor is a required property for GetCorporationsCorporationIdStarbasesStarbaseIdOk and cannot be null");
            }
            else
            {
                this.Anchor = anchor;
            }
            // to ensure "unanchor" is required (not null)
            if (unanchor == null)
            {
                throw new InvalidDataException("unanchor is a required property for GetCorporationsCorporationIdStarbasesStarbaseIdOk and cannot be null");
            }
            else
            {
                this.Unanchor = unanchor;
            }
            // to ensure "online" is required (not null)
            if (online == null)
            {
                throw new InvalidDataException("online is a required property for GetCorporationsCorporationIdStarbasesStarbaseIdOk and cannot be null");
            }
            else
            {
                this.Online = online;
            }
            // to ensure "offline" is required (not null)
            if (offline == null)
            {
                throw new InvalidDataException("offline is a required property for GetCorporationsCorporationIdStarbasesStarbaseIdOk and cannot be null");
            }
            else
            {
                this.Offline = offline;
            }
            // to ensure "allowCorporationMembers" is required (not null)
            if (allowCorporationMembers == null)
            {
                throw new InvalidDataException("allowCorporationMembers is a required property for GetCorporationsCorporationIdStarbasesStarbaseIdOk and cannot be null");
            }
            else
            {
                this.AllowCorporationMembers = allowCorporationMembers;
            }
            // to ensure "allowAllianceMembers" is required (not null)
            if (allowAllianceMembers == null)
            {
                throw new InvalidDataException("allowAllianceMembers is a required property for GetCorporationsCorporationIdStarbasesStarbaseIdOk and cannot be null");
            }
            else
            {
                this.AllowAllianceMembers = allowAllianceMembers;
            }
            // to ensure "useAllianceStandings" is required (not null)
            if (useAllianceStandings == null)
            {
                throw new InvalidDataException("useAllianceStandings is a required property for GetCorporationsCorporationIdStarbasesStarbaseIdOk and cannot be null");
            }
            else
            {
                this.UseAllianceStandings = useAllianceStandings;
            }
            // to ensure "attackIfOtherSecurityStatusDropping" is required (not null)
            if (attackIfOtherSecurityStatusDropping == null)
            {
                throw new InvalidDataException("attackIfOtherSecurityStatusDropping is a required property for GetCorporationsCorporationIdStarbasesStarbaseIdOk and cannot be null");
            }
            else
            {
                this.AttackIfOtherSecurityStatusDropping = attackIfOtherSecurityStatusDropping;
            }
            // to ensure "attackIfAtWar" is required (not null)
            if (attackIfAtWar == null)
            {
                throw new InvalidDataException("attackIfAtWar is a required property for GetCorporationsCorporationIdStarbasesStarbaseIdOk and cannot be null");
            }
            else
            {
                this.AttackIfAtWar = attackIfAtWar;
            }
            this.AttackStandingThreshold = attackStandingThreshold;
            this.AttackSecurityStatusThreshold = attackSecurityStatusThreshold;
            this.Fuels = fuels;
        }
        






        /// <summary>
        /// allow_corporation_members boolean
        /// </summary>
        /// <value>allow_corporation_members boolean</value>
        [DataMember(Name="allow_corporation_members", EmitDefaultValue=false)]
        public bool? AllowCorporationMembers { get; set; }

        /// <summary>
        /// allow_alliance_members boolean
        /// </summary>
        /// <value>allow_alliance_members boolean</value>
        [DataMember(Name="allow_alliance_members", EmitDefaultValue=false)]
        public bool? AllowAllianceMembers { get; set; }

        /// <summary>
        /// True if the starbase (POS) is using alliance standings, otherwise using corporation&#39;s
        /// </summary>
        /// <value>True if the starbase (POS) is using alliance standings, otherwise using corporation&#39;s</value>
        [DataMember(Name="use_alliance_standings", EmitDefaultValue=false)]
        public bool? UseAllianceStandings { get; set; }

        /// <summary>
        /// Starbase (POS) will attack if target&#39;s standing is lower than this value
        /// </summary>
        /// <value>Starbase (POS) will attack if target&#39;s standing is lower than this value</value>
        [DataMember(Name="attack_standing_threshold", EmitDefaultValue=false)]
        public float? AttackStandingThreshold { get; set; }

        /// <summary>
        /// Starbase (POS) will attack if target&#39;s security standing is lower than this value
        /// </summary>
        /// <value>Starbase (POS) will attack if target&#39;s security standing is lower than this value</value>
        [DataMember(Name="attack_security_status_threshold", EmitDefaultValue=false)]
        public float? AttackSecurityStatusThreshold { get; set; }

        /// <summary>
        /// attack_if_other_security_status_dropping boolean
        /// </summary>
        /// <value>attack_if_other_security_status_dropping boolean</value>
        [DataMember(Name="attack_if_other_security_status_dropping", EmitDefaultValue=false)]
        public bool? AttackIfOtherSecurityStatusDropping { get; set; }

        /// <summary>
        /// attack_if_at_war boolean
        /// </summary>
        /// <value>attack_if_at_war boolean</value>
        [DataMember(Name="attack_if_at_war", EmitDefaultValue=false)]
        public bool? AttackIfAtWar { get; set; }

        /// <summary>
        /// Fuel blocks and other things that will be consumed when operating a starbase (POS)
        /// </summary>
        /// <value>Fuel blocks and other things that will be consumed when operating a starbase (POS)</value>
        [DataMember(Name="fuels", EmitDefaultValue=false)]
        public List<GetCorporationsCorporationIdStarbasesStarbaseIdFuel> Fuels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationsCorporationIdStarbasesStarbaseIdOk {\n");
            sb.Append("  FuelBayView: ").Append(FuelBayView).Append("\n");
            sb.Append("  FuelBayTake: ").Append(FuelBayTake).Append("\n");
            sb.Append("  Anchor: ").Append(Anchor).Append("\n");
            sb.Append("  Unanchor: ").Append(Unanchor).Append("\n");
            sb.Append("  Online: ").Append(Online).Append("\n");
            sb.Append("  Offline: ").Append(Offline).Append("\n");
            sb.Append("  AllowCorporationMembers: ").Append(AllowCorporationMembers).Append("\n");
            sb.Append("  AllowAllianceMembers: ").Append(AllowAllianceMembers).Append("\n");
            sb.Append("  UseAllianceStandings: ").Append(UseAllianceStandings).Append("\n");
            sb.Append("  AttackStandingThreshold: ").Append(AttackStandingThreshold).Append("\n");
            sb.Append("  AttackSecurityStatusThreshold: ").Append(AttackSecurityStatusThreshold).Append("\n");
            sb.Append("  AttackIfOtherSecurityStatusDropping: ").Append(AttackIfOtherSecurityStatusDropping).Append("\n");
            sb.Append("  AttackIfAtWar: ").Append(AttackIfAtWar).Append("\n");
            sb.Append("  Fuels: ").Append(Fuels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationsCorporationIdStarbasesStarbaseIdOk);
        }

        /// <summary>
        /// Returns true if GetCorporationsCorporationIdStarbasesStarbaseIdOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationsCorporationIdStarbasesStarbaseIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationsCorporationIdStarbasesStarbaseIdOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FuelBayView == input.FuelBayView ||
                    (this.FuelBayView != null &&
                    this.FuelBayView.Equals(input.FuelBayView))
                ) && 
                (
                    this.FuelBayTake == input.FuelBayTake ||
                    (this.FuelBayTake != null &&
                    this.FuelBayTake.Equals(input.FuelBayTake))
                ) && 
                (
                    this.Anchor == input.Anchor ||
                    (this.Anchor != null &&
                    this.Anchor.Equals(input.Anchor))
                ) && 
                (
                    this.Unanchor == input.Unanchor ||
                    (this.Unanchor != null &&
                    this.Unanchor.Equals(input.Unanchor))
                ) && 
                (
                    this.Online == input.Online ||
                    (this.Online != null &&
                    this.Online.Equals(input.Online))
                ) && 
                (
                    this.Offline == input.Offline ||
                    (this.Offline != null &&
                    this.Offline.Equals(input.Offline))
                ) && 
                (
                    this.AllowCorporationMembers == input.AllowCorporationMembers ||
                    (this.AllowCorporationMembers != null &&
                    this.AllowCorporationMembers.Equals(input.AllowCorporationMembers))
                ) && 
                (
                    this.AllowAllianceMembers == input.AllowAllianceMembers ||
                    (this.AllowAllianceMembers != null &&
                    this.AllowAllianceMembers.Equals(input.AllowAllianceMembers))
                ) && 
                (
                    this.UseAllianceStandings == input.UseAllianceStandings ||
                    (this.UseAllianceStandings != null &&
                    this.UseAllianceStandings.Equals(input.UseAllianceStandings))
                ) && 
                (
                    this.AttackStandingThreshold == input.AttackStandingThreshold ||
                    (this.AttackStandingThreshold != null &&
                    this.AttackStandingThreshold.Equals(input.AttackStandingThreshold))
                ) && 
                (
                    this.AttackSecurityStatusThreshold == input.AttackSecurityStatusThreshold ||
                    (this.AttackSecurityStatusThreshold != null &&
                    this.AttackSecurityStatusThreshold.Equals(input.AttackSecurityStatusThreshold))
                ) && 
                (
                    this.AttackIfOtherSecurityStatusDropping == input.AttackIfOtherSecurityStatusDropping ||
                    (this.AttackIfOtherSecurityStatusDropping != null &&
                    this.AttackIfOtherSecurityStatusDropping.Equals(input.AttackIfOtherSecurityStatusDropping))
                ) && 
                (
                    this.AttackIfAtWar == input.AttackIfAtWar ||
                    (this.AttackIfAtWar != null &&
                    this.AttackIfAtWar.Equals(input.AttackIfAtWar))
                ) && 
                (
                    this.Fuels == input.Fuels ||
                    this.Fuels != null &&
                    this.Fuels.SequenceEqual(input.Fuels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FuelBayView != null)
                    hashCode = hashCode * 59 + this.FuelBayView.GetHashCode();
                if (this.FuelBayTake != null)
                    hashCode = hashCode * 59 + this.FuelBayTake.GetHashCode();
                if (this.Anchor != null)
                    hashCode = hashCode * 59 + this.Anchor.GetHashCode();
                if (this.Unanchor != null)
                    hashCode = hashCode * 59 + this.Unanchor.GetHashCode();
                if (this.Online != null)
                    hashCode = hashCode * 59 + this.Online.GetHashCode();
                if (this.Offline != null)
                    hashCode = hashCode * 59 + this.Offline.GetHashCode();
                if (this.AllowCorporationMembers != null)
                    hashCode = hashCode * 59 + this.AllowCorporationMembers.GetHashCode();
                if (this.AllowAllianceMembers != null)
                    hashCode = hashCode * 59 + this.AllowAllianceMembers.GetHashCode();
                if (this.UseAllianceStandings != null)
                    hashCode = hashCode * 59 + this.UseAllianceStandings.GetHashCode();
                if (this.AttackStandingThreshold != null)
                    hashCode = hashCode * 59 + this.AttackStandingThreshold.GetHashCode();
                if (this.AttackSecurityStatusThreshold != null)
                    hashCode = hashCode * 59 + this.AttackSecurityStatusThreshold.GetHashCode();
                if (this.AttackIfOtherSecurityStatusDropping != null)
                    hashCode = hashCode * 59 + this.AttackIfOtherSecurityStatusDropping.GetHashCode();
                if (this.AttackIfAtWar != null)
                    hashCode = hashCode * 59 + this.AttackIfAtWar.GetHashCode();
                if (this.Fuels != null)
                    hashCode = hashCode * 59 + this.Fuels.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
