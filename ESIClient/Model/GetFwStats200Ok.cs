/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ESIClient.Client.SwaggerDateConverter;

namespace ESIClient.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetFwStats200Ok :  IEquatable<GetFwStats200Ok>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFwStats200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetFwStats200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFwStats200Ok" /> class.
        /// </summary>
        /// <param name="factionId">faction_id integer (required).</param>
        /// <param name="pilots">How many pilots fight for the given faction (required).</param>
        /// <param name="systemsControlled">The number of solar systems controlled by the given faction (required).</param>
        /// <param name="kills">kills (required).</param>
        /// <param name="victoryPoints">victoryPoints (required).</param>
        public GetFwStats200Ok(int? factionId = default(int?), int? pilots = default(int?), int? systemsControlled = default(int?), GetFwStatsKills kills = default(GetFwStatsKills), GetFwStatsVictoryPoints victoryPoints = default(GetFwStatsVictoryPoints))
        {
            // to ensure "factionId" is required (not null)
            if (factionId == null)
            {
                throw new InvalidDataException("factionId is a required property for GetFwStats200Ok and cannot be null");
            }
            else
            {
                this.FactionId = factionId;
            }
            // to ensure "pilots" is required (not null)
            if (pilots == null)
            {
                throw new InvalidDataException("pilots is a required property for GetFwStats200Ok and cannot be null");
            }
            else
            {
                this.Pilots = pilots;
            }
            // to ensure "systemsControlled" is required (not null)
            if (systemsControlled == null)
            {
                throw new InvalidDataException("systemsControlled is a required property for GetFwStats200Ok and cannot be null");
            }
            else
            {
                this.SystemsControlled = systemsControlled;
            }
            // to ensure "kills" is required (not null)
            if (kills == null)
            {
                throw new InvalidDataException("kills is a required property for GetFwStats200Ok and cannot be null");
            }
            else
            {
                this.Kills = kills;
            }
            // to ensure "victoryPoints" is required (not null)
            if (victoryPoints == null)
            {
                throw new InvalidDataException("victoryPoints is a required property for GetFwStats200Ok and cannot be null");
            }
            else
            {
                this.VictoryPoints = victoryPoints;
            }
        }
        
        /// <summary>
        /// faction_id integer
        /// </summary>
        /// <value>faction_id integer</value>
        [DataMember(Name="faction_id", EmitDefaultValue=false)]
        public int? FactionId { get; set; }

        /// <summary>
        /// How many pilots fight for the given faction
        /// </summary>
        /// <value>How many pilots fight for the given faction</value>
        [DataMember(Name="pilots", EmitDefaultValue=false)]
        public int? Pilots { get; set; }

        /// <summary>
        /// The number of solar systems controlled by the given faction
        /// </summary>
        /// <value>The number of solar systems controlled by the given faction</value>
        [DataMember(Name="systems_controlled", EmitDefaultValue=false)]
        public int? SystemsControlled { get; set; }

        /// <summary>
        /// Gets or Sets Kills
        /// </summary>
        [DataMember(Name="kills", EmitDefaultValue=false)]
        public GetFwStatsKills Kills { get; set; }

        /// <summary>
        /// Gets or Sets VictoryPoints
        /// </summary>
        [DataMember(Name="victory_points", EmitDefaultValue=false)]
        public GetFwStatsVictoryPoints VictoryPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetFwStats200Ok {\n");
            sb.Append("  FactionId: ").Append(FactionId).Append("\n");
            sb.Append("  Pilots: ").Append(Pilots).Append("\n");
            sb.Append("  SystemsControlled: ").Append(SystemsControlled).Append("\n");
            sb.Append("  Kills: ").Append(Kills).Append("\n");
            sb.Append("  VictoryPoints: ").Append(VictoryPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetFwStats200Ok);
        }

        /// <summary>
        /// Returns true if GetFwStats200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetFwStats200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetFwStats200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FactionId == input.FactionId ||
                    (this.FactionId != null &&
                    this.FactionId.Equals(input.FactionId))
                ) && 
                (
                    this.Pilots == input.Pilots ||
                    (this.Pilots != null &&
                    this.Pilots.Equals(input.Pilots))
                ) && 
                (
                    this.SystemsControlled == input.SystemsControlled ||
                    (this.SystemsControlled != null &&
                    this.SystemsControlled.Equals(input.SystemsControlled))
                ) && 
                (
                    this.Kills == input.Kills ||
                    (this.Kills != null &&
                    this.Kills.Equals(input.Kills))
                ) && 
                (
                    this.VictoryPoints == input.VictoryPoints ||
                    (this.VictoryPoints != null &&
                    this.VictoryPoints.Equals(input.VictoryPoints))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FactionId != null)
                    hashCode = hashCode * 59 + this.FactionId.GetHashCode();
                if (this.Pilots != null)
                    hashCode = hashCode * 59 + this.Pilots.GetHashCode();
                if (this.SystemsControlled != null)
                    hashCode = hashCode * 59 + this.SystemsControlled.GetHashCode();
                if (this.Kills != null)
                    hashCode = hashCode * 59 + this.Kills.GetHashCode();
                if (this.VictoryPoints != null)
                    hashCode = hashCode * 59 + this.VictoryPoints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
