/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ESIClient.Client.SwaggerDateConverter;

namespace ESIClient.Model
{
    /// <summary>
    /// route object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdPlanetsPlanetIdRoute :  IEquatable<GetCharactersCharacterIdPlanetsPlanetIdRoute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdPlanetsPlanetIdRoute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdPlanetsPlanetIdRoute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdPlanetsPlanetIdRoute" /> class.
        /// </summary>
        /// <param name="routeId">route_id integer (required).</param>
        /// <param name="sourcePinId">source_pin_id integer (required).</param>
        /// <param name="destinationPinId">destination_pin_id integer (required).</param>
        /// <param name="contentTypeId">content_type_id integer (required).</param>
        /// <param name="quantity">quantity number (required).</param>
        /// <param name="waypoints">list of pin ID waypoints.</param>
        public GetCharactersCharacterIdPlanetsPlanetIdRoute(long? routeId = default(long?), long? sourcePinId = default(long?), long? destinationPinId = default(long?), int? contentTypeId = default(int?), float? quantity = default(float?), List<long?> waypoints = default(List<long?>))
        {
            // to ensure "routeId" is required (not null)
            if (routeId == null)
            {
                throw new InvalidDataException("routeId is a required property for GetCharactersCharacterIdPlanetsPlanetIdRoute and cannot be null");
            }
            else
            {
                this.RouteId = routeId;
            }
            // to ensure "sourcePinId" is required (not null)
            if (sourcePinId == null)
            {
                throw new InvalidDataException("sourcePinId is a required property for GetCharactersCharacterIdPlanetsPlanetIdRoute and cannot be null");
            }
            else
            {
                this.SourcePinId = sourcePinId;
            }
            // to ensure "destinationPinId" is required (not null)
            if (destinationPinId == null)
            {
                throw new InvalidDataException("destinationPinId is a required property for GetCharactersCharacterIdPlanetsPlanetIdRoute and cannot be null");
            }
            else
            {
                this.DestinationPinId = destinationPinId;
            }
            // to ensure "contentTypeId" is required (not null)
            if (contentTypeId == null)
            {
                throw new InvalidDataException("contentTypeId is a required property for GetCharactersCharacterIdPlanetsPlanetIdRoute and cannot be null");
            }
            else
            {
                this.ContentTypeId = contentTypeId;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for GetCharactersCharacterIdPlanetsPlanetIdRoute and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            this.Waypoints = waypoints;
        }
        
        /// <summary>
        /// route_id integer
        /// </summary>
        /// <value>route_id integer</value>
        [DataMember(Name="route_id", EmitDefaultValue=false)]
        public long? RouteId { get; set; }

        /// <summary>
        /// source_pin_id integer
        /// </summary>
        /// <value>source_pin_id integer</value>
        [DataMember(Name="source_pin_id", EmitDefaultValue=false)]
        public long? SourcePinId { get; set; }

        /// <summary>
        /// destination_pin_id integer
        /// </summary>
        /// <value>destination_pin_id integer</value>
        [DataMember(Name="destination_pin_id", EmitDefaultValue=false)]
        public long? DestinationPinId { get; set; }

        /// <summary>
        /// content_type_id integer
        /// </summary>
        /// <value>content_type_id integer</value>
        [DataMember(Name="content_type_id", EmitDefaultValue=false)]
        public int? ContentTypeId { get; set; }

        /// <summary>
        /// quantity number
        /// </summary>
        /// <value>quantity number</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public float? Quantity { get; set; }

        /// <summary>
        /// list of pin ID waypoints
        /// </summary>
        /// <value>list of pin ID waypoints</value>
        [DataMember(Name="waypoints", EmitDefaultValue=false)]
        public List<long?> Waypoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdPlanetsPlanetIdRoute {\n");
            sb.Append("  RouteId: ").Append(RouteId).Append("\n");
            sb.Append("  SourcePinId: ").Append(SourcePinId).Append("\n");
            sb.Append("  DestinationPinId: ").Append(DestinationPinId).Append("\n");
            sb.Append("  ContentTypeId: ").Append(ContentTypeId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Waypoints: ").Append(Waypoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdPlanetsPlanetIdRoute);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdPlanetsPlanetIdRoute instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdPlanetsPlanetIdRoute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdPlanetsPlanetIdRoute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RouteId == input.RouteId ||
                    (this.RouteId != null &&
                    this.RouteId.Equals(input.RouteId))
                ) && 
                (
                    this.SourcePinId == input.SourcePinId ||
                    (this.SourcePinId != null &&
                    this.SourcePinId.Equals(input.SourcePinId))
                ) && 
                (
                    this.DestinationPinId == input.DestinationPinId ||
                    (this.DestinationPinId != null &&
                    this.DestinationPinId.Equals(input.DestinationPinId))
                ) && 
                (
                    this.ContentTypeId == input.ContentTypeId ||
                    (this.ContentTypeId != null &&
                    this.ContentTypeId.Equals(input.ContentTypeId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Waypoints == input.Waypoints ||
                    this.Waypoints != null &&
                    this.Waypoints.SequenceEqual(input.Waypoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RouteId != null)
                    hashCode = hashCode * 59 + this.RouteId.GetHashCode();
                if (this.SourcePinId != null)
                    hashCode = hashCode * 59 + this.SourcePinId.GetHashCode();
                if (this.DestinationPinId != null)
                    hashCode = hashCode * 59 + this.DestinationPinId.GetHashCode();
                if (this.ContentTypeId != null)
                    hashCode = hashCode * 59 + this.ContentTypeId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Waypoints != null)
                    hashCode = hashCode * 59 + this.Waypoints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
